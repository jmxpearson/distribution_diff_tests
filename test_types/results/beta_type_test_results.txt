____________________________
ntrials
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 28:
      return (top(tuple))((top(getfield))(d::Distributions.Beta{Int64},:α)::Int64,(top(getfield))(d::Distributions.Beta{Int64},:β)::Int64)::Tuple{Int64,Int64}
  end::Tuple{Int64,Int64}

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 28:
      return (top(tuple))((top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 28:
      return (top(tuple))((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 28:
      return (top(tuple))((top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 28:
      return (top(tuple))((top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 28:
      return (top(tuple))((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 28:
      return (top(tuple))((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 28:
      return (top(tuple))((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 28:
      return (top(tuple))((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Int64}
  α::Int64
  β::Int64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 33:
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Int64},:α)::Int64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Int64},:β)::Int64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8)
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,α::Int64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Base.Int,(Base.add_int)(α::Int64,β::Int64))))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 33:
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8)
      return (Base.box)(Base.Float64,(Base.div_float)(α::Float64,(Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######a#7072#7074#7095::Tuple{}
  ######b#7073#7075#7096::Tuple{}
  ####_var0#7076#7097::Tuple{}
  ##a1#7098::Float64
  ##a2#7099::Float64
  ##div_a#7100::Float64
  ####afactor#7087#7101::Float64
  ####bfactor#7088#7102::Float64
  ########a#7077#7081#7089#7103::Tuple{}
  ########b#7078#7082#7090#7104::Tuple{}
  ########afactor#7079#7083#7091#7105::Float64
  ########bfactor#7080#7084#7092#7106::Float64
  ######_var0#7085#7093#7107::Tuple{}
  ######types#7086#7094#7108::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 33:
      GenSym(5) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(9)
      #s25 = GenSym(10)
      $(Expr(:boundscheck, false))
      ####_var0#7076#7097 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7076#7097 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7098 = GenSym(3)
      ##a2#7099 = GenSym(4)
      ##div_a#7100 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7098::Float64,##a2#7099::Float64))
      ####afactor#7087#7101 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7099::Float64))
      ####bfactor#7088#7102 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7098::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7099::Float64,##a2#7099::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7107 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7085#7093#7107 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7100::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 33:
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8)
      return (Base.box)(Base.Float64,(Base.div_float)(α::Float64,(Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 33:
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8)
      return (Base.box)(Base.Float64,(Base.div_float)(α::Float64,(Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######a#7072#7074#7095::Tuple{}
  ######b#7073#7075#7096::Tuple{}
  ####_var0#7076#7097::Tuple{}
  ##a1#7098::Float64
  ##a2#7099::Float64
  ##div_a#7100::Float64
  ####afactor#7087#7101::Float64
  ####bfactor#7088#7102::Float64
  ########a#7077#7081#7089#7103::Tuple{}
  ########b#7078#7082#7090#7104::Tuple{}
  ########afactor#7079#7083#7091#7105::Float64
  ########bfactor#7080#7084#7092#7106::Float64
  ######_var0#7085#7093#7107::Tuple{}
  ######types#7086#7094#7108::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 33:
      GenSym(5) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(9)
      #s25 = GenSym(10)
      $(Expr(:boundscheck, false))
      ####_var0#7076#7097 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7076#7097 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7098 = GenSym(3)
      ##a2#7099 = GenSym(4)
      ##div_a#7100 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7098::Float64,##a2#7099::Float64))
      ####afactor#7087#7101 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7099::Float64))
      ####bfactor#7088#7102 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7098::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7099::Float64,##a2#7099::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7107 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7085#7093#7107 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7100::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######a#7072#7074#7095::Tuple{}
  ######b#7073#7075#7096::Tuple{}
  ####_var0#7076#7097::Tuple{}
  ##a1#7098::Float64
  ##a2#7099::Float64
  ##div_a#7100::Float64
  ####afactor#7087#7101::Float64
  ####bfactor#7088#7102::Float64
  ########a#7077#7081#7089#7103::Tuple{}
  ########b#7078#7082#7090#7104::Tuple{}
  ########afactor#7079#7083#7091#7105::Float64
  ########bfactor#7080#7084#7092#7106::Float64
  ######_var0#7085#7093#7107::Tuple{}
  ######types#7086#7094#7108::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 33:
      GenSym(5) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(9)
      #s25 = GenSym(10)
      $(Expr(:boundscheck, false))
      ####_var0#7076#7097 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7076#7097 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7098 = GenSym(3)
      ##a2#7099 = GenSym(4)
      ##div_a#7100 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7098::Float64,##a2#7099::Float64))
      ####afactor#7087#7101 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7099::Float64))
      ####bfactor#7088#7102 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7098::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7099::Float64,##a2#7099::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7107 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7085#7093#7107 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7100::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######a#7072#7074#7095::Tuple{}
  ######b#7073#7075#7096::Tuple{}
  ####_var0#7076#7097::Tuple{}
  ##a1#7098::Float64
  ##a2#7099::Float64
  ##div_a#7100::Float64
  ####afactor#7087#7101::Float64
  ####bfactor#7088#7102::Float64
  ########a#7077#7081#7089#7103::Tuple{}
  ########b#7078#7082#7090#7104::Tuple{}
  ########afactor#7079#7083#7091#7105::Float64
  ########bfactor#7080#7084#7092#7106::Float64
  ######_var0#7085#7093#7107::Tuple{}
  ######types#7086#7094#7108::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 33:
      GenSym(5) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(9)
      #s25 = GenSym(10)
      $(Expr(:boundscheck, false))
      ####_var0#7076#7097 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7076#7097 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7098 = GenSym(3)
      ##a2#7099 = GenSym(4)
      ##div_a#7100 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7098::Float64,##a2#7099::Float64))
      ####afactor#7087#7101 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7099::Float64))
      ####bfactor#7088#7102 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7098::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7099::Float64,##a2#7099::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7107 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7085#7093#7107 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7100::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######a#7072#7074#7095::Tuple{}
  ######b#7073#7075#7096::Tuple{}
  ####_var0#7076#7097::Tuple{}
  ##a1#7098::Float64
  ##a2#7099::Float64
  ##div_a#7100::Float64
  ####afactor#7087#7101::Float64
  ####bfactor#7088#7102::Float64
  ########a#7077#7081#7089#7103::Tuple{}
  ########b#7078#7082#7090#7104::Tuple{}
  ########afactor#7079#7083#7091#7105::Float64
  ########bfactor#7080#7084#7092#7106::Float64
  ######_var0#7085#7093#7107::Tuple{}
  ######types#7086#7094#7108::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 33:
      GenSym(5) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(9)
      #s25 = GenSym(10)
      $(Expr(:boundscheck, false))
      ####_var0#7076#7097 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7076#7097 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7098 = GenSym(3)
      ##a2#7099 = GenSym(4)
      ##div_a#7100 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7098::Float64,##a2#7099::Float64))
      ####afactor#7087#7101 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7099::Float64))
      ####bfactor#7088#7102 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7098::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7099::Float64,##a2#7099::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7107 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7085#7093#7107 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7100::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Int64}
  α::Int64
  β::Int64
  #s25::Int64
  s::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 44:
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Int64},:α)::Int64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Int64},:β)::Int64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 45:
      s = (Base.box)(Base.Int,(Base.add_int)(α::Int64,β::Int64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 46:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(α::Int64,β::Int64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(s::Int64,s::Int64)))),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,s::Int64)),1.0))))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 44:
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 45:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 46:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(s::Float64,s::Float64)),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0))))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7072#7074#7135::Tuple{}
  ######b#7073#7075#7136::Tuple{}
  ####_var0#7076#7137::Tuple{}
  ######types#7133#7134#7138::Tuple{Type{Float64}}
  ##a#7139::Float64
  ####G#7128#7140::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7129#7141::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7130#7142::Tuple{}
  ##########x#7120#7122#7126#7131#7143::Float64
  ########_var0#7123#7127#7132#7144::Tuple{}
  ##a1#7145::Float64
  ##a2#7146::Float64
  ######a#7077#7113#7147::Tuple{}
  ######b#7078#7114#7148::Tuple{}
  ######afactor#7079#7115#7149::Float64
  ######bfactor#7080#7116#7150::Float64
  ####_var0#7117#7151::Tuple{}
  ##a1#7152::Float64
  ##a2#7153::Float64
  ######a#7077#7113#7154::Tuple{}
  ######b#7078#7114#7155::Tuple{}
  ######afactor#7079#7115#7156::Float64
  ######bfactor#7080#7116#7157::Float64
  ####_var0#7117#7158::Tuple{}
  ##a1#7159::Float64
  ##a2#7160::Float64
  ##div_a#7161::Float64
  ####afactor#7087#7162::Float64
  ####bfactor#7088#7163::Float64
  ########a#7077#7081#7089#7164::Tuple{}
  ########b#7078#7082#7090#7165::Tuple{}
  ########afactor#7079#7083#7091#7166::Float64
  ########bfactor#7080#7084#7092#7167::Float64
  ######_var0#7085#7093#7168::Tuple{}
  ######types#7086#7094#7169::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 44:
      GenSym(12) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 45:
      $(Expr(:boundscheck, false))
      ####_var0#7076#7137 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7076#7137 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 46:
      GenSym(6) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7152 = GenSym(6)
      ##a2#7153 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7158 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7117#7158 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7152::Float64,##a2#7153::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7139 = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####G#7128#7140 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7132#7144 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7123#7127#7132#7144 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7139::Float64,##a#7139::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7145 = GenSym(4)
      ##a2#7146 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7151 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7117#7151 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7145::Float64,##a2#7146::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7159 = GenSym(10)
      ##a2#7160 = GenSym(11)
      ##div_a#7161 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7159::Float64,##a2#7160::Float64))
      ####afactor#7087#7162 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7160::Float64))
      ####bfactor#7088#7163 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7159::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7160::Float64,##a2#7160::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7168 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7085#7093#7168 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7161::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 44:
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 45:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 46:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(s::Float64,s::Float64)),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0))))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 44:
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 45:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 46:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(s::Float64,s::Float64)),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0))))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7072#7074#7135::Tuple{}
  ######b#7073#7075#7136::Tuple{}
  ####_var0#7076#7137::Tuple{}
  ######types#7133#7134#7138::Tuple{Type{Float64}}
  ##a#7139::Float64
  ####G#7128#7140::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7129#7141::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7130#7142::Tuple{}
  ##########x#7120#7122#7126#7131#7143::Float64
  ########_var0#7123#7127#7132#7144::Tuple{}
  ##a1#7145::Float64
  ##a2#7146::Float64
  ######a#7077#7113#7147::Tuple{}
  ######b#7078#7114#7148::Tuple{}
  ######afactor#7079#7115#7149::Float64
  ######bfactor#7080#7116#7150::Float64
  ####_var0#7117#7151::Tuple{}
  ##a1#7152::Float64
  ##a2#7153::Float64
  ######a#7077#7113#7154::Tuple{}
  ######b#7078#7114#7155::Tuple{}
  ######afactor#7079#7115#7156::Float64
  ######bfactor#7080#7116#7157::Float64
  ####_var0#7117#7158::Tuple{}
  ##a1#7159::Float64
  ##a2#7160::Float64
  ##div_a#7161::Float64
  ####afactor#7087#7162::Float64
  ####bfactor#7088#7163::Float64
  ########a#7077#7081#7089#7164::Tuple{}
  ########b#7078#7082#7090#7165::Tuple{}
  ########afactor#7079#7083#7091#7166::Float64
  ########bfactor#7080#7084#7092#7167::Float64
  ######_var0#7085#7093#7168::Tuple{}
  ######types#7086#7094#7169::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 44:
      GenSym(12) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 45:
      $(Expr(:boundscheck, false))
      ####_var0#7076#7137 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7076#7137 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 46:
      GenSym(6) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7152 = GenSym(6)
      ##a2#7153 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7158 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7117#7158 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7152::Float64,##a2#7153::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7139 = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####G#7128#7140 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7132#7144 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7123#7127#7132#7144 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7139::Float64,##a#7139::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7145 = GenSym(4)
      ##a2#7146 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7151 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7117#7151 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7145::Float64,##a2#7146::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7159 = GenSym(10)
      ##a2#7160 = GenSym(11)
      ##div_a#7161 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7159::Float64,##a2#7160::Float64))
      ####afactor#7087#7162 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7160::Float64))
      ####bfactor#7088#7163 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7159::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7160::Float64,##a2#7160::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7168 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7085#7093#7168 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7161::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7072#7074#7135::Tuple{}
  ######b#7073#7075#7136::Tuple{}
  ####_var0#7076#7137::Tuple{}
  ######types#7133#7134#7138::Tuple{Type{Float64}}
  ##a#7139::Float64
  ####G#7128#7140::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7129#7141::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7130#7142::Tuple{}
  ##########x#7120#7122#7126#7131#7143::Float64
  ########_var0#7123#7127#7132#7144::Tuple{}
  ##a1#7145::Float64
  ##a2#7146::Float64
  ######a#7077#7113#7147::Tuple{}
  ######b#7078#7114#7148::Tuple{}
  ######afactor#7079#7115#7149::Float64
  ######bfactor#7080#7116#7150::Float64
  ####_var0#7117#7151::Tuple{}
  ##a1#7152::Float64
  ##a2#7153::Float64
  ######a#7077#7113#7154::Tuple{}
  ######b#7078#7114#7155::Tuple{}
  ######afactor#7079#7115#7156::Float64
  ######bfactor#7080#7116#7157::Float64
  ####_var0#7117#7158::Tuple{}
  ##a1#7159::Float64
  ##a2#7160::Float64
  ##div_a#7161::Float64
  ####afactor#7087#7162::Float64
  ####bfactor#7088#7163::Float64
  ########a#7077#7081#7089#7164::Tuple{}
  ########b#7078#7082#7090#7165::Tuple{}
  ########afactor#7079#7083#7091#7166::Float64
  ########bfactor#7080#7084#7092#7167::Float64
  ######_var0#7085#7093#7168::Tuple{}
  ######types#7086#7094#7169::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 44:
      GenSym(12) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 45:
      $(Expr(:boundscheck, false))
      ####_var0#7076#7137 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7076#7137 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 46:
      GenSym(6) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7152 = GenSym(6)
      ##a2#7153 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7158 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7117#7158 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7152::Float64,##a2#7153::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7139 = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####G#7128#7140 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7132#7144 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7123#7127#7132#7144 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7139::Float64,##a#7139::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7145 = GenSym(4)
      ##a2#7146 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7151 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7117#7151 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7145::Float64,##a2#7146::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7159 = GenSym(10)
      ##a2#7160 = GenSym(11)
      ##div_a#7161 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7159::Float64,##a2#7160::Float64))
      ####afactor#7087#7162 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7160::Float64))
      ####bfactor#7088#7163 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7159::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7160::Float64,##a2#7160::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7168 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7085#7093#7168 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7161::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7072#7074#7135::Tuple{}
  ######b#7073#7075#7136::Tuple{}
  ####_var0#7076#7137::Tuple{}
  ######types#7133#7134#7138::Tuple{Type{Float64}}
  ##a#7139::Float64
  ####G#7128#7140::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7129#7141::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7130#7142::Tuple{}
  ##########x#7120#7122#7126#7131#7143::Float64
  ########_var0#7123#7127#7132#7144::Tuple{}
  ##a1#7145::Float64
  ##a2#7146::Float64
  ######a#7077#7113#7147::Tuple{}
  ######b#7078#7114#7148::Tuple{}
  ######afactor#7079#7115#7149::Float64
  ######bfactor#7080#7116#7150::Float64
  ####_var0#7117#7151::Tuple{}
  ##a1#7152::Float64
  ##a2#7153::Float64
  ######a#7077#7113#7154::Tuple{}
  ######b#7078#7114#7155::Tuple{}
  ######afactor#7079#7115#7156::Float64
  ######bfactor#7080#7116#7157::Float64
  ####_var0#7117#7158::Tuple{}
  ##a1#7159::Float64
  ##a2#7160::Float64
  ##div_a#7161::Float64
  ####afactor#7087#7162::Float64
  ####bfactor#7088#7163::Float64
  ########a#7077#7081#7089#7164::Tuple{}
  ########b#7078#7082#7090#7165::Tuple{}
  ########afactor#7079#7083#7091#7166::Float64
  ########bfactor#7080#7084#7092#7167::Float64
  ######_var0#7085#7093#7168::Tuple{}
  ######types#7086#7094#7169::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 44:
      GenSym(12) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 45:
      $(Expr(:boundscheck, false))
      ####_var0#7076#7137 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7076#7137 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 46:
      GenSym(6) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7152 = GenSym(6)
      ##a2#7153 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7158 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7117#7158 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7152::Float64,##a2#7153::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7139 = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####G#7128#7140 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7132#7144 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7123#7127#7132#7144 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7139::Float64,##a#7139::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7145 = GenSym(4)
      ##a2#7146 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7151 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7117#7151 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7145::Float64,##a2#7146::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7159 = GenSym(10)
      ##a2#7160 = GenSym(11)
      ##div_a#7161 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7159::Float64,##a2#7160::Float64))
      ####afactor#7087#7162 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7160::Float64))
      ####bfactor#7088#7163 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7159::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7160::Float64,##a2#7160::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7168 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7085#7093#7168 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7161::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7072#7074#7135::Tuple{}
  ######b#7073#7075#7136::Tuple{}
  ####_var0#7076#7137::Tuple{}
  ######types#7133#7134#7138::Tuple{Type{Float64}}
  ##a#7139::Float64
  ####G#7128#7140::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7129#7141::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7130#7142::Tuple{}
  ##########x#7120#7122#7126#7131#7143::Float64
  ########_var0#7123#7127#7132#7144::Tuple{}
  ##a1#7145::Float64
  ##a2#7146::Float64
  ######a#7077#7113#7147::Tuple{}
  ######b#7078#7114#7148::Tuple{}
  ######afactor#7079#7115#7149::Float64
  ######bfactor#7080#7116#7150::Float64
  ####_var0#7117#7151::Tuple{}
  ##a1#7152::Float64
  ##a2#7153::Float64
  ######a#7077#7113#7154::Tuple{}
  ######b#7078#7114#7155::Tuple{}
  ######afactor#7079#7115#7156::Float64
  ######bfactor#7080#7116#7157::Float64
  ####_var0#7117#7158::Tuple{}
  ##a1#7159::Float64
  ##a2#7160::Float64
  ##div_a#7161::Float64
  ####afactor#7087#7162::Float64
  ####bfactor#7088#7163::Float64
  ########a#7077#7081#7089#7164::Tuple{}
  ########b#7078#7082#7090#7165::Tuple{}
  ########afactor#7079#7083#7091#7166::Float64
  ########bfactor#7080#7084#7092#7167::Float64
  ######_var0#7085#7093#7168::Tuple{}
  ######types#7086#7094#7169::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 44:
      GenSym(12) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 45:
      $(Expr(:boundscheck, false))
      ####_var0#7076#7137 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7076#7137 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 46:
      GenSym(6) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7152 = GenSym(6)
      ##a2#7153 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7158 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7117#7158 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7152::Float64,##a2#7153::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7139 = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####G#7128#7140 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7132#7144 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7123#7127#7132#7144 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7139::Float64,##a#7139::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7145 = GenSym(4)
      ##a2#7146 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7151 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7117#7151 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7145::Float64,##a2#7146::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7159 = GenSym(10)
      ##a2#7160 = GenSym(11)
      ##div_a#7161 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7159::Float64,##a2#7160::Float64))
      ####afactor#7087#7162 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7160::Float64))
      ####bfactor#7088#7163 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7159::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7160::Float64,##a2#7160::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7168 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7085#7093#7168 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7161::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Int64}
  α::Int64
  β::Int64
  #s25::Int64
  #s24::Bool
  ####fy#7170#7171::Float64
  ####fy#7170#7172::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 36:
      NewvarNode(symbol("#s24"))
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Int64},:α)::Int64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Int64},:β)::Int64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 37:
      ####fy#7170#7171 = (Base.box)(Float64,(Base.sitofp)(Float64,α::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(1.0,####fy#7170#7171::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(1.0,####fy#7170#7171::Float64)::Bool,(Base.lt_float)(####fy#7170#7171::Float64,9.223372036854776e18)::Bool)),(Base.slt_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7170#7171::Float64)),α::Int64)::Bool)))) goto 0
      ####fy#7170#7172 = (Base.box)(Float64,(Base.sitofp)(Float64,β::Int64))
      #s24 = (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(1.0,####fy#7170#7172::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(1.0,####fy#7170#7172::Float64)::Bool,(Base.lt_float)(####fy#7170#7172::Float64,9.223372036854776e18)::Bool)),(Base.slt_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7170#7172::Float64)),β::Int64)::Bool))))
      goto 1
      0: 
      #s24 = false
      1: 
      unless #s24::Bool goto 2
      goto 3
      2: 
      (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,"mode is defined only when α > 1 and β > 1.")::ANY)::UNION{}
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 38:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,α::Int64)),1.0)),(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Base.Int,(Base.add_int)(α::Int64,β::Int64)))),2.0))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  #s24::Bool

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 36:
      NewvarNode(symbol("#s24"))
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 37:
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      #s24 = (Base.lt_float)(1.0,β::Float64)::Bool
      goto 1
      0: 
      #s24 = false
      1: 
      unless #s24::Bool goto 2
      goto 3
      2: 
      (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,"mode is defined only when α > 1 and β > 1.")::ANY)::UNION{}
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 38:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),2.0))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  #s24::Bool
  ######a#7072#7074#7182::Tuple{}
  ######b#7073#7075#7183::Tuple{}
  ####_var0#7076#7184::Tuple{}
  ######types#7133#7181#7185::Tuple{Type{Float64}}
  ######types#7133#7181#7186::Tuple{Type{Float64}}
  ##a1#7187::Float64
  ##a2#7188::Float64
  ##div_a#7189::Float64
  ####afactor#7087#7190::Float64
  ####bfactor#7088#7191::Float64
  ########a#7077#7081#7089#7192::Tuple{}
  ########b#7078#7082#7090#7193::Tuple{}
  ########afactor#7079#7083#7091#7194::Float64
  ########bfactor#7080#7084#7092#7195::Float64
  ######_var0#7085#7093#7196::Tuple{}
  ######types#7086#7094#7197::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 36:
      NewvarNode(symbol("#s24"))
      GenSym(6) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(7) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(10)
      #s25 = GenSym(11) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 37:
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      #s24 = (Base.lt_float)(1.0,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool
      goto 1
      0: 
      #s24 = false
      1: 
      unless #s24::Bool goto 2
      goto 3
      2: 
      (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,"mode is defined only when α > 1 and β > 1.")::ANY)::UNION{}
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 38:
      $(Expr(:boundscheck, false))
      ####_var0#7076#7184 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7076#7184 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(3),:value)::Float64,2.0))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7187 = GenSym(4)
      ##a2#7188 = GenSym(5)
      ##div_a#7189 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7187::Float64,##a2#7188::Float64))
      ####afactor#7087#7190 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7188::Float64))
      ####bfactor#7088#7191 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7187::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7188::Float64,##a2#7188::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7196 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7085#7093#7196 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7189::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  #s24::Bool

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 36:
      NewvarNode(symbol("#s24"))
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 37:
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      #s24 = (Base.lt_float)(1.0,β::Float64)::Bool
      goto 1
      0: 
      #s24 = false
      1: 
      unless #s24::Bool goto 2
      goto 3
      2: 
      (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,"mode is defined only when α > 1 and β > 1.")::ANY)::UNION{}
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 38:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),2.0))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  #s24::Bool

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 36:
      NewvarNode(symbol("#s24"))
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 37:
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      #s24 = (Base.lt_float)(1.0,β::Float64)::Bool
      goto 1
      0: 
      #s24 = false
      1: 
      unless #s24::Bool goto 2
      goto 3
      2: 
      (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,"mode is defined only when α > 1 and β > 1.")::ANY)::UNION{}
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 38:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),2.0))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  #s24::Bool
  ######a#7072#7074#7182::Tuple{}
  ######b#7073#7075#7183::Tuple{}
  ####_var0#7076#7184::Tuple{}
  ######types#7133#7181#7185::Tuple{Type{Float64}}
  ######types#7133#7181#7186::Tuple{Type{Float64}}
  ##a1#7187::Float64
  ##a2#7188::Float64
  ##div_a#7189::Float64
  ####afactor#7087#7190::Float64
  ####bfactor#7088#7191::Float64
  ########a#7077#7081#7089#7192::Tuple{}
  ########b#7078#7082#7090#7193::Tuple{}
  ########afactor#7079#7083#7091#7194::Float64
  ########bfactor#7080#7084#7092#7195::Float64
  ######_var0#7085#7093#7196::Tuple{}
  ######types#7086#7094#7197::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 36:
      NewvarNode(symbol("#s24"))
      GenSym(6) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(7) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(10)
      #s25 = GenSym(11) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 37:
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      #s24 = (Base.lt_float)(1.0,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool
      goto 1
      0: 
      #s24 = false
      1: 
      unless #s24::Bool goto 2
      goto 3
      2: 
      (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,"mode is defined only when α > 1 and β > 1.")::ANY)::UNION{}
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 38:
      $(Expr(:boundscheck, false))
      ####_var0#7076#7184 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7076#7184 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(3),:value)::Float64,2.0))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7187 = GenSym(4)
      ##a2#7188 = GenSym(5)
      ##div_a#7189 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7187::Float64,##a2#7188::Float64))
      ####afactor#7087#7190 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7188::Float64))
      ####bfactor#7088#7191 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7187::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7188::Float64,##a2#7188::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7196 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7085#7093#7196 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7189::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  #s24::Bool
  ######a#7072#7074#7182::Tuple{}
  ######b#7073#7075#7183::Tuple{}
  ####_var0#7076#7184::Tuple{}
  ######types#7133#7181#7185::Tuple{Type{Float64}}
  ######types#7133#7181#7186::Tuple{Type{Float64}}
  ##a1#7187::Float64
  ##a2#7188::Float64
  ##div_a#7189::Float64
  ####afactor#7087#7190::Float64
  ####bfactor#7088#7191::Float64
  ########a#7077#7081#7089#7192::Tuple{}
  ########b#7078#7082#7090#7193::Tuple{}
  ########afactor#7079#7083#7091#7194::Float64
  ########bfactor#7080#7084#7092#7195::Float64
  ######_var0#7085#7093#7196::Tuple{}
  ######types#7086#7094#7197::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 36:
      NewvarNode(symbol("#s24"))
      GenSym(6) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(7) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(10)
      #s25 = GenSym(11) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 37:
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      #s24 = (Base.lt_float)(1.0,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool
      goto 1
      0: 
      #s24 = false
      1: 
      unless #s24::Bool goto 2
      goto 3
      2: 
      (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,"mode is defined only when α > 1 and β > 1.")::ANY)::UNION{}
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 38:
      $(Expr(:boundscheck, false))
      ####_var0#7076#7184 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7076#7184 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(3),:value)::Float64,2.0))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7187 = GenSym(4)
      ##a2#7188 = GenSym(5)
      ##div_a#7189 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7187::Float64,##a2#7188::Float64))
      ####afactor#7087#7190 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7188::Float64))
      ####bfactor#7088#7191 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7187::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7188::Float64,##a2#7188::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7196 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7085#7093#7196 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7189::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  #s24::Bool
  ######a#7072#7074#7182::Tuple{}
  ######b#7073#7075#7183::Tuple{}
  ####_var0#7076#7184::Tuple{}
  ######types#7133#7181#7185::Tuple{Type{Float64}}
  ######types#7133#7181#7186::Tuple{Type{Float64}}
  ##a1#7187::Float64
  ##a2#7188::Float64
  ##div_a#7189::Float64
  ####afactor#7087#7190::Float64
  ####bfactor#7088#7191::Float64
  ########a#7077#7081#7089#7192::Tuple{}
  ########b#7078#7082#7090#7193::Tuple{}
  ########afactor#7079#7083#7091#7194::Float64
  ########bfactor#7080#7084#7092#7195::Float64
  ######_var0#7085#7093#7196::Tuple{}
  ######types#7086#7094#7197::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 36:
      NewvarNode(symbol("#s24"))
      GenSym(6) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(7) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(10)
      #s25 = GenSym(11) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 37:
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      #s24 = (Base.lt_float)(1.0,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool
      goto 1
      0: 
      #s24 = false
      1: 
      unless #s24::Bool goto 2
      goto 3
      2: 
      (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,"mode is defined only when α > 1 and β > 1.")::ANY)::UNION{}
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 38:
      $(Expr(:boundscheck, false))
      ####_var0#7076#7184 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7076#7184 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(3),:value)::Float64,2.0))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7187 = GenSym(4)
      ##a2#7188 = GenSym(5)
      ##div_a#7189 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7187::Float64,##a2#7188::Float64))
      ####afactor#7087#7190 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7188::Float64))
      ####bfactor#7088#7191 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7187::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7188::Float64,##a2#7188::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7196 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7085#7093#7196 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7189::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  #s24::Bool
  ######a#7072#7074#7182::Tuple{}
  ######b#7073#7075#7183::Tuple{}
  ####_var0#7076#7184::Tuple{}
  ######types#7133#7181#7185::Tuple{Type{Float64}}
  ######types#7133#7181#7186::Tuple{Type{Float64}}
  ##a1#7187::Float64
  ##a2#7188::Float64
  ##div_a#7189::Float64
  ####afactor#7087#7190::Float64
  ####bfactor#7088#7191::Float64
  ########a#7077#7081#7089#7192::Tuple{}
  ########b#7078#7082#7090#7193::Tuple{}
  ########afactor#7079#7083#7091#7194::Float64
  ########bfactor#7080#7084#7092#7195::Float64
  ######_var0#7085#7093#7196::Tuple{}
  ######types#7086#7094#7197::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 36:
      NewvarNode(symbol("#s24"))
      GenSym(6) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(7) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(10)
      #s25 = GenSym(11) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 37:
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      #s24 = (Base.lt_float)(1.0,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool
      goto 1
      0: 
      #s24 = false
      1: 
      unless #s24::Bool goto 2
      goto 3
      2: 
      (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,"mode is defined only when α > 1 and β > 1.")::ANY)::UNION{}
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 38:
      $(Expr(:boundscheck, false))
      ####_var0#7076#7184 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7076#7184 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(3),:value)::Float64,2.0))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7187 = GenSym(4)
      ##a2#7188 = GenSym(5)
      ##div_a#7189 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7187::Float64,##a2#7188::Float64))
      ####afactor#7087#7190 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7188::Float64))
      ####bfactor#7088#7191 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7187::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7188::Float64,##a2#7188::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7196 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7085#7093#7196 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7189::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 41:
      return (top(vect))((Distributions.mode)(d::Distributions.Beta{Int64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 41:
      return (top(vect))((Distributions.mode)(d::Distributions.Beta{Float64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 41:
      return (top(vect))((Distributions.mode)(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 41:
      return (top(vect))((Distributions.mode)(d::Distributions.Beta{Float64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 41:
      return (top(vect))((Distributions.mode)(d::Distributions.Beta{Float64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 41:
      return (top(vect))((Distributions.mode)(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 41:
      return (top(vect))((Distributions.mode)(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 41:
      return (top(vect))((Distributions.mode)(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 41:
      return (top(vect))((Distributions.mode)(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      return (Distributions.quantile)(d::Distributions.Beta{Int64},0.5)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(31) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(32) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(33) = (top(ccall))((top(tuple))("qbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint,StatsFuns.Rmath.Cint)::SimpleVector,0.5,0,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0,GenSym(31),0,GenSym(32),0)::Float64
      return GenSym(33)
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (Distributions.betainvcdf)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return GenSym(0)
  end::Float64

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(31) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(32) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(33) = (top(ccall))((top(tuple))("qbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint,StatsFuns.Rmath.Cint)::SimpleVector,0.5,0,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0,GenSym(31),0,GenSym(32),0)::Float64
      return GenSym(33)
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(31) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(32) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(33) = (top(ccall))((top(tuple))("qbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint,StatsFuns.Rmath.Cint)::SimpleVector,0.5,0,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0,GenSym(31),0,GenSym(32),0)::Float64
      return GenSym(33)
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (Distributions.betainvcdf)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return GenSym(0)
  end::Float64

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (Distributions.betainvcdf)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return GenSym(0)
  end::Float64

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (Distributions.betainvcdf)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return GenSym(0)
  end::Float64

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (Distributions.betainvcdf)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return GenSym(0)
  end::Float64




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Int64}
  α::Int64
  β::Int64
  #s25::Int64
  s::Int64
  ##xs#7202::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 55:
      NewvarNode(:s)
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Int64},:α)::Int64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Int64},:β)::Int64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 56:
      unless α::Int64 === β::Int64::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 57:
      return 0
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 59:
      s = (Base.box)(Base.Int,(Base.add_int)(α::Int64,β::Int64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 60:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(β::Int64,α::Int64)))))),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,s::Int64)),1.0))))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,s::Int64)),2.0)),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(α::Int64,β::Int64))))))::Float64))))
      1: 
  end::UNION{FLOAT64,INT64}

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64
  ##xs#7203::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 55:
      NewvarNode(:s)
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 56:
      unless (Base.eq_float)(α::Float64,β::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 57:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 59:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 60:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.box)(Base.Float64,(Base.sub_float)(β::Float64,α::Float64)))),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0))))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64))))::Float64))))
      1: 
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  _var0::Bool
  ######a#7072#7074#7233::Tuple{}
  ######b#7073#7075#7234::Tuple{}
  ####_var0#7076#7235::Tuple{}
  ##a1#7236::Float64
  ##a2#7237::Float64
  ######a#7077#7113#7238::Tuple{}
  ######b#7078#7114#7239::Tuple{}
  ######afactor#7079#7115#7240::Float64
  ######bfactor#7080#7116#7241::Float64
  ####_var0#7117#7242::Tuple{}
  ##sqrt_a#7243::Float64
  ##deriv#7244::Float64
  ####G#7209#7245::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7210#7246::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7211#7247::Tuple{}
  ##########x#7120#7122#7126#7212#7248::Float64
  ########_var0#7123#7127#7213#7249::Tuple{}
  ######types#7133#7134#7250::Tuple{Type{Float64}}
  ##a1#7251::Float64
  ##a2#7252::Float64
  ######a#7077#7113#7253::Tuple{}
  ######b#7078#7114#7254::Tuple{}
  ######afactor#7079#7115#7255::Float64
  ######bfactor#7080#7116#7256::Float64
  ####_var0#7117#7257::Tuple{}
  ######types#7133#7134#7258::Tuple{Type{Float64}}
  ##sqrt_a#7259::Float64
  ##deriv#7260::Float64
  ####G#7209#7261::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7210#7262::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7211#7263::Tuple{}
  ##########x#7120#7122#7126#7212#7264::Float64
  ########_var0#7123#7127#7213#7265::Tuple{}
  ######a#7204#7206#7266::Tuple{}
  ######b#7205#7207#7267::Tuple{}
  ####_var0#7208#7268::Tuple{}
  ##xs#7269::Tuple{}
  ##########tup#7119#7214#7218#7222#7270::Tuple{}
  ##########x#7120#7215#7219#7223#7271::Float64
  ########_var0#7216#7220#7224#7272::Tuple{}
  ##########types#7133#7217#7221#7225#7273::Tuple{Type{Float64}}
  ####a1#7226#7274::Float64
  ####a2#7227#7275::Float64
  ########a#7077#7113#7228#7276::Tuple{}
  ########b#7078#7114#7229#7277::Tuple{}
  ########afactor#7079#7115#7230#7278::Float64
  ########bfactor#7080#7116#7231#7279::Float64
  ######_var0#7117#7232#7280::Tuple{}
  ##a1#7281::Float64
  ##a2#7282::Float64
  ##div_a#7283::Float64
  ####afactor#7087#7284::Float64
  ####bfactor#7088#7285::Float64
  ########a#7077#7081#7089#7286::Tuple{}
  ########b#7078#7082#7090#7287::Tuple{}
  ########afactor#7079#7083#7091#7288::Float64
  ########bfactor#7080#7084#7092#7289::Float64
  ######_var0#7085#7093#7290::Tuple{}
  ######types#7086#7094#7291::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 55:
      NewvarNode(:s)
      GenSym(16) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 56:
      unless (Base.eq_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 7
      _var0 = (top(getfield))((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 8
      7: 
      _var0 = false
      8: 
      unless _var0::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 57:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 59:
      $(Expr(:boundscheck, false))
      ####_var0#7076#7235 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7076#7235 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 60:
      $(Expr(:boundscheck, false))
      ####_var0#7208#7268 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7208#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##sqrt_a#7259 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7260 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7259::Float64))
      ####G#7209#7261 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7213#7265 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7123#7127#7213#7265 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7259::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7216#7220#7224#7272 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7216#7220#7224#7272 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ####a1#7226#7274 = GenSym(10)
      ####a2#7227#7275 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7117#7232#7280 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7117#7232#7280 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7226#7274::Float64,####a2#7227#7275::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7236 = GenSym(3)
      ##a2#7237 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7242 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7117#7242 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7236::Float64,##a2#7237::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7243 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(5),:value)::Float64)::ANY)::Float64
      ##deriv#7244 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7243::Float64))
      ####G#7209#7245 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7213#7249 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7123#7127#7213#7249 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7243::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7251 = GenSym(7)
      ##a2#7252 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7257 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7117#7257 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7251::Float64,##a2#7252::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(14) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7281 = GenSym(14)
      ##a2#7282 = GenSym(15)
      ##div_a#7283 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7281::Float64,##a2#7282::Float64))
      ####afactor#7087#7284 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7282::Float64))
      ####bfactor#7088#7285 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7281::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7282::Float64,##a2#7282::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7290 = (top(tuple))()::Tuple{}
      goto 27
      ######_var0#7085#7093#7290 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7283::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64
  ##xs#7203::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 55:
      NewvarNode(:s)
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 56:
      unless (Base.eq_float)(α::Float64,β::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 57:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 59:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 60:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.box)(Base.Float64,(Base.sub_float)(β::Float64,α::Float64)))),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0))))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64))))::Float64))))
      1: 
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64
  ##xs#7203::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 55:
      NewvarNode(:s)
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 56:
      unless (Base.eq_float)(α::Float64,β::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 57:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 59:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 60:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.box)(Base.Float64,(Base.sub_float)(β::Float64,α::Float64)))),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0))))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64))))::Float64))))
      1: 
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  _var0::Bool
  ######a#7072#7074#7233::Tuple{}
  ######b#7073#7075#7234::Tuple{}
  ####_var0#7076#7235::Tuple{}
  ##a1#7236::Float64
  ##a2#7237::Float64
  ######a#7077#7113#7238::Tuple{}
  ######b#7078#7114#7239::Tuple{}
  ######afactor#7079#7115#7240::Float64
  ######bfactor#7080#7116#7241::Float64
  ####_var0#7117#7242::Tuple{}
  ##sqrt_a#7243::Float64
  ##deriv#7244::Float64
  ####G#7209#7245::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7210#7246::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7211#7247::Tuple{}
  ##########x#7120#7122#7126#7212#7248::Float64
  ########_var0#7123#7127#7213#7249::Tuple{}
  ######types#7133#7134#7250::Tuple{Type{Float64}}
  ##a1#7251::Float64
  ##a2#7252::Float64
  ######a#7077#7113#7253::Tuple{}
  ######b#7078#7114#7254::Tuple{}
  ######afactor#7079#7115#7255::Float64
  ######bfactor#7080#7116#7256::Float64
  ####_var0#7117#7257::Tuple{}
  ######types#7133#7134#7258::Tuple{Type{Float64}}
  ##sqrt_a#7259::Float64
  ##deriv#7260::Float64
  ####G#7209#7261::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7210#7262::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7211#7263::Tuple{}
  ##########x#7120#7122#7126#7212#7264::Float64
  ########_var0#7123#7127#7213#7265::Tuple{}
  ######a#7204#7206#7266::Tuple{}
  ######b#7205#7207#7267::Tuple{}
  ####_var0#7208#7268::Tuple{}
  ##xs#7269::Tuple{}
  ##########tup#7119#7214#7218#7222#7270::Tuple{}
  ##########x#7120#7215#7219#7223#7271::Float64
  ########_var0#7216#7220#7224#7272::Tuple{}
  ##########types#7133#7217#7221#7225#7273::Tuple{Type{Float64}}
  ####a1#7226#7274::Float64
  ####a2#7227#7275::Float64
  ########a#7077#7113#7228#7276::Tuple{}
  ########b#7078#7114#7229#7277::Tuple{}
  ########afactor#7079#7115#7230#7278::Float64
  ########bfactor#7080#7116#7231#7279::Float64
  ######_var0#7117#7232#7280::Tuple{}
  ##a1#7281::Float64
  ##a2#7282::Float64
  ##div_a#7283::Float64
  ####afactor#7087#7284::Float64
  ####bfactor#7088#7285::Float64
  ########a#7077#7081#7089#7286::Tuple{}
  ########b#7078#7082#7090#7287::Tuple{}
  ########afactor#7079#7083#7091#7288::Float64
  ########bfactor#7080#7084#7092#7289::Float64
  ######_var0#7085#7093#7290::Tuple{}
  ######types#7086#7094#7291::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 55:
      NewvarNode(:s)
      GenSym(16) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 56:
      unless (Base.eq_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 7
      _var0 = (top(getfield))((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 8
      7: 
      _var0 = false
      8: 
      unless _var0::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 57:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 59:
      $(Expr(:boundscheck, false))
      ####_var0#7076#7235 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7076#7235 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 60:
      $(Expr(:boundscheck, false))
      ####_var0#7208#7268 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7208#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##sqrt_a#7259 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7260 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7259::Float64))
      ####G#7209#7261 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7213#7265 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7123#7127#7213#7265 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7259::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7216#7220#7224#7272 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7216#7220#7224#7272 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ####a1#7226#7274 = GenSym(10)
      ####a2#7227#7275 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7117#7232#7280 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7117#7232#7280 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7226#7274::Float64,####a2#7227#7275::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7236 = GenSym(3)
      ##a2#7237 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7242 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7117#7242 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7236::Float64,##a2#7237::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7243 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(5),:value)::Float64)::ANY)::Float64
      ##deriv#7244 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7243::Float64))
      ####G#7209#7245 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7213#7249 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7123#7127#7213#7249 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7243::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7251 = GenSym(7)
      ##a2#7252 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7257 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7117#7257 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7251::Float64,##a2#7252::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(14) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7281 = GenSym(14)
      ##a2#7282 = GenSym(15)
      ##div_a#7283 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7281::Float64,##a2#7282::Float64))
      ####afactor#7087#7284 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7282::Float64))
      ####bfactor#7088#7285 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7281::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7282::Float64,##a2#7282::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7290 = (top(tuple))()::Tuple{}
      goto 27
      ######_var0#7085#7093#7290 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7283::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  _var0::Bool
  ######a#7072#7074#7233::Tuple{}
  ######b#7073#7075#7234::Tuple{}
  ####_var0#7076#7235::Tuple{}
  ##a1#7236::Float64
  ##a2#7237::Float64
  ######a#7077#7113#7238::Tuple{}
  ######b#7078#7114#7239::Tuple{}
  ######afactor#7079#7115#7240::Float64
  ######bfactor#7080#7116#7241::Float64
  ####_var0#7117#7242::Tuple{}
  ##sqrt_a#7243::Float64
  ##deriv#7244::Float64
  ####G#7209#7245::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7210#7246::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7211#7247::Tuple{}
  ##########x#7120#7122#7126#7212#7248::Float64
  ########_var0#7123#7127#7213#7249::Tuple{}
  ######types#7133#7134#7250::Tuple{Type{Float64}}
  ##a1#7251::Float64
  ##a2#7252::Float64
  ######a#7077#7113#7253::Tuple{}
  ######b#7078#7114#7254::Tuple{}
  ######afactor#7079#7115#7255::Float64
  ######bfactor#7080#7116#7256::Float64
  ####_var0#7117#7257::Tuple{}
  ######types#7133#7134#7258::Tuple{Type{Float64}}
  ##sqrt_a#7259::Float64
  ##deriv#7260::Float64
  ####G#7209#7261::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7210#7262::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7211#7263::Tuple{}
  ##########x#7120#7122#7126#7212#7264::Float64
  ########_var0#7123#7127#7213#7265::Tuple{}
  ######a#7204#7206#7266::Tuple{}
  ######b#7205#7207#7267::Tuple{}
  ####_var0#7208#7268::Tuple{}
  ##xs#7269::Tuple{}
  ##########tup#7119#7214#7218#7222#7270::Tuple{}
  ##########x#7120#7215#7219#7223#7271::Float64
  ########_var0#7216#7220#7224#7272::Tuple{}
  ##########types#7133#7217#7221#7225#7273::Tuple{Type{Float64}}
  ####a1#7226#7274::Float64
  ####a2#7227#7275::Float64
  ########a#7077#7113#7228#7276::Tuple{}
  ########b#7078#7114#7229#7277::Tuple{}
  ########afactor#7079#7115#7230#7278::Float64
  ########bfactor#7080#7116#7231#7279::Float64
  ######_var0#7117#7232#7280::Tuple{}
  ##a1#7281::Float64
  ##a2#7282::Float64
  ##div_a#7283::Float64
  ####afactor#7087#7284::Float64
  ####bfactor#7088#7285::Float64
  ########a#7077#7081#7089#7286::Tuple{}
  ########b#7078#7082#7090#7287::Tuple{}
  ########afactor#7079#7083#7091#7288::Float64
  ########bfactor#7080#7084#7092#7289::Float64
  ######_var0#7085#7093#7290::Tuple{}
  ######types#7086#7094#7291::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 55:
      NewvarNode(:s)
      GenSym(16) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 56:
      unless (Base.eq_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 7
      _var0 = (top(getfield))((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 8
      7: 
      _var0 = false
      8: 
      unless _var0::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 57:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 59:
      $(Expr(:boundscheck, false))
      ####_var0#7076#7235 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7076#7235 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 60:
      $(Expr(:boundscheck, false))
      ####_var0#7208#7268 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7208#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##sqrt_a#7259 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7260 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7259::Float64))
      ####G#7209#7261 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7213#7265 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7123#7127#7213#7265 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7259::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7216#7220#7224#7272 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7216#7220#7224#7272 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ####a1#7226#7274 = GenSym(10)
      ####a2#7227#7275 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7117#7232#7280 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7117#7232#7280 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7226#7274::Float64,####a2#7227#7275::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7236 = GenSym(3)
      ##a2#7237 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7242 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7117#7242 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7236::Float64,##a2#7237::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7243 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(5),:value)::Float64)::ANY)::Float64
      ##deriv#7244 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7243::Float64))
      ####G#7209#7245 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7213#7249 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7123#7127#7213#7249 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7243::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7251 = GenSym(7)
      ##a2#7252 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7257 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7117#7257 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7251::Float64,##a2#7252::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(14) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7281 = GenSym(14)
      ##a2#7282 = GenSym(15)
      ##div_a#7283 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7281::Float64,##a2#7282::Float64))
      ####afactor#7087#7284 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7282::Float64))
      ####bfactor#7088#7285 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7281::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7282::Float64,##a2#7282::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7290 = (top(tuple))()::Tuple{}
      goto 27
      ######_var0#7085#7093#7290 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7283::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  _var0::Bool
  ######a#7072#7074#7233::Tuple{}
  ######b#7073#7075#7234::Tuple{}
  ####_var0#7076#7235::Tuple{}
  ##a1#7236::Float64
  ##a2#7237::Float64
  ######a#7077#7113#7238::Tuple{}
  ######b#7078#7114#7239::Tuple{}
  ######afactor#7079#7115#7240::Float64
  ######bfactor#7080#7116#7241::Float64
  ####_var0#7117#7242::Tuple{}
  ##sqrt_a#7243::Float64
  ##deriv#7244::Float64
  ####G#7209#7245::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7210#7246::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7211#7247::Tuple{}
  ##########x#7120#7122#7126#7212#7248::Float64
  ########_var0#7123#7127#7213#7249::Tuple{}
  ######types#7133#7134#7250::Tuple{Type{Float64}}
  ##a1#7251::Float64
  ##a2#7252::Float64
  ######a#7077#7113#7253::Tuple{}
  ######b#7078#7114#7254::Tuple{}
  ######afactor#7079#7115#7255::Float64
  ######bfactor#7080#7116#7256::Float64
  ####_var0#7117#7257::Tuple{}
  ######types#7133#7134#7258::Tuple{Type{Float64}}
  ##sqrt_a#7259::Float64
  ##deriv#7260::Float64
  ####G#7209#7261::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7210#7262::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7211#7263::Tuple{}
  ##########x#7120#7122#7126#7212#7264::Float64
  ########_var0#7123#7127#7213#7265::Tuple{}
  ######a#7204#7206#7266::Tuple{}
  ######b#7205#7207#7267::Tuple{}
  ####_var0#7208#7268::Tuple{}
  ##xs#7269::Tuple{}
  ##########tup#7119#7214#7218#7222#7270::Tuple{}
  ##########x#7120#7215#7219#7223#7271::Float64
  ########_var0#7216#7220#7224#7272::Tuple{}
  ##########types#7133#7217#7221#7225#7273::Tuple{Type{Float64}}
  ####a1#7226#7274::Float64
  ####a2#7227#7275::Float64
  ########a#7077#7113#7228#7276::Tuple{}
  ########b#7078#7114#7229#7277::Tuple{}
  ########afactor#7079#7115#7230#7278::Float64
  ########bfactor#7080#7116#7231#7279::Float64
  ######_var0#7117#7232#7280::Tuple{}
  ##a1#7281::Float64
  ##a2#7282::Float64
  ##div_a#7283::Float64
  ####afactor#7087#7284::Float64
  ####bfactor#7088#7285::Float64
  ########a#7077#7081#7089#7286::Tuple{}
  ########b#7078#7082#7090#7287::Tuple{}
  ########afactor#7079#7083#7091#7288::Float64
  ########bfactor#7080#7084#7092#7289::Float64
  ######_var0#7085#7093#7290::Tuple{}
  ######types#7086#7094#7291::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 55:
      NewvarNode(:s)
      GenSym(16) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 56:
      unless (Base.eq_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 7
      _var0 = (top(getfield))((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 8
      7: 
      _var0 = false
      8: 
      unless _var0::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 57:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 59:
      $(Expr(:boundscheck, false))
      ####_var0#7076#7235 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7076#7235 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 60:
      $(Expr(:boundscheck, false))
      ####_var0#7208#7268 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7208#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##sqrt_a#7259 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7260 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7259::Float64))
      ####G#7209#7261 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7213#7265 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7123#7127#7213#7265 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7259::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7216#7220#7224#7272 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7216#7220#7224#7272 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ####a1#7226#7274 = GenSym(10)
      ####a2#7227#7275 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7117#7232#7280 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7117#7232#7280 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7226#7274::Float64,####a2#7227#7275::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7236 = GenSym(3)
      ##a2#7237 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7242 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7117#7242 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7236::Float64,##a2#7237::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7243 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(5),:value)::Float64)::ANY)::Float64
      ##deriv#7244 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7243::Float64))
      ####G#7209#7245 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7213#7249 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7123#7127#7213#7249 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7243::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7251 = GenSym(7)
      ##a2#7252 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7257 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7117#7257 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7251::Float64,##a2#7252::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(14) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7281 = GenSym(14)
      ##a2#7282 = GenSym(15)
      ##div_a#7283 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7281::Float64,##a2#7282::Float64))
      ####afactor#7087#7284 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7282::Float64))
      ####bfactor#7088#7285 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7281::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7282::Float64,##a2#7282::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7290 = (top(tuple))()::Tuple{}
      goto 27
      ######_var0#7085#7093#7290 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7283::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  _var0::Bool
  ######a#7072#7074#7233::Tuple{}
  ######b#7073#7075#7234::Tuple{}
  ####_var0#7076#7235::Tuple{}
  ##a1#7236::Float64
  ##a2#7237::Float64
  ######a#7077#7113#7238::Tuple{}
  ######b#7078#7114#7239::Tuple{}
  ######afactor#7079#7115#7240::Float64
  ######bfactor#7080#7116#7241::Float64
  ####_var0#7117#7242::Tuple{}
  ##sqrt_a#7243::Float64
  ##deriv#7244::Float64
  ####G#7209#7245::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7210#7246::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7211#7247::Tuple{}
  ##########x#7120#7122#7126#7212#7248::Float64
  ########_var0#7123#7127#7213#7249::Tuple{}
  ######types#7133#7134#7250::Tuple{Type{Float64}}
  ##a1#7251::Float64
  ##a2#7252::Float64
  ######a#7077#7113#7253::Tuple{}
  ######b#7078#7114#7254::Tuple{}
  ######afactor#7079#7115#7255::Float64
  ######bfactor#7080#7116#7256::Float64
  ####_var0#7117#7257::Tuple{}
  ######types#7133#7134#7258::Tuple{Type{Float64}}
  ##sqrt_a#7259::Float64
  ##deriv#7260::Float64
  ####G#7209#7261::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7210#7262::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7211#7263::Tuple{}
  ##########x#7120#7122#7126#7212#7264::Float64
  ########_var0#7123#7127#7213#7265::Tuple{}
  ######a#7204#7206#7266::Tuple{}
  ######b#7205#7207#7267::Tuple{}
  ####_var0#7208#7268::Tuple{}
  ##xs#7269::Tuple{}
  ##########tup#7119#7214#7218#7222#7270::Tuple{}
  ##########x#7120#7215#7219#7223#7271::Float64
  ########_var0#7216#7220#7224#7272::Tuple{}
  ##########types#7133#7217#7221#7225#7273::Tuple{Type{Float64}}
  ####a1#7226#7274::Float64
  ####a2#7227#7275::Float64
  ########a#7077#7113#7228#7276::Tuple{}
  ########b#7078#7114#7229#7277::Tuple{}
  ########afactor#7079#7115#7230#7278::Float64
  ########bfactor#7080#7116#7231#7279::Float64
  ######_var0#7117#7232#7280::Tuple{}
  ##a1#7281::Float64
  ##a2#7282::Float64
  ##div_a#7283::Float64
  ####afactor#7087#7284::Float64
  ####bfactor#7088#7285::Float64
  ########a#7077#7081#7089#7286::Tuple{}
  ########b#7078#7082#7090#7287::Tuple{}
  ########afactor#7079#7083#7091#7288::Float64
  ########bfactor#7080#7084#7092#7289::Float64
  ######_var0#7085#7093#7290::Tuple{}
  ######types#7086#7094#7291::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 55:
      NewvarNode(:s)
      GenSym(16) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 56:
      unless (Base.eq_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 7
      _var0 = (top(getfield))((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 8
      7: 
      _var0 = false
      8: 
      unless _var0::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 57:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 59:
      $(Expr(:boundscheck, false))
      ####_var0#7076#7235 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7076#7235 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 60:
      $(Expr(:boundscheck, false))
      ####_var0#7208#7268 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7208#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##sqrt_a#7259 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7260 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7259::Float64))
      ####G#7209#7261 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7213#7265 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7123#7127#7213#7265 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7259::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7216#7220#7224#7272 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7216#7220#7224#7272 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ####a1#7226#7274 = GenSym(10)
      ####a2#7227#7275 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7117#7232#7280 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7117#7232#7280 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7226#7274::Float64,####a2#7227#7275::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7236 = GenSym(3)
      ##a2#7237 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7242 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7117#7242 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7236::Float64,##a2#7237::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7243 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(5),:value)::Float64)::ANY)::Float64
      ##deriv#7244 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7243::Float64))
      ####G#7209#7245 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7213#7249 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7123#7127#7213#7249 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7243::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7251 = GenSym(7)
      ##a2#7252 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7257 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7117#7257 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7251::Float64,##a2#7252::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(14) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7281 = GenSym(14)
      ##a2#7282 = GenSym(15)
      ##div_a#7283 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7281::Float64,##a2#7282::Float64))
      ####afactor#7087#7284 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7282::Float64))
      ####bfactor#7088#7285 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7281::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7282::Float64,##a2#7282::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7290 = (top(tuple))()::Tuple{}
      goto 27
      ######_var0#7085#7093#7290 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7283::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Int64}
  α::Int64
  β::Int64
  #s25::Int64
  s::Int64
  p::Int64
  ##xs#7292::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 65:
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Int64},:α)::Int64
      GenSym(5) = (top(getfield))(d::Distributions.Beta{Int64},:β)::Int64
      #s25 = 1
      GenSym(6) = GenSym(4)
      GenSym(7) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(6)
      #s25 = GenSym(7)
      GenSym(8) = GenSym(5)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(8)
      #s25 = GenSym(9) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 66:
      s = (Base.box)(Base.Int,(Base.add_int)(α::Int64,β::Int64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 67:
      p = (Base.box)(Int64,(Base.mul_int)(α::Int64,β::Int64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 68:
      GenSym(3) = (Base.box)(Int64,(Base.sub_int)(α::Int64,β::Int64))
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(6.0,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(GenSym(3),GenSym(3))))),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,s::Int64)),1.0)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,p::Int64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,s::Int64)),2.0)))))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,p::Int64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,s::Int64)),2.0)))),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,s::Int64)),3.0))))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64
  p::Float64
  ##xs#7293::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 65:
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(6) = GenSym(4)
      GenSym(7) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(6)
      #s25 = GenSym(7)
      GenSym(8) = GenSym(5)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(8)
      #s25 = GenSym(9) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 66:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 67:
      p = (Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 68:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(α::Float64,β::Float64))
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(6.0,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),GenSym(3))),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0)))),(Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)))))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)))),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,3.0))))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7072#7074#7308::Tuple{}
  ######b#7073#7075#7309::Tuple{}
  ####_var0#7076#7310::Tuple{}
  ##a1#7311::Float64
  ##a2#7312::Float64
  ######a#7077#7113#7313::Tuple{}
  ######b#7078#7114#7314::Tuple{}
  ######afactor#7079#7115#7315::Float64
  ######bfactor#7080#7116#7316::Float64
  ####_var0#7117#7317::Tuple{}
  ######types#7133#7134#7318::Tuple{Type{Float64}}
  ######types#7133#7134#7319::Tuple{Type{Float64}}
  ##xs#7320::Tuple{}
  ####a1#7294#7321::Float64
  ####a2#7295#7322::Float64
  ########a#7077#7113#7296#7323::Tuple{}
  ########b#7078#7114#7297#7324::Tuple{}
  ########afactor#7079#7115#7298#7325::Float64
  ########bfactor#7080#7116#7299#7326::Float64
  ######_var0#7117#7300#7327::Tuple{}
  ####a1#7301#7328::Float64
  ####a2#7302#7329::Float64
  ########a#7077#7113#7303#7330::Tuple{}
  ########b#7078#7114#7304#7331::Tuple{}
  ########afactor#7079#7115#7305#7332::Float64
  ########bfactor#7080#7116#7306#7333::Float64
  ######_var0#7117#7307#7334::Tuple{}
  ######types#7133#7134#7335::Tuple{Type{Float64}}
  ##a1#7336::Float64
  ##a2#7337::Float64
  ######a#7077#7113#7338::Tuple{}
  ######b#7078#7114#7339::Tuple{}
  ######afactor#7079#7115#7340::Float64
  ######bfactor#7080#7116#7341::Float64
  ####_var0#7117#7342::Tuple{}
  ######types#7133#7134#7343::Tuple{Type{Float64}}
  ######a#7204#7206#7344::Tuple{}
  ######b#7205#7207#7345::Tuple{}
  ####_var0#7208#7346::Tuple{}
  ##a#7347::Float64
  ####G#7128#7348::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7129#7349::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7130#7350::Tuple{}
  ##########x#7120#7122#7126#7131#7351::Float64
  ########_var0#7123#7127#7132#7352::Tuple{}
  ##a1#7353::Float64
  ##a2#7354::Float64
  ######a#7077#7113#7355::Tuple{}
  ######b#7078#7114#7356::Tuple{}
  ######afactor#7079#7115#7357::Float64
  ######bfactor#7080#7116#7358::Float64
  ####_var0#7117#7359::Tuple{}
  ######a#7204#7206#7360::Tuple{}
  ######b#7205#7207#7361::Tuple{}
  ####_var0#7208#7362::Tuple{}
  ########tup#7119#7214#7218#7363::Tuple{}
  ########x#7120#7215#7219#7364::Float64
  ######_var0#7216#7220#7365::Tuple{}
  ########types#7133#7217#7221#7366::Tuple{Type{Float64}}
  ##a1#7367::Float64
  ##a2#7368::Float64
  ##div_a#7369::Float64
  ####afactor#7087#7370::Float64
  ####bfactor#7088#7371::Float64
  ########a#7077#7081#7089#7372::Tuple{}
  ########b#7078#7082#7090#7373::Tuple{}
  ########afactor#7079#7083#7091#7374::Float64
  ########bfactor#7080#7084#7092#7375::Float64
  ######_var0#7085#7093#7376::Tuple{}
  ######types#7086#7094#7377::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 65:
      GenSym(20) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(22) = GenSym(20)
      GenSym(23) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(22)
      #s25 = GenSym(23)
      GenSym(24) = GenSym(21)
      GenSym(25) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(24)
      #s25 = GenSym(25) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 66:
      $(Expr(:boundscheck, false))
      ####_var0#7076#7310 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7076#7310 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 67:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7311 = GenSym(3)
      ##a2#7312 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7317 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7117#7317 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      p = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7311::Float64,##a2#7312::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 68:
      $(Expr(:boundscheck, false))
      ####_var0#7208#7346 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7208#7346 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7347 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####G#7128#7348 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7132#7352 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7123#7127#7132#7352 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7347::Float64,##a#7347::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7353 = GenSym(13)
      ##a2#7354 = GenSym(14)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7359 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7117#7359 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7353::Float64,##a2#7354::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7336 = GenSym(10)
      ##a2#7337 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7342 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7117#7342 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7336::Float64,##a2#7337::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7208#7362 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7208#7362 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7216#7220#7365 = (top(tuple))()::Tuple{}
      goto 26
      ######_var0#7216#7220#7365 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(5) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7294#7321 = GenSym(5)
      ####a2#7295#7322 = GenSym(6)
      $(Expr(:boundscheck, false))
      ######_var0#7117#7300#7327 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7117#7300#7327 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7294#7321::Float64,####a2#7295#7322::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7301#7328 = GenSym(8)
      ####a2#7302#7329 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7117#7307#7334 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7117#7307#7334 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(17) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7301#7328::Float64,####a2#7302#7329::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(15),:value)::Float64,(top(getfield))(GenSym(16),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(getfield))(GenSym(17),:value)::Float64
      ##a1#7367 = GenSym(18)
      ##a2#7368 = GenSym(19)
      ##div_a#7369 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7367::Float64,##a2#7368::Float64))
      ####afactor#7087#7370 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7368::Float64))
      ####bfactor#7088#7371 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7367::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7368::Float64,##a2#7368::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7376 = (top(tuple))()::Tuple{}
      goto 28
      ######_var0#7085#7093#7376 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7369::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64
  p::Float64
  ##xs#7293::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 65:
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(6) = GenSym(4)
      GenSym(7) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(6)
      #s25 = GenSym(7)
      GenSym(8) = GenSym(5)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(8)
      #s25 = GenSym(9) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 66:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 67:
      p = (Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 68:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(α::Float64,β::Float64))
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(6.0,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),GenSym(3))),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0)))),(Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)))))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)))),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,3.0))))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64
  p::Float64
  ##xs#7293::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 65:
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(6) = GenSym(4)
      GenSym(7) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(6)
      #s25 = GenSym(7)
      GenSym(8) = GenSym(5)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(8)
      #s25 = GenSym(9) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 66:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 67:
      p = (Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 68:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(α::Float64,β::Float64))
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(6.0,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),GenSym(3))),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0)))),(Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)))))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)))),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,3.0))))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7072#7074#7308::Tuple{}
  ######b#7073#7075#7309::Tuple{}
  ####_var0#7076#7310::Tuple{}
  ##a1#7311::Float64
  ##a2#7312::Float64
  ######a#7077#7113#7313::Tuple{}
  ######b#7078#7114#7314::Tuple{}
  ######afactor#7079#7115#7315::Float64
  ######bfactor#7080#7116#7316::Float64
  ####_var0#7117#7317::Tuple{}
  ######types#7133#7134#7318::Tuple{Type{Float64}}
  ######types#7133#7134#7319::Tuple{Type{Float64}}
  ##xs#7320::Tuple{}
  ####a1#7294#7321::Float64
  ####a2#7295#7322::Float64
  ########a#7077#7113#7296#7323::Tuple{}
  ########b#7078#7114#7297#7324::Tuple{}
  ########afactor#7079#7115#7298#7325::Float64
  ########bfactor#7080#7116#7299#7326::Float64
  ######_var0#7117#7300#7327::Tuple{}
  ####a1#7301#7328::Float64
  ####a2#7302#7329::Float64
  ########a#7077#7113#7303#7330::Tuple{}
  ########b#7078#7114#7304#7331::Tuple{}
  ########afactor#7079#7115#7305#7332::Float64
  ########bfactor#7080#7116#7306#7333::Float64
  ######_var0#7117#7307#7334::Tuple{}
  ######types#7133#7134#7335::Tuple{Type{Float64}}
  ##a1#7336::Float64
  ##a2#7337::Float64
  ######a#7077#7113#7338::Tuple{}
  ######b#7078#7114#7339::Tuple{}
  ######afactor#7079#7115#7340::Float64
  ######bfactor#7080#7116#7341::Float64
  ####_var0#7117#7342::Tuple{}
  ######types#7133#7134#7343::Tuple{Type{Float64}}
  ######a#7204#7206#7344::Tuple{}
  ######b#7205#7207#7345::Tuple{}
  ####_var0#7208#7346::Tuple{}
  ##a#7347::Float64
  ####G#7128#7348::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7129#7349::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7130#7350::Tuple{}
  ##########x#7120#7122#7126#7131#7351::Float64
  ########_var0#7123#7127#7132#7352::Tuple{}
  ##a1#7353::Float64
  ##a2#7354::Float64
  ######a#7077#7113#7355::Tuple{}
  ######b#7078#7114#7356::Tuple{}
  ######afactor#7079#7115#7357::Float64
  ######bfactor#7080#7116#7358::Float64
  ####_var0#7117#7359::Tuple{}
  ######a#7204#7206#7360::Tuple{}
  ######b#7205#7207#7361::Tuple{}
  ####_var0#7208#7362::Tuple{}
  ########tup#7119#7214#7218#7363::Tuple{}
  ########x#7120#7215#7219#7364::Float64
  ######_var0#7216#7220#7365::Tuple{}
  ########types#7133#7217#7221#7366::Tuple{Type{Float64}}
  ##a1#7367::Float64
  ##a2#7368::Float64
  ##div_a#7369::Float64
  ####afactor#7087#7370::Float64
  ####bfactor#7088#7371::Float64
  ########a#7077#7081#7089#7372::Tuple{}
  ########b#7078#7082#7090#7373::Tuple{}
  ########afactor#7079#7083#7091#7374::Float64
  ########bfactor#7080#7084#7092#7375::Float64
  ######_var0#7085#7093#7376::Tuple{}
  ######types#7086#7094#7377::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 65:
      GenSym(20) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(22) = GenSym(20)
      GenSym(23) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(22)
      #s25 = GenSym(23)
      GenSym(24) = GenSym(21)
      GenSym(25) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(24)
      #s25 = GenSym(25) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 66:
      $(Expr(:boundscheck, false))
      ####_var0#7076#7310 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7076#7310 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 67:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7311 = GenSym(3)
      ##a2#7312 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7317 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7117#7317 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      p = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7311::Float64,##a2#7312::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 68:
      $(Expr(:boundscheck, false))
      ####_var0#7208#7346 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7208#7346 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7347 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####G#7128#7348 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7132#7352 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7123#7127#7132#7352 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7347::Float64,##a#7347::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7353 = GenSym(13)
      ##a2#7354 = GenSym(14)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7359 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7117#7359 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7353::Float64,##a2#7354::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7336 = GenSym(10)
      ##a2#7337 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7342 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7117#7342 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7336::Float64,##a2#7337::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7208#7362 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7208#7362 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7216#7220#7365 = (top(tuple))()::Tuple{}
      goto 26
      ######_var0#7216#7220#7365 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(5) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7294#7321 = GenSym(5)
      ####a2#7295#7322 = GenSym(6)
      $(Expr(:boundscheck, false))
      ######_var0#7117#7300#7327 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7117#7300#7327 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7294#7321::Float64,####a2#7295#7322::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7301#7328 = GenSym(8)
      ####a2#7302#7329 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7117#7307#7334 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7117#7307#7334 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(17) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7301#7328::Float64,####a2#7302#7329::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(15),:value)::Float64,(top(getfield))(GenSym(16),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(getfield))(GenSym(17),:value)::Float64
      ##a1#7367 = GenSym(18)
      ##a2#7368 = GenSym(19)
      ##div_a#7369 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7367::Float64,##a2#7368::Float64))
      ####afactor#7087#7370 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7368::Float64))
      ####bfactor#7088#7371 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7367::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7368::Float64,##a2#7368::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7376 = (top(tuple))()::Tuple{}
      goto 28
      ######_var0#7085#7093#7376 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7369::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7072#7074#7308::Tuple{}
  ######b#7073#7075#7309::Tuple{}
  ####_var0#7076#7310::Tuple{}
  ##a1#7311::Float64
  ##a2#7312::Float64
  ######a#7077#7113#7313::Tuple{}
  ######b#7078#7114#7314::Tuple{}
  ######afactor#7079#7115#7315::Float64
  ######bfactor#7080#7116#7316::Float64
  ####_var0#7117#7317::Tuple{}
  ######types#7133#7134#7318::Tuple{Type{Float64}}
  ######types#7133#7134#7319::Tuple{Type{Float64}}
  ##xs#7320::Tuple{}
  ####a1#7294#7321::Float64
  ####a2#7295#7322::Float64
  ########a#7077#7113#7296#7323::Tuple{}
  ########b#7078#7114#7297#7324::Tuple{}
  ########afactor#7079#7115#7298#7325::Float64
  ########bfactor#7080#7116#7299#7326::Float64
  ######_var0#7117#7300#7327::Tuple{}
  ####a1#7301#7328::Float64
  ####a2#7302#7329::Float64
  ########a#7077#7113#7303#7330::Tuple{}
  ########b#7078#7114#7304#7331::Tuple{}
  ########afactor#7079#7115#7305#7332::Float64
  ########bfactor#7080#7116#7306#7333::Float64
  ######_var0#7117#7307#7334::Tuple{}
  ######types#7133#7134#7335::Tuple{Type{Float64}}
  ##a1#7336::Float64
  ##a2#7337::Float64
  ######a#7077#7113#7338::Tuple{}
  ######b#7078#7114#7339::Tuple{}
  ######afactor#7079#7115#7340::Float64
  ######bfactor#7080#7116#7341::Float64
  ####_var0#7117#7342::Tuple{}
  ######types#7133#7134#7343::Tuple{Type{Float64}}
  ######a#7204#7206#7344::Tuple{}
  ######b#7205#7207#7345::Tuple{}
  ####_var0#7208#7346::Tuple{}
  ##a#7347::Float64
  ####G#7128#7348::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7129#7349::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7130#7350::Tuple{}
  ##########x#7120#7122#7126#7131#7351::Float64
  ########_var0#7123#7127#7132#7352::Tuple{}
  ##a1#7353::Float64
  ##a2#7354::Float64
  ######a#7077#7113#7355::Tuple{}
  ######b#7078#7114#7356::Tuple{}
  ######afactor#7079#7115#7357::Float64
  ######bfactor#7080#7116#7358::Float64
  ####_var0#7117#7359::Tuple{}
  ######a#7204#7206#7360::Tuple{}
  ######b#7205#7207#7361::Tuple{}
  ####_var0#7208#7362::Tuple{}
  ########tup#7119#7214#7218#7363::Tuple{}
  ########x#7120#7215#7219#7364::Float64
  ######_var0#7216#7220#7365::Tuple{}
  ########types#7133#7217#7221#7366::Tuple{Type{Float64}}
  ##a1#7367::Float64
  ##a2#7368::Float64
  ##div_a#7369::Float64
  ####afactor#7087#7370::Float64
  ####bfactor#7088#7371::Float64
  ########a#7077#7081#7089#7372::Tuple{}
  ########b#7078#7082#7090#7373::Tuple{}
  ########afactor#7079#7083#7091#7374::Float64
  ########bfactor#7080#7084#7092#7375::Float64
  ######_var0#7085#7093#7376::Tuple{}
  ######types#7086#7094#7377::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 65:
      GenSym(20) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(22) = GenSym(20)
      GenSym(23) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(22)
      #s25 = GenSym(23)
      GenSym(24) = GenSym(21)
      GenSym(25) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(24)
      #s25 = GenSym(25) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 66:
      $(Expr(:boundscheck, false))
      ####_var0#7076#7310 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7076#7310 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 67:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7311 = GenSym(3)
      ##a2#7312 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7317 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7117#7317 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      p = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7311::Float64,##a2#7312::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 68:
      $(Expr(:boundscheck, false))
      ####_var0#7208#7346 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7208#7346 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7347 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####G#7128#7348 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7132#7352 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7123#7127#7132#7352 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7347::Float64,##a#7347::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7353 = GenSym(13)
      ##a2#7354 = GenSym(14)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7359 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7117#7359 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7353::Float64,##a2#7354::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7336 = GenSym(10)
      ##a2#7337 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7342 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7117#7342 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7336::Float64,##a2#7337::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7208#7362 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7208#7362 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7216#7220#7365 = (top(tuple))()::Tuple{}
      goto 26
      ######_var0#7216#7220#7365 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(5) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7294#7321 = GenSym(5)
      ####a2#7295#7322 = GenSym(6)
      $(Expr(:boundscheck, false))
      ######_var0#7117#7300#7327 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7117#7300#7327 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7294#7321::Float64,####a2#7295#7322::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7301#7328 = GenSym(8)
      ####a2#7302#7329 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7117#7307#7334 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7117#7307#7334 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(17) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7301#7328::Float64,####a2#7302#7329::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(15),:value)::Float64,(top(getfield))(GenSym(16),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(getfield))(GenSym(17),:value)::Float64
      ##a1#7367 = GenSym(18)
      ##a2#7368 = GenSym(19)
      ##div_a#7369 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7367::Float64,##a2#7368::Float64))
      ####afactor#7087#7370 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7368::Float64))
      ####bfactor#7088#7371 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7367::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7368::Float64,##a2#7368::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7376 = (top(tuple))()::Tuple{}
      goto 28
      ######_var0#7085#7093#7376 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7369::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7072#7074#7308::Tuple{}
  ######b#7073#7075#7309::Tuple{}
  ####_var0#7076#7310::Tuple{}
  ##a1#7311::Float64
  ##a2#7312::Float64
  ######a#7077#7113#7313::Tuple{}
  ######b#7078#7114#7314::Tuple{}
  ######afactor#7079#7115#7315::Float64
  ######bfactor#7080#7116#7316::Float64
  ####_var0#7117#7317::Tuple{}
  ######types#7133#7134#7318::Tuple{Type{Float64}}
  ######types#7133#7134#7319::Tuple{Type{Float64}}
  ##xs#7320::Tuple{}
  ####a1#7294#7321::Float64
  ####a2#7295#7322::Float64
  ########a#7077#7113#7296#7323::Tuple{}
  ########b#7078#7114#7297#7324::Tuple{}
  ########afactor#7079#7115#7298#7325::Float64
  ########bfactor#7080#7116#7299#7326::Float64
  ######_var0#7117#7300#7327::Tuple{}
  ####a1#7301#7328::Float64
  ####a2#7302#7329::Float64
  ########a#7077#7113#7303#7330::Tuple{}
  ########b#7078#7114#7304#7331::Tuple{}
  ########afactor#7079#7115#7305#7332::Float64
  ########bfactor#7080#7116#7306#7333::Float64
  ######_var0#7117#7307#7334::Tuple{}
  ######types#7133#7134#7335::Tuple{Type{Float64}}
  ##a1#7336::Float64
  ##a2#7337::Float64
  ######a#7077#7113#7338::Tuple{}
  ######b#7078#7114#7339::Tuple{}
  ######afactor#7079#7115#7340::Float64
  ######bfactor#7080#7116#7341::Float64
  ####_var0#7117#7342::Tuple{}
  ######types#7133#7134#7343::Tuple{Type{Float64}}
  ######a#7204#7206#7344::Tuple{}
  ######b#7205#7207#7345::Tuple{}
  ####_var0#7208#7346::Tuple{}
  ##a#7347::Float64
  ####G#7128#7348::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7129#7349::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7130#7350::Tuple{}
  ##########x#7120#7122#7126#7131#7351::Float64
  ########_var0#7123#7127#7132#7352::Tuple{}
  ##a1#7353::Float64
  ##a2#7354::Float64
  ######a#7077#7113#7355::Tuple{}
  ######b#7078#7114#7356::Tuple{}
  ######afactor#7079#7115#7357::Float64
  ######bfactor#7080#7116#7358::Float64
  ####_var0#7117#7359::Tuple{}
  ######a#7204#7206#7360::Tuple{}
  ######b#7205#7207#7361::Tuple{}
  ####_var0#7208#7362::Tuple{}
  ########tup#7119#7214#7218#7363::Tuple{}
  ########x#7120#7215#7219#7364::Float64
  ######_var0#7216#7220#7365::Tuple{}
  ########types#7133#7217#7221#7366::Tuple{Type{Float64}}
  ##a1#7367::Float64
  ##a2#7368::Float64
  ##div_a#7369::Float64
  ####afactor#7087#7370::Float64
  ####bfactor#7088#7371::Float64
  ########a#7077#7081#7089#7372::Tuple{}
  ########b#7078#7082#7090#7373::Tuple{}
  ########afactor#7079#7083#7091#7374::Float64
  ########bfactor#7080#7084#7092#7375::Float64
  ######_var0#7085#7093#7376::Tuple{}
  ######types#7086#7094#7377::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 65:
      GenSym(20) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(22) = GenSym(20)
      GenSym(23) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(22)
      #s25 = GenSym(23)
      GenSym(24) = GenSym(21)
      GenSym(25) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(24)
      #s25 = GenSym(25) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 66:
      $(Expr(:boundscheck, false))
      ####_var0#7076#7310 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7076#7310 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 67:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7311 = GenSym(3)
      ##a2#7312 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7317 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7117#7317 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      p = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7311::Float64,##a2#7312::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 68:
      $(Expr(:boundscheck, false))
      ####_var0#7208#7346 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7208#7346 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7347 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####G#7128#7348 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7132#7352 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7123#7127#7132#7352 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7347::Float64,##a#7347::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7353 = GenSym(13)
      ##a2#7354 = GenSym(14)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7359 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7117#7359 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7353::Float64,##a2#7354::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7336 = GenSym(10)
      ##a2#7337 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7342 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7117#7342 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7336::Float64,##a2#7337::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7208#7362 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7208#7362 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7216#7220#7365 = (top(tuple))()::Tuple{}
      goto 26
      ######_var0#7216#7220#7365 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(5) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7294#7321 = GenSym(5)
      ####a2#7295#7322 = GenSym(6)
      $(Expr(:boundscheck, false))
      ######_var0#7117#7300#7327 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7117#7300#7327 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7294#7321::Float64,####a2#7295#7322::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7301#7328 = GenSym(8)
      ####a2#7302#7329 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7117#7307#7334 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7117#7307#7334 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(17) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7301#7328::Float64,####a2#7302#7329::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(15),:value)::Float64,(top(getfield))(GenSym(16),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(getfield))(GenSym(17),:value)::Float64
      ##a1#7367 = GenSym(18)
      ##a2#7368 = GenSym(19)
      ##div_a#7369 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7367::Float64,##a2#7368::Float64))
      ####afactor#7087#7370 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7368::Float64))
      ####bfactor#7088#7371 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7367::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7368::Float64,##a2#7368::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7376 = (top(tuple))()::Tuple{}
      goto 28
      ######_var0#7085#7093#7376 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7369::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7072#7074#7308::Tuple{}
  ######b#7073#7075#7309::Tuple{}
  ####_var0#7076#7310::Tuple{}
  ##a1#7311::Float64
  ##a2#7312::Float64
  ######a#7077#7113#7313::Tuple{}
  ######b#7078#7114#7314::Tuple{}
  ######afactor#7079#7115#7315::Float64
  ######bfactor#7080#7116#7316::Float64
  ####_var0#7117#7317::Tuple{}
  ######types#7133#7134#7318::Tuple{Type{Float64}}
  ######types#7133#7134#7319::Tuple{Type{Float64}}
  ##xs#7320::Tuple{}
  ####a1#7294#7321::Float64
  ####a2#7295#7322::Float64
  ########a#7077#7113#7296#7323::Tuple{}
  ########b#7078#7114#7297#7324::Tuple{}
  ########afactor#7079#7115#7298#7325::Float64
  ########bfactor#7080#7116#7299#7326::Float64
  ######_var0#7117#7300#7327::Tuple{}
  ####a1#7301#7328::Float64
  ####a2#7302#7329::Float64
  ########a#7077#7113#7303#7330::Tuple{}
  ########b#7078#7114#7304#7331::Tuple{}
  ########afactor#7079#7115#7305#7332::Float64
  ########bfactor#7080#7116#7306#7333::Float64
  ######_var0#7117#7307#7334::Tuple{}
  ######types#7133#7134#7335::Tuple{Type{Float64}}
  ##a1#7336::Float64
  ##a2#7337::Float64
  ######a#7077#7113#7338::Tuple{}
  ######b#7078#7114#7339::Tuple{}
  ######afactor#7079#7115#7340::Float64
  ######bfactor#7080#7116#7341::Float64
  ####_var0#7117#7342::Tuple{}
  ######types#7133#7134#7343::Tuple{Type{Float64}}
  ######a#7204#7206#7344::Tuple{}
  ######b#7205#7207#7345::Tuple{}
  ####_var0#7208#7346::Tuple{}
  ##a#7347::Float64
  ####G#7128#7348::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7129#7349::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7130#7350::Tuple{}
  ##########x#7120#7122#7126#7131#7351::Float64
  ########_var0#7123#7127#7132#7352::Tuple{}
  ##a1#7353::Float64
  ##a2#7354::Float64
  ######a#7077#7113#7355::Tuple{}
  ######b#7078#7114#7356::Tuple{}
  ######afactor#7079#7115#7357::Float64
  ######bfactor#7080#7116#7358::Float64
  ####_var0#7117#7359::Tuple{}
  ######a#7204#7206#7360::Tuple{}
  ######b#7205#7207#7361::Tuple{}
  ####_var0#7208#7362::Tuple{}
  ########tup#7119#7214#7218#7363::Tuple{}
  ########x#7120#7215#7219#7364::Float64
  ######_var0#7216#7220#7365::Tuple{}
  ########types#7133#7217#7221#7366::Tuple{Type{Float64}}
  ##a1#7367::Float64
  ##a2#7368::Float64
  ##div_a#7369::Float64
  ####afactor#7087#7370::Float64
  ####bfactor#7088#7371::Float64
  ########a#7077#7081#7089#7372::Tuple{}
  ########b#7078#7082#7090#7373::Tuple{}
  ########afactor#7079#7083#7091#7374::Float64
  ########bfactor#7080#7084#7092#7375::Float64
  ######_var0#7085#7093#7376::Tuple{}
  ######types#7086#7094#7377::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 65:
      GenSym(20) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(22) = GenSym(20)
      GenSym(23) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(22)
      #s25 = GenSym(23)
      GenSym(24) = GenSym(21)
      GenSym(25) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(24)
      #s25 = GenSym(25) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 66:
      $(Expr(:boundscheck, false))
      ####_var0#7076#7310 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7076#7310 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 67:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7311 = GenSym(3)
      ##a2#7312 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7317 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7117#7317 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      p = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7311::Float64,##a2#7312::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 68:
      $(Expr(:boundscheck, false))
      ####_var0#7208#7346 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7208#7346 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7347 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####G#7128#7348 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7132#7352 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7123#7127#7132#7352 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7347::Float64,##a#7347::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7353 = GenSym(13)
      ##a2#7354 = GenSym(14)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7359 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7117#7359 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7353::Float64,##a2#7354::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7336 = GenSym(10)
      ##a2#7337 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7342 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7117#7342 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7336::Float64,##a2#7337::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7208#7362 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7208#7362 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7216#7220#7365 = (top(tuple))()::Tuple{}
      goto 26
      ######_var0#7216#7220#7365 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(5) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7294#7321 = GenSym(5)
      ####a2#7295#7322 = GenSym(6)
      $(Expr(:boundscheck, false))
      ######_var0#7117#7300#7327 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7117#7300#7327 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7294#7321::Float64,####a2#7295#7322::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7301#7328 = GenSym(8)
      ####a2#7302#7329 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7117#7307#7334 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7117#7307#7334 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(17) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7301#7328::Float64,####a2#7302#7329::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(15),:value)::Float64,(top(getfield))(GenSym(16),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(getfield))(GenSym(17),:value)::Float64
      ##a1#7367 = GenSym(18)
      ##a2#7368 = GenSym(19)
      ##div_a#7369 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7367::Float64,##a2#7368::Float64))
      ####afactor#7087#7370 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7368::Float64))
      ####bfactor#7088#7371 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7367::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7368::Float64,##a2#7368::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7376 = (top(tuple))()::Tuple{}
      goto 28
      ######_var0#7085#7093#7376 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7369::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Int64}
  α::Int64
  β::Int64
  #s25::Int64
  s::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 72:
      GenSym(7) = (top(getfield))(d::Distributions.Beta{Int64},:α)::Int64
      GenSym(8) = (top(getfield))(d::Distributions.Beta{Int64},:β)::Int64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 73:
      s = (Base.box)(Base.Int,(Base.add_int)(α::Int64,β::Int64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 74:
      GenSym(6) = (Distributions.lbeta)(α::Int64,β::Int64)::Float64
      GenSym(5) = (Base.Math.digamma)((Base.box)(Float64,(Base.sitofp)(Float64,α::Int64)))::Float64
      GenSym(4) = (Base.Math.digamma)((Base.box)(Float64,(Base.sitofp)(Float64,β::Int64)))::Float64
      GenSym(3) = (Base.Math.digamma)((Base.box)(Float64,(Base.sitofp)(Float64,s::Int64)))::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)(GenSym(6),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,α::Int64)),1.0)),GenSym(5))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,β::Int64)),1.0)),GenSym(4))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,s::Int64)),2.0)),GenSym(3)))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 72:
      GenSym(13) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(14) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 73:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 74:
      GenSym(12) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,α::Float64,0)::Float64
      GenSym(10) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,β::Float64,0)::Float64
      GenSym(6) = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))
      GenSym(8) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(5) = (Distributions.digamma)(α::Float64)::Float64
      GenSym(4) = (Distributions.digamma)(β::Float64)::Float64
      GenSym(3) = (Distributions.digamma)(s::Float64)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.Math.nan_dom_err)(GenSym(12),α::Float64)::Float64,(Base.Math.nan_dom_err)(GenSym(10),β::Float64)::Float64)),(Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),GenSym(5))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(β::Float64,1.0)),GenSym(4))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(s::Float64,2.0)),GenSym(3)))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7072#7074#7420::Tuple{}
  ######b#7073#7075#7421::Tuple{}
  ####_var0#7076#7422::Tuple{}
  ##a#7423::Float64
  ####G#7415#7424::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7416#7425::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7417#7426::Tuple{}
  ##########x#7120#7122#7126#7418#7427::Float64
  ########_var0#7123#7127#7419#7428::Tuple{}
  ######types#7133#7181#7429::Tuple{Type{Float64}}
  ##a1#7430::Float64
  ##a2#7431::Float64
  ######a#7077#7113#7432::Tuple{}
  ######b#7078#7114#7433::Tuple{}
  ######afactor#7079#7115#7434::Float64
  ######bfactor#7080#7116#7435::Float64
  ####_var0#7117#7436::Tuple{}
  ##a#7437::Float64
  ####G#7415#7438::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7416#7439::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7417#7440::Tuple{}
  ##########x#7120#7122#7126#7418#7441::Float64
  ########_var0#7123#7127#7419#7442::Tuple{}
  ######types#7133#7181#7443::Tuple{Type{Float64}}
  ##a1#7444::Float64
  ##a2#7445::Float64
  ######a#7077#7113#7446::Tuple{}
  ######b#7078#7114#7447::Tuple{}
  ######afactor#7079#7115#7448::Float64
  ######bfactor#7080#7116#7449::Float64
  ####_var0#7117#7450::Tuple{}
  ##a#7451::Float64
  ####G#7415#7452::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7416#7453::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7417#7454::Tuple{}
  ##########x#7120#7122#7126#7418#7455::Float64
  ########_var0#7123#7127#7419#7456::Tuple{}
  ######types#7133#7181#7457::Tuple{Type{Float64}}
  ##a1#7458::Float64
  ##a2#7459::Float64
  ######a#7077#7113#7460::Tuple{}
  ######b#7078#7114#7461::Tuple{}
  ######afactor#7079#7115#7462::Float64
  ######bfactor#7080#7116#7463::Float64
  ####_var0#7117#7464::Tuple{}
  ######a#7204#7206#7465::Tuple{}
  ######b#7205#7207#7466::Tuple{}
  ####_var0#7208#7467::Tuple{}
  ######a#7204#7206#7468::Tuple{}
  ######b#7205#7207#7469::Tuple{}
  ####_var0#7208#7470::Tuple{}
  ######a#7072#7074#7471::Tuple{}
  ######b#7073#7075#7472::Tuple{}
  ####_var0#7076#7473::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 72:
      GenSym(16) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 73:
      $(Expr(:boundscheck, false))
      ####_var0#7076#7422 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7076#7422 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 74:
      GenSym(12) = (Distributions.lbeta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7451 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (ForwardDiff.digamma)(##a#7451::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7451::Float64)::Float64
      ####G#7415#7452 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7419#7456 = (top(tuple))()::Tuple{}
      goto 17
      ########_var0#7123#7127#7419#7456 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(9), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7458 = GenSym(10)
      ##a2#7459 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7464 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7117#7464 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7458::Float64,##a2#7459::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7208#7467 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7208#7467 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##a#7437 = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (ForwardDiff.digamma)(##a#7437::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7437::Float64)::Float64
      ####G#7415#7438 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7419#7442 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7123#7127#7419#7442 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(6), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7444 = GenSym(7)
      ##a2#7445 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7450 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7117#7450 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7444::Float64,##a2#7445::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7208#7470 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7208#7470 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7423 = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7423::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7423::Float64)::Float64
      ####G#7415#7424 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7419#7428 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7123#7127#7419#7428 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(3), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7430 = GenSym(4)
      ##a2#7431 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7436 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7117#7436 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7430::Float64,##a2#7431::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7076#7473 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7076#7473 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(12),:value)::Float64,(top(getfield))(GenSym(13),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(14),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 72:
      GenSym(13) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(14) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 73:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 74:
      GenSym(12) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,α::Float64,0)::Float64
      GenSym(10) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,β::Float64,0)::Float64
      GenSym(6) = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))
      GenSym(8) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(5) = (Distributions.digamma)(α::Float64)::Float64
      GenSym(4) = (Distributions.digamma)(β::Float64)::Float64
      GenSym(3) = (Distributions.digamma)(s::Float64)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.Math.nan_dom_err)(GenSym(12),α::Float64)::Float64,(Base.Math.nan_dom_err)(GenSym(10),β::Float64)::Float64)),(Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),GenSym(5))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(β::Float64,1.0)),GenSym(4))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(s::Float64,2.0)),GenSym(3)))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 72:
      GenSym(13) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(14) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 73:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 74:
      GenSym(12) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,α::Float64,0)::Float64
      GenSym(10) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,β::Float64,0)::Float64
      GenSym(6) = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))
      GenSym(8) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(5) = (Distributions.digamma)(α::Float64)::Float64
      GenSym(4) = (Distributions.digamma)(β::Float64)::Float64
      GenSym(3) = (Distributions.digamma)(s::Float64)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.Math.nan_dom_err)(GenSym(12),α::Float64)::Float64,(Base.Math.nan_dom_err)(GenSym(10),β::Float64)::Float64)),(Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),GenSym(5))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(β::Float64,1.0)),GenSym(4))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(s::Float64,2.0)),GenSym(3)))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7072#7074#7420::Tuple{}
  ######b#7073#7075#7421::Tuple{}
  ####_var0#7076#7422::Tuple{}
  ##a#7423::Float64
  ####G#7415#7424::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7416#7425::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7417#7426::Tuple{}
  ##########x#7120#7122#7126#7418#7427::Float64
  ########_var0#7123#7127#7419#7428::Tuple{}
  ######types#7133#7181#7429::Tuple{Type{Float64}}
  ##a1#7430::Float64
  ##a2#7431::Float64
  ######a#7077#7113#7432::Tuple{}
  ######b#7078#7114#7433::Tuple{}
  ######afactor#7079#7115#7434::Float64
  ######bfactor#7080#7116#7435::Float64
  ####_var0#7117#7436::Tuple{}
  ##a#7437::Float64
  ####G#7415#7438::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7416#7439::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7417#7440::Tuple{}
  ##########x#7120#7122#7126#7418#7441::Float64
  ########_var0#7123#7127#7419#7442::Tuple{}
  ######types#7133#7181#7443::Tuple{Type{Float64}}
  ##a1#7444::Float64
  ##a2#7445::Float64
  ######a#7077#7113#7446::Tuple{}
  ######b#7078#7114#7447::Tuple{}
  ######afactor#7079#7115#7448::Float64
  ######bfactor#7080#7116#7449::Float64
  ####_var0#7117#7450::Tuple{}
  ##a#7451::Float64
  ####G#7415#7452::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7416#7453::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7417#7454::Tuple{}
  ##########x#7120#7122#7126#7418#7455::Float64
  ########_var0#7123#7127#7419#7456::Tuple{}
  ######types#7133#7181#7457::Tuple{Type{Float64}}
  ##a1#7458::Float64
  ##a2#7459::Float64
  ######a#7077#7113#7460::Tuple{}
  ######b#7078#7114#7461::Tuple{}
  ######afactor#7079#7115#7462::Float64
  ######bfactor#7080#7116#7463::Float64
  ####_var0#7117#7464::Tuple{}
  ######a#7204#7206#7465::Tuple{}
  ######b#7205#7207#7466::Tuple{}
  ####_var0#7208#7467::Tuple{}
  ######a#7204#7206#7468::Tuple{}
  ######b#7205#7207#7469::Tuple{}
  ####_var0#7208#7470::Tuple{}
  ######a#7072#7074#7471::Tuple{}
  ######b#7073#7075#7472::Tuple{}
  ####_var0#7076#7473::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 72:
      GenSym(16) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 73:
      $(Expr(:boundscheck, false))
      ####_var0#7076#7422 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7076#7422 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 74:
      GenSym(12) = (Distributions.lbeta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7451 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (ForwardDiff.digamma)(##a#7451::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7451::Float64)::Float64
      ####G#7415#7452 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7419#7456 = (top(tuple))()::Tuple{}
      goto 17
      ########_var0#7123#7127#7419#7456 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(9), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7458 = GenSym(10)
      ##a2#7459 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7464 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7117#7464 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7458::Float64,##a2#7459::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7208#7467 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7208#7467 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##a#7437 = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (ForwardDiff.digamma)(##a#7437::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7437::Float64)::Float64
      ####G#7415#7438 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7419#7442 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7123#7127#7419#7442 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(6), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7444 = GenSym(7)
      ##a2#7445 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7450 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7117#7450 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7444::Float64,##a2#7445::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7208#7470 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7208#7470 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7423 = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7423::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7423::Float64)::Float64
      ####G#7415#7424 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7419#7428 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7123#7127#7419#7428 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(3), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7430 = GenSym(4)
      ##a2#7431 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7436 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7117#7436 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7430::Float64,##a2#7431::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7076#7473 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7076#7473 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(12),:value)::Float64,(top(getfield))(GenSym(13),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(14),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7072#7074#7420::Tuple{}
  ######b#7073#7075#7421::Tuple{}
  ####_var0#7076#7422::Tuple{}
  ##a#7423::Float64
  ####G#7415#7424::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7416#7425::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7417#7426::Tuple{}
  ##########x#7120#7122#7126#7418#7427::Float64
  ########_var0#7123#7127#7419#7428::Tuple{}
  ######types#7133#7181#7429::Tuple{Type{Float64}}
  ##a1#7430::Float64
  ##a2#7431::Float64
  ######a#7077#7113#7432::Tuple{}
  ######b#7078#7114#7433::Tuple{}
  ######afactor#7079#7115#7434::Float64
  ######bfactor#7080#7116#7435::Float64
  ####_var0#7117#7436::Tuple{}
  ##a#7437::Float64
  ####G#7415#7438::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7416#7439::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7417#7440::Tuple{}
  ##########x#7120#7122#7126#7418#7441::Float64
  ########_var0#7123#7127#7419#7442::Tuple{}
  ######types#7133#7181#7443::Tuple{Type{Float64}}
  ##a1#7444::Float64
  ##a2#7445::Float64
  ######a#7077#7113#7446::Tuple{}
  ######b#7078#7114#7447::Tuple{}
  ######afactor#7079#7115#7448::Float64
  ######bfactor#7080#7116#7449::Float64
  ####_var0#7117#7450::Tuple{}
  ##a#7451::Float64
  ####G#7415#7452::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7416#7453::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7417#7454::Tuple{}
  ##########x#7120#7122#7126#7418#7455::Float64
  ########_var0#7123#7127#7419#7456::Tuple{}
  ######types#7133#7181#7457::Tuple{Type{Float64}}
  ##a1#7458::Float64
  ##a2#7459::Float64
  ######a#7077#7113#7460::Tuple{}
  ######b#7078#7114#7461::Tuple{}
  ######afactor#7079#7115#7462::Float64
  ######bfactor#7080#7116#7463::Float64
  ####_var0#7117#7464::Tuple{}
  ######a#7204#7206#7465::Tuple{}
  ######b#7205#7207#7466::Tuple{}
  ####_var0#7208#7467::Tuple{}
  ######a#7204#7206#7468::Tuple{}
  ######b#7205#7207#7469::Tuple{}
  ####_var0#7208#7470::Tuple{}
  ######a#7072#7074#7471::Tuple{}
  ######b#7073#7075#7472::Tuple{}
  ####_var0#7076#7473::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 72:
      GenSym(16) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 73:
      $(Expr(:boundscheck, false))
      ####_var0#7076#7422 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7076#7422 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 74:
      GenSym(12) = (Distributions.lbeta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7451 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (ForwardDiff.digamma)(##a#7451::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7451::Float64)::Float64
      ####G#7415#7452 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7419#7456 = (top(tuple))()::Tuple{}
      goto 17
      ########_var0#7123#7127#7419#7456 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(9), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7458 = GenSym(10)
      ##a2#7459 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7464 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7117#7464 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7458::Float64,##a2#7459::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7208#7467 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7208#7467 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##a#7437 = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (ForwardDiff.digamma)(##a#7437::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7437::Float64)::Float64
      ####G#7415#7438 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7419#7442 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7123#7127#7419#7442 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(6), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7444 = GenSym(7)
      ##a2#7445 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7450 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7117#7450 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7444::Float64,##a2#7445::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7208#7470 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7208#7470 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7423 = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7423::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7423::Float64)::Float64
      ####G#7415#7424 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7419#7428 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7123#7127#7419#7428 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(3), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7430 = GenSym(4)
      ##a2#7431 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7436 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7117#7436 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7430::Float64,##a2#7431::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7076#7473 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7076#7473 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(12),:value)::Float64,(top(getfield))(GenSym(13),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(14),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7072#7074#7420::Tuple{}
  ######b#7073#7075#7421::Tuple{}
  ####_var0#7076#7422::Tuple{}
  ##a#7423::Float64
  ####G#7415#7424::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7416#7425::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7417#7426::Tuple{}
  ##########x#7120#7122#7126#7418#7427::Float64
  ########_var0#7123#7127#7419#7428::Tuple{}
  ######types#7133#7181#7429::Tuple{Type{Float64}}
  ##a1#7430::Float64
  ##a2#7431::Float64
  ######a#7077#7113#7432::Tuple{}
  ######b#7078#7114#7433::Tuple{}
  ######afactor#7079#7115#7434::Float64
  ######bfactor#7080#7116#7435::Float64
  ####_var0#7117#7436::Tuple{}
  ##a#7437::Float64
  ####G#7415#7438::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7416#7439::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7417#7440::Tuple{}
  ##########x#7120#7122#7126#7418#7441::Float64
  ########_var0#7123#7127#7419#7442::Tuple{}
  ######types#7133#7181#7443::Tuple{Type{Float64}}
  ##a1#7444::Float64
  ##a2#7445::Float64
  ######a#7077#7113#7446::Tuple{}
  ######b#7078#7114#7447::Tuple{}
  ######afactor#7079#7115#7448::Float64
  ######bfactor#7080#7116#7449::Float64
  ####_var0#7117#7450::Tuple{}
  ##a#7451::Float64
  ####G#7415#7452::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7416#7453::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7417#7454::Tuple{}
  ##########x#7120#7122#7126#7418#7455::Float64
  ########_var0#7123#7127#7419#7456::Tuple{}
  ######types#7133#7181#7457::Tuple{Type{Float64}}
  ##a1#7458::Float64
  ##a2#7459::Float64
  ######a#7077#7113#7460::Tuple{}
  ######b#7078#7114#7461::Tuple{}
  ######afactor#7079#7115#7462::Float64
  ######bfactor#7080#7116#7463::Float64
  ####_var0#7117#7464::Tuple{}
  ######a#7204#7206#7465::Tuple{}
  ######b#7205#7207#7466::Tuple{}
  ####_var0#7208#7467::Tuple{}
  ######a#7204#7206#7468::Tuple{}
  ######b#7205#7207#7469::Tuple{}
  ####_var0#7208#7470::Tuple{}
  ######a#7072#7074#7471::Tuple{}
  ######b#7073#7075#7472::Tuple{}
  ####_var0#7076#7473::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 72:
      GenSym(16) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 73:
      $(Expr(:boundscheck, false))
      ####_var0#7076#7422 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7076#7422 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 74:
      GenSym(12) = (Distributions.lbeta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7451 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (ForwardDiff.digamma)(##a#7451::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7451::Float64)::Float64
      ####G#7415#7452 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7419#7456 = (top(tuple))()::Tuple{}
      goto 17
      ########_var0#7123#7127#7419#7456 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(9), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7458 = GenSym(10)
      ##a2#7459 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7464 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7117#7464 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7458::Float64,##a2#7459::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7208#7467 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7208#7467 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##a#7437 = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (ForwardDiff.digamma)(##a#7437::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7437::Float64)::Float64
      ####G#7415#7438 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7419#7442 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7123#7127#7419#7442 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(6), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7444 = GenSym(7)
      ##a2#7445 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7450 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7117#7450 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7444::Float64,##a2#7445::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7208#7470 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7208#7470 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7423 = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7423::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7423::Float64)::Float64
      ####G#7415#7424 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7419#7428 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7123#7127#7419#7428 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(3), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7430 = GenSym(4)
      ##a2#7431 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7436 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7117#7436 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7430::Float64,##a2#7431::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7076#7473 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7076#7473 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(12),:value)::Float64,(top(getfield))(GenSym(13),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(14),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7072#7074#7420::Tuple{}
  ######b#7073#7075#7421::Tuple{}
  ####_var0#7076#7422::Tuple{}
  ##a#7423::Float64
  ####G#7415#7424::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7416#7425::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7417#7426::Tuple{}
  ##########x#7120#7122#7126#7418#7427::Float64
  ########_var0#7123#7127#7419#7428::Tuple{}
  ######types#7133#7181#7429::Tuple{Type{Float64}}
  ##a1#7430::Float64
  ##a2#7431::Float64
  ######a#7077#7113#7432::Tuple{}
  ######b#7078#7114#7433::Tuple{}
  ######afactor#7079#7115#7434::Float64
  ######bfactor#7080#7116#7435::Float64
  ####_var0#7117#7436::Tuple{}
  ##a#7437::Float64
  ####G#7415#7438::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7416#7439::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7417#7440::Tuple{}
  ##########x#7120#7122#7126#7418#7441::Float64
  ########_var0#7123#7127#7419#7442::Tuple{}
  ######types#7133#7181#7443::Tuple{Type{Float64}}
  ##a1#7444::Float64
  ##a2#7445::Float64
  ######a#7077#7113#7446::Tuple{}
  ######b#7078#7114#7447::Tuple{}
  ######afactor#7079#7115#7448::Float64
  ######bfactor#7080#7116#7449::Float64
  ####_var0#7117#7450::Tuple{}
  ##a#7451::Float64
  ####G#7415#7452::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7416#7453::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7417#7454::Tuple{}
  ##########x#7120#7122#7126#7418#7455::Float64
  ########_var0#7123#7127#7419#7456::Tuple{}
  ######types#7133#7181#7457::Tuple{Type{Float64}}
  ##a1#7458::Float64
  ##a2#7459::Float64
  ######a#7077#7113#7460::Tuple{}
  ######b#7078#7114#7461::Tuple{}
  ######afactor#7079#7115#7462::Float64
  ######bfactor#7080#7116#7463::Float64
  ####_var0#7117#7464::Tuple{}
  ######a#7204#7206#7465::Tuple{}
  ######b#7205#7207#7466::Tuple{}
  ####_var0#7208#7467::Tuple{}
  ######a#7204#7206#7468::Tuple{}
  ######b#7205#7207#7469::Tuple{}
  ####_var0#7208#7470::Tuple{}
  ######a#7072#7074#7471::Tuple{}
  ######b#7073#7075#7472::Tuple{}
  ####_var0#7076#7473::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 72:
      GenSym(16) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 73:
      $(Expr(:boundscheck, false))
      ####_var0#7076#7422 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7076#7422 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 74:
      GenSym(12) = (Distributions.lbeta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7451 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (ForwardDiff.digamma)(##a#7451::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7451::Float64)::Float64
      ####G#7415#7452 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7419#7456 = (top(tuple))()::Tuple{}
      goto 17
      ########_var0#7123#7127#7419#7456 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(9), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7458 = GenSym(10)
      ##a2#7459 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7464 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7117#7464 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7458::Float64,##a2#7459::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7208#7467 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7208#7467 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##a#7437 = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (ForwardDiff.digamma)(##a#7437::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7437::Float64)::Float64
      ####G#7415#7438 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7419#7442 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7123#7127#7419#7442 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(6), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7444 = GenSym(7)
      ##a2#7445 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7450 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7117#7450 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7444::Float64,##a2#7445::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7208#7470 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7208#7470 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7423 = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7423::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7423::Float64)::Float64
      ####G#7415#7424 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7419#7428 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7123#7127#7419#7428 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(3), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7430 = GenSym(4)
      ##a2#7431 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7436 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7117#7436 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7430::Float64,##a2#7431::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7076#7473 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7076#7473 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(12),:value)::Float64,(top(getfield))(GenSym(13),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(14),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 89:
      GenSym(48) = (Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Beta{Int64},:α)::Int64))
      GenSym(49) = (Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Beta{Int64},:β)::Int64))
      return (top(ccall))((top(tuple))("rbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble)::SimpleVector,GenSym(48),0,GenSym(49),0)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 89:
      return (top(ccall))((top(tuple))("rbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 89:
      return ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:betarand)::F)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
  end::Float64

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 89:
      return (top(ccall))((top(tuple))("rbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 89:
      return (top(ccall))((top(tuple))("rbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 89:
      return ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:betarand)::F)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
  end::Float64

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 89:
      return ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:betarand)::F)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
  end::Float64

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 89:
      return ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:betarand)::F)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
  end::Float64

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 89:
      return ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:betarand)::F)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
  end::Float64




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Int64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 103:
      GenSym(7) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(8) = (top(ccall))((top(tuple))("dbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),0,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Beta{Int64},:α)::Int64)),0,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Beta{Int64},:β)::Int64)),0,GenSym(7),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(8),0)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 103:
      GenSym(7) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(8) = (top(ccall))((top(tuple))("dbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),0,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0,GenSym(7),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(8),0)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 103:
      GenSym(1) = (StatsFuns.f64)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(0) = (StatsFuns.f64)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(9) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(10) = (top(ccall))((top(tuple))("dbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),0,GenSym(1),0,GenSym(0),0,GenSym(9),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(10),0)::Float64
  end::Float64

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 103:
      GenSym(7) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(8) = (top(ccall))((top(tuple))("dbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),0,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0,GenSym(7),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(8),0)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 103:
      GenSym(7) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(8) = (top(ccall))((top(tuple))("dbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),0,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0,GenSym(7),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(8),0)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 103:
      GenSym(1) = (StatsFuns.f64)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(0) = (StatsFuns.f64)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(9) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(10) = (top(ccall))((top(tuple))("dbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),0,GenSym(1),0,GenSym(0),0,GenSym(9),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(10),0)::Float64
  end::Float64

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 103:
      GenSym(1) = (StatsFuns.f64)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(0) = (StatsFuns.f64)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(9) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(10) = (top(ccall))((top(tuple))("dbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),0,GenSym(1),0,GenSym(0),0,GenSym(9),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(10),0)::Float64
  end::Float64

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 103:
      GenSym(1) = (StatsFuns.f64)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(0) = (StatsFuns.f64)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(9) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(10) = (top(ccall))((top(tuple))("dbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),0,GenSym(1),0,GenSym(0),0,GenSym(9),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(10),0)::Float64
  end::Float64

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 103:
      GenSym(1) = (StatsFuns.f64)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(0) = (StatsFuns.f64)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(9) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(10) = (top(ccall))((top(tuple))("dbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),0,GenSym(1),0,GenSym(0),0,GenSym(9),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(10),0)::Float64
  end::Float64




____________________________
mgf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
cf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





