____________________________
ntrials
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 58:
      return (top(tuple))((top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 58:
      return (top(tuple))((top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 58:
      return (top(tuple))((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 58:
      return (top(tuple))((top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 58:
      return (top(tuple))((top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 58:
      return (top(tuple))((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 58:
      return (top(tuple))((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 58:
      return (top(tuple))((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 58:
      return (top(tuple))((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 63:
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8)
      return (Base.box)(Base.Float64,(Base.div_float)(α::Float64,(Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 63:
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8)
      return (Base.box)(Base.Float64,(Base.div_float)(α::Float64,(Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######a#7067#7069#7090::Tuple{}
  ######b#7068#7070#7091::Tuple{}
  ####_var0#7071#7092::Tuple{}
  ##a1#7093::Float64
  ##a2#7094::Float64
  ##div_a#7095::Float64
  ####afactor#7082#7096::Float64
  ####bfactor#7083#7097::Float64
  ########a#7072#7076#7084#7098::Tuple{}
  ########b#7073#7077#7085#7099::Tuple{}
  ########afactor#7074#7078#7086#7100::Float64
  ########bfactor#7075#7079#7087#7101::Float64
  ######_var0#7080#7088#7102::Tuple{}
  ######types#7081#7089#7103::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 63:
      GenSym(5) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(9)
      #s25 = GenSym(10)
      $(Expr(:boundscheck, false))
      ####_var0#7071#7092 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7071#7092 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7093 = GenSym(3)
      ##a2#7094 = GenSym(4)
      ##div_a#7095 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7093::Float64,##a2#7094::Float64))
      ####afactor#7082#7096 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7094::Float64))
      ####bfactor#7083#7097 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7093::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7094::Float64,##a2#7094::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7080#7088#7102 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7080#7088#7102 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7095::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 63:
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8)
      return (Base.box)(Base.Float64,(Base.div_float)(α::Float64,(Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 63:
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8)
      return (Base.box)(Base.Float64,(Base.div_float)(α::Float64,(Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######a#7067#7069#7090::Tuple{}
  ######b#7068#7070#7091::Tuple{}
  ####_var0#7071#7092::Tuple{}
  ##a1#7093::Float64
  ##a2#7094::Float64
  ##div_a#7095::Float64
  ####afactor#7082#7096::Float64
  ####bfactor#7083#7097::Float64
  ########a#7072#7076#7084#7098::Tuple{}
  ########b#7073#7077#7085#7099::Tuple{}
  ########afactor#7074#7078#7086#7100::Float64
  ########bfactor#7075#7079#7087#7101::Float64
  ######_var0#7080#7088#7102::Tuple{}
  ######types#7081#7089#7103::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 63:
      GenSym(5) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(9)
      #s25 = GenSym(10)
      $(Expr(:boundscheck, false))
      ####_var0#7071#7092 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7071#7092 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7093 = GenSym(3)
      ##a2#7094 = GenSym(4)
      ##div_a#7095 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7093::Float64,##a2#7094::Float64))
      ####afactor#7082#7096 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7094::Float64))
      ####bfactor#7083#7097 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7093::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7094::Float64,##a2#7094::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7080#7088#7102 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7080#7088#7102 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7095::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######a#7067#7069#7090::Tuple{}
  ######b#7068#7070#7091::Tuple{}
  ####_var0#7071#7092::Tuple{}
  ##a1#7093::Float64
  ##a2#7094::Float64
  ##div_a#7095::Float64
  ####afactor#7082#7096::Float64
  ####bfactor#7083#7097::Float64
  ########a#7072#7076#7084#7098::Tuple{}
  ########b#7073#7077#7085#7099::Tuple{}
  ########afactor#7074#7078#7086#7100::Float64
  ########bfactor#7075#7079#7087#7101::Float64
  ######_var0#7080#7088#7102::Tuple{}
  ######types#7081#7089#7103::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 63:
      GenSym(5) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(9)
      #s25 = GenSym(10)
      $(Expr(:boundscheck, false))
      ####_var0#7071#7092 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7071#7092 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7093 = GenSym(3)
      ##a2#7094 = GenSym(4)
      ##div_a#7095 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7093::Float64,##a2#7094::Float64))
      ####afactor#7082#7096 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7094::Float64))
      ####bfactor#7083#7097 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7093::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7094::Float64,##a2#7094::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7080#7088#7102 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7080#7088#7102 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7095::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######a#7067#7069#7090::Tuple{}
  ######b#7068#7070#7091::Tuple{}
  ####_var0#7071#7092::Tuple{}
  ##a1#7093::Float64
  ##a2#7094::Float64
  ##div_a#7095::Float64
  ####afactor#7082#7096::Float64
  ####bfactor#7083#7097::Float64
  ########a#7072#7076#7084#7098::Tuple{}
  ########b#7073#7077#7085#7099::Tuple{}
  ########afactor#7074#7078#7086#7100::Float64
  ########bfactor#7075#7079#7087#7101::Float64
  ######_var0#7080#7088#7102::Tuple{}
  ######types#7081#7089#7103::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 63:
      GenSym(5) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(9)
      #s25 = GenSym(10)
      $(Expr(:boundscheck, false))
      ####_var0#7071#7092 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7071#7092 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7093 = GenSym(3)
      ##a2#7094 = GenSym(4)
      ##div_a#7095 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7093::Float64,##a2#7094::Float64))
      ####afactor#7082#7096 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7094::Float64))
      ####bfactor#7083#7097 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7093::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7094::Float64,##a2#7094::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7080#7088#7102 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7080#7088#7102 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7095::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######a#7067#7069#7090::Tuple{}
  ######b#7068#7070#7091::Tuple{}
  ####_var0#7071#7092::Tuple{}
  ##a1#7093::Float64
  ##a2#7094::Float64
  ##div_a#7095::Float64
  ####afactor#7082#7096::Float64
  ####bfactor#7083#7097::Float64
  ########a#7072#7076#7084#7098::Tuple{}
  ########b#7073#7077#7085#7099::Tuple{}
  ########afactor#7074#7078#7086#7100::Float64
  ########bfactor#7075#7079#7087#7101::Float64
  ######_var0#7080#7088#7102::Tuple{}
  ######types#7081#7089#7103::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 63:
      GenSym(5) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(9)
      #s25 = GenSym(10)
      $(Expr(:boundscheck, false))
      ####_var0#7071#7092 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7071#7092 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7093 = GenSym(3)
      ##a2#7094 = GenSym(4)
      ##div_a#7095 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7093::Float64,##a2#7094::Float64))
      ####afactor#7082#7096 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7094::Float64))
      ####bfactor#7083#7097 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7093::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7094::Float64,##a2#7094::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7080#7088#7102 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7080#7088#7102 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7095::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 74:
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 75:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 76:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(s::Float64,s::Float64)),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0))))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 74:
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 75:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 76:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(s::Float64,s::Float64)),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0))))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7067#7069#7133::Tuple{}
  ######b#7068#7070#7134::Tuple{}
  ####_var0#7071#7135::Tuple{}
  ######types#7131#7132#7136::Tuple{Type{Float64}}
  ##a#7137::Float64
  ####G#7126#7138::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7127#7139::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7128#7140::Tuple{}
  ##########x#7118#7120#7124#7129#7141::Float64
  ########_var0#7121#7125#7130#7142::Tuple{}
  ##a1#7143::Float64
  ##a2#7144::Float64
  ######a#7072#7111#7145::Tuple{}
  ######b#7073#7112#7146::Tuple{}
  ######afactor#7074#7113#7147::Float64
  ######bfactor#7075#7114#7148::Float64
  ####_var0#7115#7149::Tuple{}
  ##a1#7150::Float64
  ##a2#7151::Float64
  ######a#7072#7111#7152::Tuple{}
  ######b#7073#7112#7153::Tuple{}
  ######afactor#7074#7113#7154::Float64
  ######bfactor#7075#7114#7155::Float64
  ####_var0#7115#7156::Tuple{}
  ##a1#7157::Float64
  ##a2#7158::Float64
  ##div_a#7159::Float64
  ####afactor#7082#7160::Float64
  ####bfactor#7083#7161::Float64
  ########a#7072#7076#7084#7162::Tuple{}
  ########b#7073#7077#7085#7163::Tuple{}
  ########afactor#7074#7078#7086#7164::Float64
  ########bfactor#7075#7079#7087#7165::Float64
  ######_var0#7080#7088#7166::Tuple{}
  ######types#7081#7089#7167::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 74:
      GenSym(12) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 75:
      $(Expr(:boundscheck, false))
      ####_var0#7071#7135 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7071#7135 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 76:
      GenSym(6) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7150 = GenSym(6)
      ##a2#7151 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7156 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7115#7156 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7150::Float64,##a2#7151::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7137 = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####G#7126#7138 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7130#7142 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7121#7125#7130#7142 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7137::Float64,##a#7137::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7143 = GenSym(4)
      ##a2#7144 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7149 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7115#7149 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7143::Float64,##a2#7144::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7157 = GenSym(10)
      ##a2#7158 = GenSym(11)
      ##div_a#7159 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7157::Float64,##a2#7158::Float64))
      ####afactor#7082#7160 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7158::Float64))
      ####bfactor#7083#7161 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7157::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7158::Float64,##a2#7158::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7080#7088#7166 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7080#7088#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7159::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 74:
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 75:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 76:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(s::Float64,s::Float64)),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0))))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 74:
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 75:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 76:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(s::Float64,s::Float64)),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0))))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7067#7069#7133::Tuple{}
  ######b#7068#7070#7134::Tuple{}
  ####_var0#7071#7135::Tuple{}
  ######types#7131#7132#7136::Tuple{Type{Float64}}
  ##a#7137::Float64
  ####G#7126#7138::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7127#7139::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7128#7140::Tuple{}
  ##########x#7118#7120#7124#7129#7141::Float64
  ########_var0#7121#7125#7130#7142::Tuple{}
  ##a1#7143::Float64
  ##a2#7144::Float64
  ######a#7072#7111#7145::Tuple{}
  ######b#7073#7112#7146::Tuple{}
  ######afactor#7074#7113#7147::Float64
  ######bfactor#7075#7114#7148::Float64
  ####_var0#7115#7149::Tuple{}
  ##a1#7150::Float64
  ##a2#7151::Float64
  ######a#7072#7111#7152::Tuple{}
  ######b#7073#7112#7153::Tuple{}
  ######afactor#7074#7113#7154::Float64
  ######bfactor#7075#7114#7155::Float64
  ####_var0#7115#7156::Tuple{}
  ##a1#7157::Float64
  ##a2#7158::Float64
  ##div_a#7159::Float64
  ####afactor#7082#7160::Float64
  ####bfactor#7083#7161::Float64
  ########a#7072#7076#7084#7162::Tuple{}
  ########b#7073#7077#7085#7163::Tuple{}
  ########afactor#7074#7078#7086#7164::Float64
  ########bfactor#7075#7079#7087#7165::Float64
  ######_var0#7080#7088#7166::Tuple{}
  ######types#7081#7089#7167::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 74:
      GenSym(12) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 75:
      $(Expr(:boundscheck, false))
      ####_var0#7071#7135 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7071#7135 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 76:
      GenSym(6) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7150 = GenSym(6)
      ##a2#7151 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7156 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7115#7156 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7150::Float64,##a2#7151::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7137 = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####G#7126#7138 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7130#7142 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7121#7125#7130#7142 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7137::Float64,##a#7137::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7143 = GenSym(4)
      ##a2#7144 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7149 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7115#7149 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7143::Float64,##a2#7144::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7157 = GenSym(10)
      ##a2#7158 = GenSym(11)
      ##div_a#7159 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7157::Float64,##a2#7158::Float64))
      ####afactor#7082#7160 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7158::Float64))
      ####bfactor#7083#7161 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7157::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7158::Float64,##a2#7158::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7080#7088#7166 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7080#7088#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7159::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7067#7069#7133::Tuple{}
  ######b#7068#7070#7134::Tuple{}
  ####_var0#7071#7135::Tuple{}
  ######types#7131#7132#7136::Tuple{Type{Float64}}
  ##a#7137::Float64
  ####G#7126#7138::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7127#7139::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7128#7140::Tuple{}
  ##########x#7118#7120#7124#7129#7141::Float64
  ########_var0#7121#7125#7130#7142::Tuple{}
  ##a1#7143::Float64
  ##a2#7144::Float64
  ######a#7072#7111#7145::Tuple{}
  ######b#7073#7112#7146::Tuple{}
  ######afactor#7074#7113#7147::Float64
  ######bfactor#7075#7114#7148::Float64
  ####_var0#7115#7149::Tuple{}
  ##a1#7150::Float64
  ##a2#7151::Float64
  ######a#7072#7111#7152::Tuple{}
  ######b#7073#7112#7153::Tuple{}
  ######afactor#7074#7113#7154::Float64
  ######bfactor#7075#7114#7155::Float64
  ####_var0#7115#7156::Tuple{}
  ##a1#7157::Float64
  ##a2#7158::Float64
  ##div_a#7159::Float64
  ####afactor#7082#7160::Float64
  ####bfactor#7083#7161::Float64
  ########a#7072#7076#7084#7162::Tuple{}
  ########b#7073#7077#7085#7163::Tuple{}
  ########afactor#7074#7078#7086#7164::Float64
  ########bfactor#7075#7079#7087#7165::Float64
  ######_var0#7080#7088#7166::Tuple{}
  ######types#7081#7089#7167::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 74:
      GenSym(12) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 75:
      $(Expr(:boundscheck, false))
      ####_var0#7071#7135 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7071#7135 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 76:
      GenSym(6) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7150 = GenSym(6)
      ##a2#7151 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7156 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7115#7156 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7150::Float64,##a2#7151::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7137 = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####G#7126#7138 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7130#7142 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7121#7125#7130#7142 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7137::Float64,##a#7137::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7143 = GenSym(4)
      ##a2#7144 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7149 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7115#7149 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7143::Float64,##a2#7144::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7157 = GenSym(10)
      ##a2#7158 = GenSym(11)
      ##div_a#7159 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7157::Float64,##a2#7158::Float64))
      ####afactor#7082#7160 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7158::Float64))
      ####bfactor#7083#7161 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7157::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7158::Float64,##a2#7158::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7080#7088#7166 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7080#7088#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7159::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7067#7069#7133::Tuple{}
  ######b#7068#7070#7134::Tuple{}
  ####_var0#7071#7135::Tuple{}
  ######types#7131#7132#7136::Tuple{Type{Float64}}
  ##a#7137::Float64
  ####G#7126#7138::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7127#7139::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7128#7140::Tuple{}
  ##########x#7118#7120#7124#7129#7141::Float64
  ########_var0#7121#7125#7130#7142::Tuple{}
  ##a1#7143::Float64
  ##a2#7144::Float64
  ######a#7072#7111#7145::Tuple{}
  ######b#7073#7112#7146::Tuple{}
  ######afactor#7074#7113#7147::Float64
  ######bfactor#7075#7114#7148::Float64
  ####_var0#7115#7149::Tuple{}
  ##a1#7150::Float64
  ##a2#7151::Float64
  ######a#7072#7111#7152::Tuple{}
  ######b#7073#7112#7153::Tuple{}
  ######afactor#7074#7113#7154::Float64
  ######bfactor#7075#7114#7155::Float64
  ####_var0#7115#7156::Tuple{}
  ##a1#7157::Float64
  ##a2#7158::Float64
  ##div_a#7159::Float64
  ####afactor#7082#7160::Float64
  ####bfactor#7083#7161::Float64
  ########a#7072#7076#7084#7162::Tuple{}
  ########b#7073#7077#7085#7163::Tuple{}
  ########afactor#7074#7078#7086#7164::Float64
  ########bfactor#7075#7079#7087#7165::Float64
  ######_var0#7080#7088#7166::Tuple{}
  ######types#7081#7089#7167::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 74:
      GenSym(12) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 75:
      $(Expr(:boundscheck, false))
      ####_var0#7071#7135 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7071#7135 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 76:
      GenSym(6) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7150 = GenSym(6)
      ##a2#7151 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7156 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7115#7156 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7150::Float64,##a2#7151::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7137 = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####G#7126#7138 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7130#7142 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7121#7125#7130#7142 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7137::Float64,##a#7137::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7143 = GenSym(4)
      ##a2#7144 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7149 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7115#7149 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7143::Float64,##a2#7144::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7157 = GenSym(10)
      ##a2#7158 = GenSym(11)
      ##div_a#7159 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7157::Float64,##a2#7158::Float64))
      ####afactor#7082#7160 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7158::Float64))
      ####bfactor#7083#7161 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7157::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7158::Float64,##a2#7158::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7080#7088#7166 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7080#7088#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7159::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7067#7069#7133::Tuple{}
  ######b#7068#7070#7134::Tuple{}
  ####_var0#7071#7135::Tuple{}
  ######types#7131#7132#7136::Tuple{Type{Float64}}
  ##a#7137::Float64
  ####G#7126#7138::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7127#7139::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7128#7140::Tuple{}
  ##########x#7118#7120#7124#7129#7141::Float64
  ########_var0#7121#7125#7130#7142::Tuple{}
  ##a1#7143::Float64
  ##a2#7144::Float64
  ######a#7072#7111#7145::Tuple{}
  ######b#7073#7112#7146::Tuple{}
  ######afactor#7074#7113#7147::Float64
  ######bfactor#7075#7114#7148::Float64
  ####_var0#7115#7149::Tuple{}
  ##a1#7150::Float64
  ##a2#7151::Float64
  ######a#7072#7111#7152::Tuple{}
  ######b#7073#7112#7153::Tuple{}
  ######afactor#7074#7113#7154::Float64
  ######bfactor#7075#7114#7155::Float64
  ####_var0#7115#7156::Tuple{}
  ##a1#7157::Float64
  ##a2#7158::Float64
  ##div_a#7159::Float64
  ####afactor#7082#7160::Float64
  ####bfactor#7083#7161::Float64
  ########a#7072#7076#7084#7162::Tuple{}
  ########b#7073#7077#7085#7163::Tuple{}
  ########afactor#7074#7078#7086#7164::Float64
  ########bfactor#7075#7079#7087#7165::Float64
  ######_var0#7080#7088#7166::Tuple{}
  ######types#7081#7089#7167::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 74:
      GenSym(12) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 75:
      $(Expr(:boundscheck, false))
      ####_var0#7071#7135 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7071#7135 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 76:
      GenSym(6) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7150 = GenSym(6)
      ##a2#7151 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7156 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7115#7156 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7150::Float64,##a2#7151::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7137 = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####G#7126#7138 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7130#7142 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7121#7125#7130#7142 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7137::Float64,##a#7137::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7143 = GenSym(4)
      ##a2#7144 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7149 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7115#7149 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7143::Float64,##a2#7144::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7157 = GenSym(10)
      ##a2#7158 = GenSym(11)
      ##div_a#7159 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7157::Float64,##a2#7158::Float64))
      ####afactor#7082#7160 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7158::Float64))
      ####bfactor#7083#7161 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7157::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7158::Float64,##a2#7158::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7080#7088#7166 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7080#7088#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7159::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  #s24::Bool

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 66:
      NewvarNode(symbol("#s24"))
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 67:
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      #s24 = (Base.lt_float)(1.0,β::Float64)::Bool
      goto 1
      0: 
      #s24 = false
      1: 
      unless #s24::Bool goto 2
      goto 3
      2: 
      (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,"mode is defined only when α > 1 and β > 1.")::ANY)::UNION{}
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 68:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),2.0))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  #s24::Bool

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 66:
      NewvarNode(symbol("#s24"))
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 67:
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      #s24 = (Base.lt_float)(1.0,β::Float64)::Bool
      goto 1
      0: 
      #s24 = false
      1: 
      unless #s24::Bool goto 2
      goto 3
      2: 
      (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,"mode is defined only when α > 1 and β > 1.")::ANY)::UNION{}
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 68:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),2.0))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  #s24::Bool
  ######a#7067#7069#7177::Tuple{}
  ######b#7068#7070#7178::Tuple{}
  ####_var0#7071#7179::Tuple{}
  ######types#7131#7176#7180::Tuple{Type{Float64}}
  ######types#7131#7176#7181::Tuple{Type{Float64}}
  ##a1#7182::Float64
  ##a2#7183::Float64
  ##div_a#7184::Float64
  ####afactor#7082#7185::Float64
  ####bfactor#7083#7186::Float64
  ########a#7072#7076#7084#7187::Tuple{}
  ########b#7073#7077#7085#7188::Tuple{}
  ########afactor#7074#7078#7086#7189::Float64
  ########bfactor#7075#7079#7087#7190::Float64
  ######_var0#7080#7088#7191::Tuple{}
  ######types#7081#7089#7192::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 66:
      NewvarNode(symbol("#s24"))
      GenSym(6) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(7) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(10)
      #s25 = GenSym(11) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 67:
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      #s24 = (Base.lt_float)(1.0,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool
      goto 1
      0: 
      #s24 = false
      1: 
      unless #s24::Bool goto 2
      goto 3
      2: 
      (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,"mode is defined only when α > 1 and β > 1.")::ANY)::UNION{}
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 68:
      $(Expr(:boundscheck, false))
      ####_var0#7071#7179 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7071#7179 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(3),:value)::Float64,2.0))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7182 = GenSym(4)
      ##a2#7183 = GenSym(5)
      ##div_a#7184 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7182::Float64,##a2#7183::Float64))
      ####afactor#7082#7185 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7183::Float64))
      ####bfactor#7083#7186 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7182::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7183::Float64,##a2#7183::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7080#7088#7191 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7080#7088#7191 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7184::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  #s24::Bool

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 66:
      NewvarNode(symbol("#s24"))
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 67:
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      #s24 = (Base.lt_float)(1.0,β::Float64)::Bool
      goto 1
      0: 
      #s24 = false
      1: 
      unless #s24::Bool goto 2
      goto 3
      2: 
      (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,"mode is defined only when α > 1 and β > 1.")::ANY)::UNION{}
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 68:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),2.0))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  #s24::Bool

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 66:
      NewvarNode(symbol("#s24"))
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 67:
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      #s24 = (Base.lt_float)(1.0,β::Float64)::Bool
      goto 1
      0: 
      #s24 = false
      1: 
      unless #s24::Bool goto 2
      goto 3
      2: 
      (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,"mode is defined only when α > 1 and β > 1.")::ANY)::UNION{}
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 68:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),2.0))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  #s24::Bool
  ######a#7067#7069#7177::Tuple{}
  ######b#7068#7070#7178::Tuple{}
  ####_var0#7071#7179::Tuple{}
  ######types#7131#7176#7180::Tuple{Type{Float64}}
  ######types#7131#7176#7181::Tuple{Type{Float64}}
  ##a1#7182::Float64
  ##a2#7183::Float64
  ##div_a#7184::Float64
  ####afactor#7082#7185::Float64
  ####bfactor#7083#7186::Float64
  ########a#7072#7076#7084#7187::Tuple{}
  ########b#7073#7077#7085#7188::Tuple{}
  ########afactor#7074#7078#7086#7189::Float64
  ########bfactor#7075#7079#7087#7190::Float64
  ######_var0#7080#7088#7191::Tuple{}
  ######types#7081#7089#7192::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 66:
      NewvarNode(symbol("#s24"))
      GenSym(6) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(7) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(10)
      #s25 = GenSym(11) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 67:
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      #s24 = (Base.lt_float)(1.0,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool
      goto 1
      0: 
      #s24 = false
      1: 
      unless #s24::Bool goto 2
      goto 3
      2: 
      (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,"mode is defined only when α > 1 and β > 1.")::ANY)::UNION{}
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 68:
      $(Expr(:boundscheck, false))
      ####_var0#7071#7179 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7071#7179 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(3),:value)::Float64,2.0))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7182 = GenSym(4)
      ##a2#7183 = GenSym(5)
      ##div_a#7184 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7182::Float64,##a2#7183::Float64))
      ####afactor#7082#7185 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7183::Float64))
      ####bfactor#7083#7186 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7182::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7183::Float64,##a2#7183::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7080#7088#7191 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7080#7088#7191 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7184::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  #s24::Bool
  ######a#7067#7069#7177::Tuple{}
  ######b#7068#7070#7178::Tuple{}
  ####_var0#7071#7179::Tuple{}
  ######types#7131#7176#7180::Tuple{Type{Float64}}
  ######types#7131#7176#7181::Tuple{Type{Float64}}
  ##a1#7182::Float64
  ##a2#7183::Float64
  ##div_a#7184::Float64
  ####afactor#7082#7185::Float64
  ####bfactor#7083#7186::Float64
  ########a#7072#7076#7084#7187::Tuple{}
  ########b#7073#7077#7085#7188::Tuple{}
  ########afactor#7074#7078#7086#7189::Float64
  ########bfactor#7075#7079#7087#7190::Float64
  ######_var0#7080#7088#7191::Tuple{}
  ######types#7081#7089#7192::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 66:
      NewvarNode(symbol("#s24"))
      GenSym(6) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(7) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(10)
      #s25 = GenSym(11) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 67:
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      #s24 = (Base.lt_float)(1.0,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool
      goto 1
      0: 
      #s24 = false
      1: 
      unless #s24::Bool goto 2
      goto 3
      2: 
      (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,"mode is defined only when α > 1 and β > 1.")::ANY)::UNION{}
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 68:
      $(Expr(:boundscheck, false))
      ####_var0#7071#7179 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7071#7179 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(3),:value)::Float64,2.0))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7182 = GenSym(4)
      ##a2#7183 = GenSym(5)
      ##div_a#7184 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7182::Float64,##a2#7183::Float64))
      ####afactor#7082#7185 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7183::Float64))
      ####bfactor#7083#7186 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7182::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7183::Float64,##a2#7183::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7080#7088#7191 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7080#7088#7191 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7184::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  #s24::Bool
  ######a#7067#7069#7177::Tuple{}
  ######b#7068#7070#7178::Tuple{}
  ####_var0#7071#7179::Tuple{}
  ######types#7131#7176#7180::Tuple{Type{Float64}}
  ######types#7131#7176#7181::Tuple{Type{Float64}}
  ##a1#7182::Float64
  ##a2#7183::Float64
  ##div_a#7184::Float64
  ####afactor#7082#7185::Float64
  ####bfactor#7083#7186::Float64
  ########a#7072#7076#7084#7187::Tuple{}
  ########b#7073#7077#7085#7188::Tuple{}
  ########afactor#7074#7078#7086#7189::Float64
  ########bfactor#7075#7079#7087#7190::Float64
  ######_var0#7080#7088#7191::Tuple{}
  ######types#7081#7089#7192::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 66:
      NewvarNode(symbol("#s24"))
      GenSym(6) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(7) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(10)
      #s25 = GenSym(11) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 67:
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      #s24 = (Base.lt_float)(1.0,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool
      goto 1
      0: 
      #s24 = false
      1: 
      unless #s24::Bool goto 2
      goto 3
      2: 
      (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,"mode is defined only when α > 1 and β > 1.")::ANY)::UNION{}
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 68:
      $(Expr(:boundscheck, false))
      ####_var0#7071#7179 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7071#7179 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(3),:value)::Float64,2.0))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7182 = GenSym(4)
      ##a2#7183 = GenSym(5)
      ##div_a#7184 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7182::Float64,##a2#7183::Float64))
      ####afactor#7082#7185 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7183::Float64))
      ####bfactor#7083#7186 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7182::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7183::Float64,##a2#7183::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7080#7088#7191 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7080#7088#7191 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7184::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  #s24::Bool
  ######a#7067#7069#7177::Tuple{}
  ######b#7068#7070#7178::Tuple{}
  ####_var0#7071#7179::Tuple{}
  ######types#7131#7176#7180::Tuple{Type{Float64}}
  ######types#7131#7176#7181::Tuple{Type{Float64}}
  ##a1#7182::Float64
  ##a2#7183::Float64
  ##div_a#7184::Float64
  ####afactor#7082#7185::Float64
  ####bfactor#7083#7186::Float64
  ########a#7072#7076#7084#7187::Tuple{}
  ########b#7073#7077#7085#7188::Tuple{}
  ########afactor#7074#7078#7086#7189::Float64
  ########bfactor#7075#7079#7087#7190::Float64
  ######_var0#7080#7088#7191::Tuple{}
  ######types#7081#7089#7192::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 66:
      NewvarNode(symbol("#s24"))
      GenSym(6) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(7) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(10)
      #s25 = GenSym(11) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 67:
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      #s24 = (Base.lt_float)(1.0,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool
      goto 1
      0: 
      #s24 = false
      1: 
      unless #s24::Bool goto 2
      goto 3
      2: 
      (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,"mode is defined only when α > 1 and β > 1.")::ANY)::UNION{}
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 68:
      $(Expr(:boundscheck, false))
      ####_var0#7071#7179 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7071#7179 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(3),:value)::Float64,2.0))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7182 = GenSym(4)
      ##a2#7183 = GenSym(5)
      ##div_a#7184 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7182::Float64,##a2#7183::Float64))
      ####afactor#7082#7185 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7183::Float64))
      ####bfactor#7083#7186 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7182::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7183::Float64,##a2#7183::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7080#7088#7191 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7080#7088#7191 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7184::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 71:
      return (top(vect))((Distributions.mode)(d::Distributions.Beta{Float64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 71:
      return (top(vect))((Distributions.mode)(d::Distributions.Beta{Float64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 71:
      return (top(vect))((Distributions.mode)(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 71:
      return (top(vect))((Distributions.mode)(d::Distributions.Beta{Float64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 71:
      return (top(vect))((Distributions.mode)(d::Distributions.Beta{Float64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 71:
      return (top(vect))((Distributions.mode)(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 71:
      return (top(vect))((Distributions.mode)(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 71:
      return (top(vect))((Distributions.mode)(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 71:
      return (top(vect))((Distributions.mode)(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(31) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(32) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(33) = (top(ccall))((top(tuple))("qbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint,StatsFuns.Rmath.Cint)::SimpleVector,0.5,0,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0,GenSym(31),0,GenSym(32),0)::Float64
      return GenSym(33)
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(31) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(32) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(33) = (top(ccall))((top(tuple))("qbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint,StatsFuns.Rmath.Cint)::SimpleVector,0.5,0,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0,GenSym(31),0,GenSym(32),0)::Float64
      return GenSym(33)
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (Distributions.betainvcdf)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return GenSym(0)
  end::Float64

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(31) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(32) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(33) = (top(ccall))((top(tuple))("qbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint,StatsFuns.Rmath.Cint)::SimpleVector,0.5,0,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0,GenSym(31),0,GenSym(32),0)::Float64
      return GenSym(33)
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(31) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(32) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(33) = (top(ccall))((top(tuple))("qbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint,StatsFuns.Rmath.Cint)::SimpleVector,0.5,0,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0,GenSym(31),0,GenSym(32),0)::Float64
      return GenSym(33)
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (Distributions.betainvcdf)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return GenSym(0)
  end::Float64

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (Distributions.betainvcdf)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return GenSym(0)
  end::Float64

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (Distributions.betainvcdf)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return GenSym(0)
  end::Float64

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (Distributions.betainvcdf)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return GenSym(0)
  end::Float64




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64
  ##xs#7197::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 85:
      NewvarNode(:s)
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 86:
      unless (Base.eq_float)(α::Float64,β::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 87:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 89:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 90:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.box)(Base.Float64,(Base.sub_float)(β::Float64,α::Float64)))),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0))))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64))))::Float64))))
      1: 
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64
  ##xs#7197::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 85:
      NewvarNode(:s)
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 86:
      unless (Base.eq_float)(α::Float64,β::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 87:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 89:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 90:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.box)(Base.Float64,(Base.sub_float)(β::Float64,α::Float64)))),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0))))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64))))::Float64))))
      1: 
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  _var0::Bool
  ######a#7067#7069#7227::Tuple{}
  ######b#7068#7070#7228::Tuple{}
  ####_var0#7071#7229::Tuple{}
  ##a1#7230::Float64
  ##a2#7231::Float64
  ######a#7072#7111#7232::Tuple{}
  ######b#7073#7112#7233::Tuple{}
  ######afactor#7074#7113#7234::Float64
  ######bfactor#7075#7114#7235::Float64
  ####_var0#7115#7236::Tuple{}
  ##sqrt_a#7237::Float64
  ##deriv#7238::Float64
  ####G#7203#7239::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7204#7240::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7205#7241::Tuple{}
  ##########x#7118#7120#7124#7206#7242::Float64
  ########_var0#7121#7125#7207#7243::Tuple{}
  ######types#7131#7132#7244::Tuple{Type{Float64}}
  ##a1#7245::Float64
  ##a2#7246::Float64
  ######a#7072#7111#7247::Tuple{}
  ######b#7073#7112#7248::Tuple{}
  ######afactor#7074#7113#7249::Float64
  ######bfactor#7075#7114#7250::Float64
  ####_var0#7115#7251::Tuple{}
  ######types#7131#7132#7252::Tuple{Type{Float64}}
  ##sqrt_a#7253::Float64
  ##deriv#7254::Float64
  ####G#7203#7255::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7204#7256::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7205#7257::Tuple{}
  ##########x#7118#7120#7124#7206#7258::Float64
  ########_var0#7121#7125#7207#7259::Tuple{}
  ######a#7198#7200#7260::Tuple{}
  ######b#7199#7201#7261::Tuple{}
  ####_var0#7202#7262::Tuple{}
  ##xs#7263::Tuple{}
  ##########tup#7117#7208#7212#7216#7264::Tuple{}
  ##########x#7118#7209#7213#7217#7265::Float64
  ########_var0#7210#7214#7218#7266::Tuple{}
  ##########types#7131#7211#7215#7219#7267::Tuple{Type{Float64}}
  ####a1#7220#7268::Float64
  ####a2#7221#7269::Float64
  ########a#7072#7111#7222#7270::Tuple{}
  ########b#7073#7112#7223#7271::Tuple{}
  ########afactor#7074#7113#7224#7272::Float64
  ########bfactor#7075#7114#7225#7273::Float64
  ######_var0#7115#7226#7274::Tuple{}
  ##a1#7275::Float64
  ##a2#7276::Float64
  ##div_a#7277::Float64
  ####afactor#7082#7278::Float64
  ####bfactor#7083#7279::Float64
  ########a#7072#7076#7084#7280::Tuple{}
  ########b#7073#7077#7085#7281::Tuple{}
  ########afactor#7074#7078#7086#7282::Float64
  ########bfactor#7075#7079#7087#7283::Float64
  ######_var0#7080#7088#7284::Tuple{}
  ######types#7081#7089#7285::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 85:
      NewvarNode(:s)
      GenSym(16) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 86:
      unless (Base.eq_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 7
      _var0 = (top(getfield))((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 8
      7: 
      _var0 = false
      8: 
      unless _var0::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 87:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 89:
      $(Expr(:boundscheck, false))
      ####_var0#7071#7229 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7071#7229 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 90:
      $(Expr(:boundscheck, false))
      ####_var0#7202#7262 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7202#7262 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##sqrt_a#7253 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7254 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7253::Float64))
      ####G#7203#7255 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7207#7259 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7121#7125#7207#7259 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7253::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7210#7214#7218#7266 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7210#7214#7218#7266 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ####a1#7220#7268 = GenSym(10)
      ####a2#7221#7269 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7115#7226#7274 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7115#7226#7274 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7220#7268::Float64,####a2#7221#7269::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7230 = GenSym(3)
      ##a2#7231 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7236 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7115#7236 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7230::Float64,##a2#7231::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7237 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(5),:value)::Float64)::ANY)::Float64
      ##deriv#7238 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7237::Float64))
      ####G#7203#7239 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7207#7243 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7121#7125#7207#7243 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7237::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7245 = GenSym(7)
      ##a2#7246 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7251 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7115#7251 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7245::Float64,##a2#7246::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(14) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7275 = GenSym(14)
      ##a2#7276 = GenSym(15)
      ##div_a#7277 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7275::Float64,##a2#7276::Float64))
      ####afactor#7082#7278 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7276::Float64))
      ####bfactor#7083#7279 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7275::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7276::Float64,##a2#7276::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7080#7088#7284 = (top(tuple))()::Tuple{}
      goto 27
      ######_var0#7080#7088#7284 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7277::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64
  ##xs#7197::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 85:
      NewvarNode(:s)
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 86:
      unless (Base.eq_float)(α::Float64,β::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 87:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 89:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 90:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.box)(Base.Float64,(Base.sub_float)(β::Float64,α::Float64)))),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0))))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64))))::Float64))))
      1: 
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64
  ##xs#7197::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 85:
      NewvarNode(:s)
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 86:
      unless (Base.eq_float)(α::Float64,β::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 87:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 89:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 90:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.box)(Base.Float64,(Base.sub_float)(β::Float64,α::Float64)))),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0))))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64))))::Float64))))
      1: 
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  _var0::Bool
  ######a#7067#7069#7227::Tuple{}
  ######b#7068#7070#7228::Tuple{}
  ####_var0#7071#7229::Tuple{}
  ##a1#7230::Float64
  ##a2#7231::Float64
  ######a#7072#7111#7232::Tuple{}
  ######b#7073#7112#7233::Tuple{}
  ######afactor#7074#7113#7234::Float64
  ######bfactor#7075#7114#7235::Float64
  ####_var0#7115#7236::Tuple{}
  ##sqrt_a#7237::Float64
  ##deriv#7238::Float64
  ####G#7203#7239::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7204#7240::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7205#7241::Tuple{}
  ##########x#7118#7120#7124#7206#7242::Float64
  ########_var0#7121#7125#7207#7243::Tuple{}
  ######types#7131#7132#7244::Tuple{Type{Float64}}
  ##a1#7245::Float64
  ##a2#7246::Float64
  ######a#7072#7111#7247::Tuple{}
  ######b#7073#7112#7248::Tuple{}
  ######afactor#7074#7113#7249::Float64
  ######bfactor#7075#7114#7250::Float64
  ####_var0#7115#7251::Tuple{}
  ######types#7131#7132#7252::Tuple{Type{Float64}}
  ##sqrt_a#7253::Float64
  ##deriv#7254::Float64
  ####G#7203#7255::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7204#7256::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7205#7257::Tuple{}
  ##########x#7118#7120#7124#7206#7258::Float64
  ########_var0#7121#7125#7207#7259::Tuple{}
  ######a#7198#7200#7260::Tuple{}
  ######b#7199#7201#7261::Tuple{}
  ####_var0#7202#7262::Tuple{}
  ##xs#7263::Tuple{}
  ##########tup#7117#7208#7212#7216#7264::Tuple{}
  ##########x#7118#7209#7213#7217#7265::Float64
  ########_var0#7210#7214#7218#7266::Tuple{}
  ##########types#7131#7211#7215#7219#7267::Tuple{Type{Float64}}
  ####a1#7220#7268::Float64
  ####a2#7221#7269::Float64
  ########a#7072#7111#7222#7270::Tuple{}
  ########b#7073#7112#7223#7271::Tuple{}
  ########afactor#7074#7113#7224#7272::Float64
  ########bfactor#7075#7114#7225#7273::Float64
  ######_var0#7115#7226#7274::Tuple{}
  ##a1#7275::Float64
  ##a2#7276::Float64
  ##div_a#7277::Float64
  ####afactor#7082#7278::Float64
  ####bfactor#7083#7279::Float64
  ########a#7072#7076#7084#7280::Tuple{}
  ########b#7073#7077#7085#7281::Tuple{}
  ########afactor#7074#7078#7086#7282::Float64
  ########bfactor#7075#7079#7087#7283::Float64
  ######_var0#7080#7088#7284::Tuple{}
  ######types#7081#7089#7285::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 85:
      NewvarNode(:s)
      GenSym(16) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 86:
      unless (Base.eq_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 7
      _var0 = (top(getfield))((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 8
      7: 
      _var0 = false
      8: 
      unless _var0::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 87:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 89:
      $(Expr(:boundscheck, false))
      ####_var0#7071#7229 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7071#7229 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 90:
      $(Expr(:boundscheck, false))
      ####_var0#7202#7262 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7202#7262 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##sqrt_a#7253 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7254 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7253::Float64))
      ####G#7203#7255 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7207#7259 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7121#7125#7207#7259 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7253::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7210#7214#7218#7266 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7210#7214#7218#7266 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ####a1#7220#7268 = GenSym(10)
      ####a2#7221#7269 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7115#7226#7274 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7115#7226#7274 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7220#7268::Float64,####a2#7221#7269::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7230 = GenSym(3)
      ##a2#7231 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7236 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7115#7236 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7230::Float64,##a2#7231::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7237 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(5),:value)::Float64)::ANY)::Float64
      ##deriv#7238 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7237::Float64))
      ####G#7203#7239 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7207#7243 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7121#7125#7207#7243 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7237::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7245 = GenSym(7)
      ##a2#7246 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7251 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7115#7251 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7245::Float64,##a2#7246::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(14) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7275 = GenSym(14)
      ##a2#7276 = GenSym(15)
      ##div_a#7277 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7275::Float64,##a2#7276::Float64))
      ####afactor#7082#7278 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7276::Float64))
      ####bfactor#7083#7279 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7275::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7276::Float64,##a2#7276::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7080#7088#7284 = (top(tuple))()::Tuple{}
      goto 27
      ######_var0#7080#7088#7284 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7277::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  _var0::Bool
  ######a#7067#7069#7227::Tuple{}
  ######b#7068#7070#7228::Tuple{}
  ####_var0#7071#7229::Tuple{}
  ##a1#7230::Float64
  ##a2#7231::Float64
  ######a#7072#7111#7232::Tuple{}
  ######b#7073#7112#7233::Tuple{}
  ######afactor#7074#7113#7234::Float64
  ######bfactor#7075#7114#7235::Float64
  ####_var0#7115#7236::Tuple{}
  ##sqrt_a#7237::Float64
  ##deriv#7238::Float64
  ####G#7203#7239::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7204#7240::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7205#7241::Tuple{}
  ##########x#7118#7120#7124#7206#7242::Float64
  ########_var0#7121#7125#7207#7243::Tuple{}
  ######types#7131#7132#7244::Tuple{Type{Float64}}
  ##a1#7245::Float64
  ##a2#7246::Float64
  ######a#7072#7111#7247::Tuple{}
  ######b#7073#7112#7248::Tuple{}
  ######afactor#7074#7113#7249::Float64
  ######bfactor#7075#7114#7250::Float64
  ####_var0#7115#7251::Tuple{}
  ######types#7131#7132#7252::Tuple{Type{Float64}}
  ##sqrt_a#7253::Float64
  ##deriv#7254::Float64
  ####G#7203#7255::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7204#7256::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7205#7257::Tuple{}
  ##########x#7118#7120#7124#7206#7258::Float64
  ########_var0#7121#7125#7207#7259::Tuple{}
  ######a#7198#7200#7260::Tuple{}
  ######b#7199#7201#7261::Tuple{}
  ####_var0#7202#7262::Tuple{}
  ##xs#7263::Tuple{}
  ##########tup#7117#7208#7212#7216#7264::Tuple{}
  ##########x#7118#7209#7213#7217#7265::Float64
  ########_var0#7210#7214#7218#7266::Tuple{}
  ##########types#7131#7211#7215#7219#7267::Tuple{Type{Float64}}
  ####a1#7220#7268::Float64
  ####a2#7221#7269::Float64
  ########a#7072#7111#7222#7270::Tuple{}
  ########b#7073#7112#7223#7271::Tuple{}
  ########afactor#7074#7113#7224#7272::Float64
  ########bfactor#7075#7114#7225#7273::Float64
  ######_var0#7115#7226#7274::Tuple{}
  ##a1#7275::Float64
  ##a2#7276::Float64
  ##div_a#7277::Float64
  ####afactor#7082#7278::Float64
  ####bfactor#7083#7279::Float64
  ########a#7072#7076#7084#7280::Tuple{}
  ########b#7073#7077#7085#7281::Tuple{}
  ########afactor#7074#7078#7086#7282::Float64
  ########bfactor#7075#7079#7087#7283::Float64
  ######_var0#7080#7088#7284::Tuple{}
  ######types#7081#7089#7285::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 85:
      NewvarNode(:s)
      GenSym(16) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 86:
      unless (Base.eq_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 7
      _var0 = (top(getfield))((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 8
      7: 
      _var0 = false
      8: 
      unless _var0::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 87:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 89:
      $(Expr(:boundscheck, false))
      ####_var0#7071#7229 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7071#7229 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 90:
      $(Expr(:boundscheck, false))
      ####_var0#7202#7262 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7202#7262 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##sqrt_a#7253 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7254 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7253::Float64))
      ####G#7203#7255 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7207#7259 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7121#7125#7207#7259 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7253::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7210#7214#7218#7266 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7210#7214#7218#7266 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ####a1#7220#7268 = GenSym(10)
      ####a2#7221#7269 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7115#7226#7274 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7115#7226#7274 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7220#7268::Float64,####a2#7221#7269::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7230 = GenSym(3)
      ##a2#7231 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7236 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7115#7236 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7230::Float64,##a2#7231::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7237 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(5),:value)::Float64)::ANY)::Float64
      ##deriv#7238 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7237::Float64))
      ####G#7203#7239 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7207#7243 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7121#7125#7207#7243 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7237::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7245 = GenSym(7)
      ##a2#7246 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7251 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7115#7251 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7245::Float64,##a2#7246::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(14) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7275 = GenSym(14)
      ##a2#7276 = GenSym(15)
      ##div_a#7277 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7275::Float64,##a2#7276::Float64))
      ####afactor#7082#7278 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7276::Float64))
      ####bfactor#7083#7279 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7275::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7276::Float64,##a2#7276::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7080#7088#7284 = (top(tuple))()::Tuple{}
      goto 27
      ######_var0#7080#7088#7284 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7277::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  _var0::Bool
  ######a#7067#7069#7227::Tuple{}
  ######b#7068#7070#7228::Tuple{}
  ####_var0#7071#7229::Tuple{}
  ##a1#7230::Float64
  ##a2#7231::Float64
  ######a#7072#7111#7232::Tuple{}
  ######b#7073#7112#7233::Tuple{}
  ######afactor#7074#7113#7234::Float64
  ######bfactor#7075#7114#7235::Float64
  ####_var0#7115#7236::Tuple{}
  ##sqrt_a#7237::Float64
  ##deriv#7238::Float64
  ####G#7203#7239::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7204#7240::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7205#7241::Tuple{}
  ##########x#7118#7120#7124#7206#7242::Float64
  ########_var0#7121#7125#7207#7243::Tuple{}
  ######types#7131#7132#7244::Tuple{Type{Float64}}
  ##a1#7245::Float64
  ##a2#7246::Float64
  ######a#7072#7111#7247::Tuple{}
  ######b#7073#7112#7248::Tuple{}
  ######afactor#7074#7113#7249::Float64
  ######bfactor#7075#7114#7250::Float64
  ####_var0#7115#7251::Tuple{}
  ######types#7131#7132#7252::Tuple{Type{Float64}}
  ##sqrt_a#7253::Float64
  ##deriv#7254::Float64
  ####G#7203#7255::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7204#7256::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7205#7257::Tuple{}
  ##########x#7118#7120#7124#7206#7258::Float64
  ########_var0#7121#7125#7207#7259::Tuple{}
  ######a#7198#7200#7260::Tuple{}
  ######b#7199#7201#7261::Tuple{}
  ####_var0#7202#7262::Tuple{}
  ##xs#7263::Tuple{}
  ##########tup#7117#7208#7212#7216#7264::Tuple{}
  ##########x#7118#7209#7213#7217#7265::Float64
  ########_var0#7210#7214#7218#7266::Tuple{}
  ##########types#7131#7211#7215#7219#7267::Tuple{Type{Float64}}
  ####a1#7220#7268::Float64
  ####a2#7221#7269::Float64
  ########a#7072#7111#7222#7270::Tuple{}
  ########b#7073#7112#7223#7271::Tuple{}
  ########afactor#7074#7113#7224#7272::Float64
  ########bfactor#7075#7114#7225#7273::Float64
  ######_var0#7115#7226#7274::Tuple{}
  ##a1#7275::Float64
  ##a2#7276::Float64
  ##div_a#7277::Float64
  ####afactor#7082#7278::Float64
  ####bfactor#7083#7279::Float64
  ########a#7072#7076#7084#7280::Tuple{}
  ########b#7073#7077#7085#7281::Tuple{}
  ########afactor#7074#7078#7086#7282::Float64
  ########bfactor#7075#7079#7087#7283::Float64
  ######_var0#7080#7088#7284::Tuple{}
  ######types#7081#7089#7285::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 85:
      NewvarNode(:s)
      GenSym(16) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 86:
      unless (Base.eq_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 7
      _var0 = (top(getfield))((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 8
      7: 
      _var0 = false
      8: 
      unless _var0::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 87:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 89:
      $(Expr(:boundscheck, false))
      ####_var0#7071#7229 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7071#7229 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 90:
      $(Expr(:boundscheck, false))
      ####_var0#7202#7262 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7202#7262 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##sqrt_a#7253 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7254 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7253::Float64))
      ####G#7203#7255 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7207#7259 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7121#7125#7207#7259 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7253::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7210#7214#7218#7266 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7210#7214#7218#7266 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ####a1#7220#7268 = GenSym(10)
      ####a2#7221#7269 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7115#7226#7274 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7115#7226#7274 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7220#7268::Float64,####a2#7221#7269::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7230 = GenSym(3)
      ##a2#7231 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7236 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7115#7236 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7230::Float64,##a2#7231::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7237 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(5),:value)::Float64)::ANY)::Float64
      ##deriv#7238 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7237::Float64))
      ####G#7203#7239 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7207#7243 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7121#7125#7207#7243 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7237::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7245 = GenSym(7)
      ##a2#7246 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7251 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7115#7251 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7245::Float64,##a2#7246::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(14) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7275 = GenSym(14)
      ##a2#7276 = GenSym(15)
      ##div_a#7277 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7275::Float64,##a2#7276::Float64))
      ####afactor#7082#7278 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7276::Float64))
      ####bfactor#7083#7279 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7275::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7276::Float64,##a2#7276::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7080#7088#7284 = (top(tuple))()::Tuple{}
      goto 27
      ######_var0#7080#7088#7284 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7277::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  _var0::Bool
  ######a#7067#7069#7227::Tuple{}
  ######b#7068#7070#7228::Tuple{}
  ####_var0#7071#7229::Tuple{}
  ##a1#7230::Float64
  ##a2#7231::Float64
  ######a#7072#7111#7232::Tuple{}
  ######b#7073#7112#7233::Tuple{}
  ######afactor#7074#7113#7234::Float64
  ######bfactor#7075#7114#7235::Float64
  ####_var0#7115#7236::Tuple{}
  ##sqrt_a#7237::Float64
  ##deriv#7238::Float64
  ####G#7203#7239::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7204#7240::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7205#7241::Tuple{}
  ##########x#7118#7120#7124#7206#7242::Float64
  ########_var0#7121#7125#7207#7243::Tuple{}
  ######types#7131#7132#7244::Tuple{Type{Float64}}
  ##a1#7245::Float64
  ##a2#7246::Float64
  ######a#7072#7111#7247::Tuple{}
  ######b#7073#7112#7248::Tuple{}
  ######afactor#7074#7113#7249::Float64
  ######bfactor#7075#7114#7250::Float64
  ####_var0#7115#7251::Tuple{}
  ######types#7131#7132#7252::Tuple{Type{Float64}}
  ##sqrt_a#7253::Float64
  ##deriv#7254::Float64
  ####G#7203#7255::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7204#7256::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7205#7257::Tuple{}
  ##########x#7118#7120#7124#7206#7258::Float64
  ########_var0#7121#7125#7207#7259::Tuple{}
  ######a#7198#7200#7260::Tuple{}
  ######b#7199#7201#7261::Tuple{}
  ####_var0#7202#7262::Tuple{}
  ##xs#7263::Tuple{}
  ##########tup#7117#7208#7212#7216#7264::Tuple{}
  ##########x#7118#7209#7213#7217#7265::Float64
  ########_var0#7210#7214#7218#7266::Tuple{}
  ##########types#7131#7211#7215#7219#7267::Tuple{Type{Float64}}
  ####a1#7220#7268::Float64
  ####a2#7221#7269::Float64
  ########a#7072#7111#7222#7270::Tuple{}
  ########b#7073#7112#7223#7271::Tuple{}
  ########afactor#7074#7113#7224#7272::Float64
  ########bfactor#7075#7114#7225#7273::Float64
  ######_var0#7115#7226#7274::Tuple{}
  ##a1#7275::Float64
  ##a2#7276::Float64
  ##div_a#7277::Float64
  ####afactor#7082#7278::Float64
  ####bfactor#7083#7279::Float64
  ########a#7072#7076#7084#7280::Tuple{}
  ########b#7073#7077#7085#7281::Tuple{}
  ########afactor#7074#7078#7086#7282::Float64
  ########bfactor#7075#7079#7087#7283::Float64
  ######_var0#7080#7088#7284::Tuple{}
  ######types#7081#7089#7285::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 85:
      NewvarNode(:s)
      GenSym(16) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 86:
      unless (Base.eq_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 7
      _var0 = (top(getfield))((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 8
      7: 
      _var0 = false
      8: 
      unless _var0::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 87:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 89:
      $(Expr(:boundscheck, false))
      ####_var0#7071#7229 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7071#7229 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 90:
      $(Expr(:boundscheck, false))
      ####_var0#7202#7262 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7202#7262 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##sqrt_a#7253 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7254 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7253::Float64))
      ####G#7203#7255 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7207#7259 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7121#7125#7207#7259 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7253::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7210#7214#7218#7266 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7210#7214#7218#7266 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ####a1#7220#7268 = GenSym(10)
      ####a2#7221#7269 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7115#7226#7274 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7115#7226#7274 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7220#7268::Float64,####a2#7221#7269::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7230 = GenSym(3)
      ##a2#7231 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7236 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7115#7236 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7230::Float64,##a2#7231::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7237 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(5),:value)::Float64)::ANY)::Float64
      ##deriv#7238 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7237::Float64))
      ####G#7203#7239 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7207#7243 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7121#7125#7207#7243 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7237::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7245 = GenSym(7)
      ##a2#7246 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7251 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7115#7251 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7245::Float64,##a2#7246::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(14) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7275 = GenSym(14)
      ##a2#7276 = GenSym(15)
      ##div_a#7277 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7275::Float64,##a2#7276::Float64))
      ####afactor#7082#7278 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7276::Float64))
      ####bfactor#7083#7279 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7275::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7276::Float64,##a2#7276::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7080#7088#7284 = (top(tuple))()::Tuple{}
      goto 27
      ######_var0#7080#7088#7284 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7277::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64
  p::Float64
  ##xs#7286::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 95:
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(6) = GenSym(4)
      GenSym(7) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(6)
      #s25 = GenSym(7)
      GenSym(8) = GenSym(5)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(8)
      #s25 = GenSym(9) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 96:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 97:
      p = (Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 98:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(α::Float64,β::Float64))
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(6.0,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),GenSym(3))),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0)))),(Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)))))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)))),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,3.0))))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64
  p::Float64
  ##xs#7286::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 95:
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(6) = GenSym(4)
      GenSym(7) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(6)
      #s25 = GenSym(7)
      GenSym(8) = GenSym(5)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(8)
      #s25 = GenSym(9) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 96:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 97:
      p = (Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 98:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(α::Float64,β::Float64))
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(6.0,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),GenSym(3))),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0)))),(Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)))))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)))),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,3.0))))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7067#7069#7301::Tuple{}
  ######b#7068#7070#7302::Tuple{}
  ####_var0#7071#7303::Tuple{}
  ##a1#7304::Float64
  ##a2#7305::Float64
  ######a#7072#7111#7306::Tuple{}
  ######b#7073#7112#7307::Tuple{}
  ######afactor#7074#7113#7308::Float64
  ######bfactor#7075#7114#7309::Float64
  ####_var0#7115#7310::Tuple{}
  ######types#7131#7132#7311::Tuple{Type{Float64}}
  ######types#7131#7132#7312::Tuple{Type{Float64}}
  ##xs#7313::Tuple{}
  ####a1#7287#7314::Float64
  ####a2#7288#7315::Float64
  ########a#7072#7111#7289#7316::Tuple{}
  ########b#7073#7112#7290#7317::Tuple{}
  ########afactor#7074#7113#7291#7318::Float64
  ########bfactor#7075#7114#7292#7319::Float64
  ######_var0#7115#7293#7320::Tuple{}
  ####a1#7294#7321::Float64
  ####a2#7295#7322::Float64
  ########a#7072#7111#7296#7323::Tuple{}
  ########b#7073#7112#7297#7324::Tuple{}
  ########afactor#7074#7113#7298#7325::Float64
  ########bfactor#7075#7114#7299#7326::Float64
  ######_var0#7115#7300#7327::Tuple{}
  ######types#7131#7132#7328::Tuple{Type{Float64}}
  ##a1#7329::Float64
  ##a2#7330::Float64
  ######a#7072#7111#7331::Tuple{}
  ######b#7073#7112#7332::Tuple{}
  ######afactor#7074#7113#7333::Float64
  ######bfactor#7075#7114#7334::Float64
  ####_var0#7115#7335::Tuple{}
  ######types#7131#7132#7336::Tuple{Type{Float64}}
  ######a#7198#7200#7337::Tuple{}
  ######b#7199#7201#7338::Tuple{}
  ####_var0#7202#7339::Tuple{}
  ##a#7340::Float64
  ####G#7126#7341::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7127#7342::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7128#7343::Tuple{}
  ##########x#7118#7120#7124#7129#7344::Float64
  ########_var0#7121#7125#7130#7345::Tuple{}
  ##a1#7346::Float64
  ##a2#7347::Float64
  ######a#7072#7111#7348::Tuple{}
  ######b#7073#7112#7349::Tuple{}
  ######afactor#7074#7113#7350::Float64
  ######bfactor#7075#7114#7351::Float64
  ####_var0#7115#7352::Tuple{}
  ######a#7198#7200#7353::Tuple{}
  ######b#7199#7201#7354::Tuple{}
  ####_var0#7202#7355::Tuple{}
  ########tup#7117#7208#7212#7356::Tuple{}
  ########x#7118#7209#7213#7357::Float64
  ######_var0#7210#7214#7358::Tuple{}
  ########types#7131#7211#7215#7359::Tuple{Type{Float64}}
  ##a1#7360::Float64
  ##a2#7361::Float64
  ##div_a#7362::Float64
  ####afactor#7082#7363::Float64
  ####bfactor#7083#7364::Float64
  ########a#7072#7076#7084#7365::Tuple{}
  ########b#7073#7077#7085#7366::Tuple{}
  ########afactor#7074#7078#7086#7367::Float64
  ########bfactor#7075#7079#7087#7368::Float64
  ######_var0#7080#7088#7369::Tuple{}
  ######types#7081#7089#7370::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 95:
      GenSym(20) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(22) = GenSym(20)
      GenSym(23) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(22)
      #s25 = GenSym(23)
      GenSym(24) = GenSym(21)
      GenSym(25) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(24)
      #s25 = GenSym(25) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 96:
      $(Expr(:boundscheck, false))
      ####_var0#7071#7303 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7071#7303 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 97:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7304 = GenSym(3)
      ##a2#7305 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7310 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7115#7310 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      p = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7304::Float64,##a2#7305::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 98:
      $(Expr(:boundscheck, false))
      ####_var0#7202#7339 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7202#7339 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7340 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####G#7126#7341 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7130#7345 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7121#7125#7130#7345 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7340::Float64,##a#7340::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7346 = GenSym(13)
      ##a2#7347 = GenSym(14)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7352 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7115#7352 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7346::Float64,##a2#7347::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7329 = GenSym(10)
      ##a2#7330 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7335 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7115#7335 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7329::Float64,##a2#7330::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7202#7355 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7202#7355 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7210#7214#7358 = (top(tuple))()::Tuple{}
      goto 26
      ######_var0#7210#7214#7358 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(5) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7287#7314 = GenSym(5)
      ####a2#7288#7315 = GenSym(6)
      $(Expr(:boundscheck, false))
      ######_var0#7115#7293#7320 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7115#7293#7320 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7287#7314::Float64,####a2#7288#7315::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7294#7321 = GenSym(8)
      ####a2#7295#7322 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7115#7300#7327 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7115#7300#7327 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(17) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7294#7321::Float64,####a2#7295#7322::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(15),:value)::Float64,(top(getfield))(GenSym(16),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(getfield))(GenSym(17),:value)::Float64
      ##a1#7360 = GenSym(18)
      ##a2#7361 = GenSym(19)
      ##div_a#7362 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7360::Float64,##a2#7361::Float64))
      ####afactor#7082#7363 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7361::Float64))
      ####bfactor#7083#7364 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7360::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7361::Float64,##a2#7361::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7080#7088#7369 = (top(tuple))()::Tuple{}
      goto 28
      ######_var0#7080#7088#7369 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7362::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64
  p::Float64
  ##xs#7286::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 95:
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(6) = GenSym(4)
      GenSym(7) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(6)
      #s25 = GenSym(7)
      GenSym(8) = GenSym(5)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(8)
      #s25 = GenSym(9) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 96:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 97:
      p = (Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 98:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(α::Float64,β::Float64))
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(6.0,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),GenSym(3))),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0)))),(Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)))))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)))),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,3.0))))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64
  p::Float64
  ##xs#7286::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 95:
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(6) = GenSym(4)
      GenSym(7) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(6)
      #s25 = GenSym(7)
      GenSym(8) = GenSym(5)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(8)
      #s25 = GenSym(9) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 96:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 97:
      p = (Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 98:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(α::Float64,β::Float64))
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(6.0,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),GenSym(3))),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0)))),(Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)))))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)))),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,3.0))))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7067#7069#7301::Tuple{}
  ######b#7068#7070#7302::Tuple{}
  ####_var0#7071#7303::Tuple{}
  ##a1#7304::Float64
  ##a2#7305::Float64
  ######a#7072#7111#7306::Tuple{}
  ######b#7073#7112#7307::Tuple{}
  ######afactor#7074#7113#7308::Float64
  ######bfactor#7075#7114#7309::Float64
  ####_var0#7115#7310::Tuple{}
  ######types#7131#7132#7311::Tuple{Type{Float64}}
  ######types#7131#7132#7312::Tuple{Type{Float64}}
  ##xs#7313::Tuple{}
  ####a1#7287#7314::Float64
  ####a2#7288#7315::Float64
  ########a#7072#7111#7289#7316::Tuple{}
  ########b#7073#7112#7290#7317::Tuple{}
  ########afactor#7074#7113#7291#7318::Float64
  ########bfactor#7075#7114#7292#7319::Float64
  ######_var0#7115#7293#7320::Tuple{}
  ####a1#7294#7321::Float64
  ####a2#7295#7322::Float64
  ########a#7072#7111#7296#7323::Tuple{}
  ########b#7073#7112#7297#7324::Tuple{}
  ########afactor#7074#7113#7298#7325::Float64
  ########bfactor#7075#7114#7299#7326::Float64
  ######_var0#7115#7300#7327::Tuple{}
  ######types#7131#7132#7328::Tuple{Type{Float64}}
  ##a1#7329::Float64
  ##a2#7330::Float64
  ######a#7072#7111#7331::Tuple{}
  ######b#7073#7112#7332::Tuple{}
  ######afactor#7074#7113#7333::Float64
  ######bfactor#7075#7114#7334::Float64
  ####_var0#7115#7335::Tuple{}
  ######types#7131#7132#7336::Tuple{Type{Float64}}
  ######a#7198#7200#7337::Tuple{}
  ######b#7199#7201#7338::Tuple{}
  ####_var0#7202#7339::Tuple{}
  ##a#7340::Float64
  ####G#7126#7341::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7127#7342::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7128#7343::Tuple{}
  ##########x#7118#7120#7124#7129#7344::Float64
  ########_var0#7121#7125#7130#7345::Tuple{}
  ##a1#7346::Float64
  ##a2#7347::Float64
  ######a#7072#7111#7348::Tuple{}
  ######b#7073#7112#7349::Tuple{}
  ######afactor#7074#7113#7350::Float64
  ######bfactor#7075#7114#7351::Float64
  ####_var0#7115#7352::Tuple{}
  ######a#7198#7200#7353::Tuple{}
  ######b#7199#7201#7354::Tuple{}
  ####_var0#7202#7355::Tuple{}
  ########tup#7117#7208#7212#7356::Tuple{}
  ########x#7118#7209#7213#7357::Float64
  ######_var0#7210#7214#7358::Tuple{}
  ########types#7131#7211#7215#7359::Tuple{Type{Float64}}
  ##a1#7360::Float64
  ##a2#7361::Float64
  ##div_a#7362::Float64
  ####afactor#7082#7363::Float64
  ####bfactor#7083#7364::Float64
  ########a#7072#7076#7084#7365::Tuple{}
  ########b#7073#7077#7085#7366::Tuple{}
  ########afactor#7074#7078#7086#7367::Float64
  ########bfactor#7075#7079#7087#7368::Float64
  ######_var0#7080#7088#7369::Tuple{}
  ######types#7081#7089#7370::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 95:
      GenSym(20) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(22) = GenSym(20)
      GenSym(23) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(22)
      #s25 = GenSym(23)
      GenSym(24) = GenSym(21)
      GenSym(25) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(24)
      #s25 = GenSym(25) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 96:
      $(Expr(:boundscheck, false))
      ####_var0#7071#7303 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7071#7303 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 97:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7304 = GenSym(3)
      ##a2#7305 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7310 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7115#7310 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      p = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7304::Float64,##a2#7305::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 98:
      $(Expr(:boundscheck, false))
      ####_var0#7202#7339 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7202#7339 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7340 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####G#7126#7341 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7130#7345 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7121#7125#7130#7345 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7340::Float64,##a#7340::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7346 = GenSym(13)
      ##a2#7347 = GenSym(14)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7352 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7115#7352 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7346::Float64,##a2#7347::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7329 = GenSym(10)
      ##a2#7330 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7335 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7115#7335 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7329::Float64,##a2#7330::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7202#7355 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7202#7355 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7210#7214#7358 = (top(tuple))()::Tuple{}
      goto 26
      ######_var0#7210#7214#7358 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(5) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7287#7314 = GenSym(5)
      ####a2#7288#7315 = GenSym(6)
      $(Expr(:boundscheck, false))
      ######_var0#7115#7293#7320 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7115#7293#7320 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7287#7314::Float64,####a2#7288#7315::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7294#7321 = GenSym(8)
      ####a2#7295#7322 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7115#7300#7327 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7115#7300#7327 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(17) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7294#7321::Float64,####a2#7295#7322::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(15),:value)::Float64,(top(getfield))(GenSym(16),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(getfield))(GenSym(17),:value)::Float64
      ##a1#7360 = GenSym(18)
      ##a2#7361 = GenSym(19)
      ##div_a#7362 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7360::Float64,##a2#7361::Float64))
      ####afactor#7082#7363 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7361::Float64))
      ####bfactor#7083#7364 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7360::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7361::Float64,##a2#7361::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7080#7088#7369 = (top(tuple))()::Tuple{}
      goto 28
      ######_var0#7080#7088#7369 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7362::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7067#7069#7301::Tuple{}
  ######b#7068#7070#7302::Tuple{}
  ####_var0#7071#7303::Tuple{}
  ##a1#7304::Float64
  ##a2#7305::Float64
  ######a#7072#7111#7306::Tuple{}
  ######b#7073#7112#7307::Tuple{}
  ######afactor#7074#7113#7308::Float64
  ######bfactor#7075#7114#7309::Float64
  ####_var0#7115#7310::Tuple{}
  ######types#7131#7132#7311::Tuple{Type{Float64}}
  ######types#7131#7132#7312::Tuple{Type{Float64}}
  ##xs#7313::Tuple{}
  ####a1#7287#7314::Float64
  ####a2#7288#7315::Float64
  ########a#7072#7111#7289#7316::Tuple{}
  ########b#7073#7112#7290#7317::Tuple{}
  ########afactor#7074#7113#7291#7318::Float64
  ########bfactor#7075#7114#7292#7319::Float64
  ######_var0#7115#7293#7320::Tuple{}
  ####a1#7294#7321::Float64
  ####a2#7295#7322::Float64
  ########a#7072#7111#7296#7323::Tuple{}
  ########b#7073#7112#7297#7324::Tuple{}
  ########afactor#7074#7113#7298#7325::Float64
  ########bfactor#7075#7114#7299#7326::Float64
  ######_var0#7115#7300#7327::Tuple{}
  ######types#7131#7132#7328::Tuple{Type{Float64}}
  ##a1#7329::Float64
  ##a2#7330::Float64
  ######a#7072#7111#7331::Tuple{}
  ######b#7073#7112#7332::Tuple{}
  ######afactor#7074#7113#7333::Float64
  ######bfactor#7075#7114#7334::Float64
  ####_var0#7115#7335::Tuple{}
  ######types#7131#7132#7336::Tuple{Type{Float64}}
  ######a#7198#7200#7337::Tuple{}
  ######b#7199#7201#7338::Tuple{}
  ####_var0#7202#7339::Tuple{}
  ##a#7340::Float64
  ####G#7126#7341::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7127#7342::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7128#7343::Tuple{}
  ##########x#7118#7120#7124#7129#7344::Float64
  ########_var0#7121#7125#7130#7345::Tuple{}
  ##a1#7346::Float64
  ##a2#7347::Float64
  ######a#7072#7111#7348::Tuple{}
  ######b#7073#7112#7349::Tuple{}
  ######afactor#7074#7113#7350::Float64
  ######bfactor#7075#7114#7351::Float64
  ####_var0#7115#7352::Tuple{}
  ######a#7198#7200#7353::Tuple{}
  ######b#7199#7201#7354::Tuple{}
  ####_var0#7202#7355::Tuple{}
  ########tup#7117#7208#7212#7356::Tuple{}
  ########x#7118#7209#7213#7357::Float64
  ######_var0#7210#7214#7358::Tuple{}
  ########types#7131#7211#7215#7359::Tuple{Type{Float64}}
  ##a1#7360::Float64
  ##a2#7361::Float64
  ##div_a#7362::Float64
  ####afactor#7082#7363::Float64
  ####bfactor#7083#7364::Float64
  ########a#7072#7076#7084#7365::Tuple{}
  ########b#7073#7077#7085#7366::Tuple{}
  ########afactor#7074#7078#7086#7367::Float64
  ########bfactor#7075#7079#7087#7368::Float64
  ######_var0#7080#7088#7369::Tuple{}
  ######types#7081#7089#7370::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 95:
      GenSym(20) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(22) = GenSym(20)
      GenSym(23) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(22)
      #s25 = GenSym(23)
      GenSym(24) = GenSym(21)
      GenSym(25) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(24)
      #s25 = GenSym(25) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 96:
      $(Expr(:boundscheck, false))
      ####_var0#7071#7303 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7071#7303 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 97:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7304 = GenSym(3)
      ##a2#7305 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7310 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7115#7310 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      p = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7304::Float64,##a2#7305::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 98:
      $(Expr(:boundscheck, false))
      ####_var0#7202#7339 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7202#7339 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7340 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####G#7126#7341 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7130#7345 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7121#7125#7130#7345 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7340::Float64,##a#7340::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7346 = GenSym(13)
      ##a2#7347 = GenSym(14)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7352 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7115#7352 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7346::Float64,##a2#7347::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7329 = GenSym(10)
      ##a2#7330 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7335 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7115#7335 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7329::Float64,##a2#7330::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7202#7355 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7202#7355 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7210#7214#7358 = (top(tuple))()::Tuple{}
      goto 26
      ######_var0#7210#7214#7358 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(5) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7287#7314 = GenSym(5)
      ####a2#7288#7315 = GenSym(6)
      $(Expr(:boundscheck, false))
      ######_var0#7115#7293#7320 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7115#7293#7320 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7287#7314::Float64,####a2#7288#7315::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7294#7321 = GenSym(8)
      ####a2#7295#7322 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7115#7300#7327 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7115#7300#7327 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(17) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7294#7321::Float64,####a2#7295#7322::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(15),:value)::Float64,(top(getfield))(GenSym(16),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(getfield))(GenSym(17),:value)::Float64
      ##a1#7360 = GenSym(18)
      ##a2#7361 = GenSym(19)
      ##div_a#7362 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7360::Float64,##a2#7361::Float64))
      ####afactor#7082#7363 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7361::Float64))
      ####bfactor#7083#7364 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7360::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7361::Float64,##a2#7361::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7080#7088#7369 = (top(tuple))()::Tuple{}
      goto 28
      ######_var0#7080#7088#7369 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7362::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7067#7069#7301::Tuple{}
  ######b#7068#7070#7302::Tuple{}
  ####_var0#7071#7303::Tuple{}
  ##a1#7304::Float64
  ##a2#7305::Float64
  ######a#7072#7111#7306::Tuple{}
  ######b#7073#7112#7307::Tuple{}
  ######afactor#7074#7113#7308::Float64
  ######bfactor#7075#7114#7309::Float64
  ####_var0#7115#7310::Tuple{}
  ######types#7131#7132#7311::Tuple{Type{Float64}}
  ######types#7131#7132#7312::Tuple{Type{Float64}}
  ##xs#7313::Tuple{}
  ####a1#7287#7314::Float64
  ####a2#7288#7315::Float64
  ########a#7072#7111#7289#7316::Tuple{}
  ########b#7073#7112#7290#7317::Tuple{}
  ########afactor#7074#7113#7291#7318::Float64
  ########bfactor#7075#7114#7292#7319::Float64
  ######_var0#7115#7293#7320::Tuple{}
  ####a1#7294#7321::Float64
  ####a2#7295#7322::Float64
  ########a#7072#7111#7296#7323::Tuple{}
  ########b#7073#7112#7297#7324::Tuple{}
  ########afactor#7074#7113#7298#7325::Float64
  ########bfactor#7075#7114#7299#7326::Float64
  ######_var0#7115#7300#7327::Tuple{}
  ######types#7131#7132#7328::Tuple{Type{Float64}}
  ##a1#7329::Float64
  ##a2#7330::Float64
  ######a#7072#7111#7331::Tuple{}
  ######b#7073#7112#7332::Tuple{}
  ######afactor#7074#7113#7333::Float64
  ######bfactor#7075#7114#7334::Float64
  ####_var0#7115#7335::Tuple{}
  ######types#7131#7132#7336::Tuple{Type{Float64}}
  ######a#7198#7200#7337::Tuple{}
  ######b#7199#7201#7338::Tuple{}
  ####_var0#7202#7339::Tuple{}
  ##a#7340::Float64
  ####G#7126#7341::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7127#7342::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7128#7343::Tuple{}
  ##########x#7118#7120#7124#7129#7344::Float64
  ########_var0#7121#7125#7130#7345::Tuple{}
  ##a1#7346::Float64
  ##a2#7347::Float64
  ######a#7072#7111#7348::Tuple{}
  ######b#7073#7112#7349::Tuple{}
  ######afactor#7074#7113#7350::Float64
  ######bfactor#7075#7114#7351::Float64
  ####_var0#7115#7352::Tuple{}
  ######a#7198#7200#7353::Tuple{}
  ######b#7199#7201#7354::Tuple{}
  ####_var0#7202#7355::Tuple{}
  ########tup#7117#7208#7212#7356::Tuple{}
  ########x#7118#7209#7213#7357::Float64
  ######_var0#7210#7214#7358::Tuple{}
  ########types#7131#7211#7215#7359::Tuple{Type{Float64}}
  ##a1#7360::Float64
  ##a2#7361::Float64
  ##div_a#7362::Float64
  ####afactor#7082#7363::Float64
  ####bfactor#7083#7364::Float64
  ########a#7072#7076#7084#7365::Tuple{}
  ########b#7073#7077#7085#7366::Tuple{}
  ########afactor#7074#7078#7086#7367::Float64
  ########bfactor#7075#7079#7087#7368::Float64
  ######_var0#7080#7088#7369::Tuple{}
  ######types#7081#7089#7370::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 95:
      GenSym(20) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(22) = GenSym(20)
      GenSym(23) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(22)
      #s25 = GenSym(23)
      GenSym(24) = GenSym(21)
      GenSym(25) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(24)
      #s25 = GenSym(25) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 96:
      $(Expr(:boundscheck, false))
      ####_var0#7071#7303 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7071#7303 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 97:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7304 = GenSym(3)
      ##a2#7305 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7310 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7115#7310 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      p = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7304::Float64,##a2#7305::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 98:
      $(Expr(:boundscheck, false))
      ####_var0#7202#7339 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7202#7339 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7340 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####G#7126#7341 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7130#7345 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7121#7125#7130#7345 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7340::Float64,##a#7340::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7346 = GenSym(13)
      ##a2#7347 = GenSym(14)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7352 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7115#7352 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7346::Float64,##a2#7347::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7329 = GenSym(10)
      ##a2#7330 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7335 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7115#7335 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7329::Float64,##a2#7330::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7202#7355 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7202#7355 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7210#7214#7358 = (top(tuple))()::Tuple{}
      goto 26
      ######_var0#7210#7214#7358 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(5) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7287#7314 = GenSym(5)
      ####a2#7288#7315 = GenSym(6)
      $(Expr(:boundscheck, false))
      ######_var0#7115#7293#7320 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7115#7293#7320 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7287#7314::Float64,####a2#7288#7315::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7294#7321 = GenSym(8)
      ####a2#7295#7322 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7115#7300#7327 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7115#7300#7327 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(17) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7294#7321::Float64,####a2#7295#7322::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(15),:value)::Float64,(top(getfield))(GenSym(16),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(getfield))(GenSym(17),:value)::Float64
      ##a1#7360 = GenSym(18)
      ##a2#7361 = GenSym(19)
      ##div_a#7362 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7360::Float64,##a2#7361::Float64))
      ####afactor#7082#7363 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7361::Float64))
      ####bfactor#7083#7364 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7360::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7361::Float64,##a2#7361::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7080#7088#7369 = (top(tuple))()::Tuple{}
      goto 28
      ######_var0#7080#7088#7369 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7362::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7067#7069#7301::Tuple{}
  ######b#7068#7070#7302::Tuple{}
  ####_var0#7071#7303::Tuple{}
  ##a1#7304::Float64
  ##a2#7305::Float64
  ######a#7072#7111#7306::Tuple{}
  ######b#7073#7112#7307::Tuple{}
  ######afactor#7074#7113#7308::Float64
  ######bfactor#7075#7114#7309::Float64
  ####_var0#7115#7310::Tuple{}
  ######types#7131#7132#7311::Tuple{Type{Float64}}
  ######types#7131#7132#7312::Tuple{Type{Float64}}
  ##xs#7313::Tuple{}
  ####a1#7287#7314::Float64
  ####a2#7288#7315::Float64
  ########a#7072#7111#7289#7316::Tuple{}
  ########b#7073#7112#7290#7317::Tuple{}
  ########afactor#7074#7113#7291#7318::Float64
  ########bfactor#7075#7114#7292#7319::Float64
  ######_var0#7115#7293#7320::Tuple{}
  ####a1#7294#7321::Float64
  ####a2#7295#7322::Float64
  ########a#7072#7111#7296#7323::Tuple{}
  ########b#7073#7112#7297#7324::Tuple{}
  ########afactor#7074#7113#7298#7325::Float64
  ########bfactor#7075#7114#7299#7326::Float64
  ######_var0#7115#7300#7327::Tuple{}
  ######types#7131#7132#7328::Tuple{Type{Float64}}
  ##a1#7329::Float64
  ##a2#7330::Float64
  ######a#7072#7111#7331::Tuple{}
  ######b#7073#7112#7332::Tuple{}
  ######afactor#7074#7113#7333::Float64
  ######bfactor#7075#7114#7334::Float64
  ####_var0#7115#7335::Tuple{}
  ######types#7131#7132#7336::Tuple{Type{Float64}}
  ######a#7198#7200#7337::Tuple{}
  ######b#7199#7201#7338::Tuple{}
  ####_var0#7202#7339::Tuple{}
  ##a#7340::Float64
  ####G#7126#7341::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7127#7342::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7128#7343::Tuple{}
  ##########x#7118#7120#7124#7129#7344::Float64
  ########_var0#7121#7125#7130#7345::Tuple{}
  ##a1#7346::Float64
  ##a2#7347::Float64
  ######a#7072#7111#7348::Tuple{}
  ######b#7073#7112#7349::Tuple{}
  ######afactor#7074#7113#7350::Float64
  ######bfactor#7075#7114#7351::Float64
  ####_var0#7115#7352::Tuple{}
  ######a#7198#7200#7353::Tuple{}
  ######b#7199#7201#7354::Tuple{}
  ####_var0#7202#7355::Tuple{}
  ########tup#7117#7208#7212#7356::Tuple{}
  ########x#7118#7209#7213#7357::Float64
  ######_var0#7210#7214#7358::Tuple{}
  ########types#7131#7211#7215#7359::Tuple{Type{Float64}}
  ##a1#7360::Float64
  ##a2#7361::Float64
  ##div_a#7362::Float64
  ####afactor#7082#7363::Float64
  ####bfactor#7083#7364::Float64
  ########a#7072#7076#7084#7365::Tuple{}
  ########b#7073#7077#7085#7366::Tuple{}
  ########afactor#7074#7078#7086#7367::Float64
  ########bfactor#7075#7079#7087#7368::Float64
  ######_var0#7080#7088#7369::Tuple{}
  ######types#7081#7089#7370::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 95:
      GenSym(20) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(22) = GenSym(20)
      GenSym(23) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(22)
      #s25 = GenSym(23)
      GenSym(24) = GenSym(21)
      GenSym(25) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(24)
      #s25 = GenSym(25) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 96:
      $(Expr(:boundscheck, false))
      ####_var0#7071#7303 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7071#7303 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 97:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7304 = GenSym(3)
      ##a2#7305 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7310 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7115#7310 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      p = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7304::Float64,##a2#7305::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 98:
      $(Expr(:boundscheck, false))
      ####_var0#7202#7339 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7202#7339 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7340 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####G#7126#7341 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7130#7345 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7121#7125#7130#7345 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7340::Float64,##a#7340::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7346 = GenSym(13)
      ##a2#7347 = GenSym(14)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7352 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7115#7352 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7346::Float64,##a2#7347::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7329 = GenSym(10)
      ##a2#7330 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7335 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7115#7335 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7329::Float64,##a2#7330::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7202#7355 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7202#7355 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7210#7214#7358 = (top(tuple))()::Tuple{}
      goto 26
      ######_var0#7210#7214#7358 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(5) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7287#7314 = GenSym(5)
      ####a2#7288#7315 = GenSym(6)
      $(Expr(:boundscheck, false))
      ######_var0#7115#7293#7320 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7115#7293#7320 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7287#7314::Float64,####a2#7288#7315::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7294#7321 = GenSym(8)
      ####a2#7295#7322 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7115#7300#7327 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7115#7300#7327 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(17) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7294#7321::Float64,####a2#7295#7322::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(15),:value)::Float64,(top(getfield))(GenSym(16),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(getfield))(GenSym(17),:value)::Float64
      ##a1#7360 = GenSym(18)
      ##a2#7361 = GenSym(19)
      ##div_a#7362 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7360::Float64,##a2#7361::Float64))
      ####afactor#7082#7363 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7361::Float64))
      ####bfactor#7083#7364 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7360::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7361::Float64,##a2#7361::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7080#7088#7369 = (top(tuple))()::Tuple{}
      goto 28
      ######_var0#7080#7088#7369 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7362::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 102:
      GenSym(13) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(14) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 103:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 104:
      GenSym(12) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,α::Float64,0)::Float64
      GenSym(10) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,β::Float64,0)::Float64
      GenSym(6) = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))
      GenSym(8) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(5) = (Distributions.digamma)(α::Float64)::Float64
      GenSym(4) = (Distributions.digamma)(β::Float64)::Float64
      GenSym(3) = (Distributions.digamma)(s::Float64)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.Math.nan_dom_err)(GenSym(12),α::Float64)::Float64,(Base.Math.nan_dom_err)(GenSym(10),β::Float64)::Float64)),(Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),GenSym(5))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(β::Float64,1.0)),GenSym(4))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(s::Float64,2.0)),GenSym(3)))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 102:
      GenSym(13) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(14) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 103:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 104:
      GenSym(12) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,α::Float64,0)::Float64
      GenSym(10) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,β::Float64,0)::Float64
      GenSym(6) = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))
      GenSym(8) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(5) = (Distributions.digamma)(α::Float64)::Float64
      GenSym(4) = (Distributions.digamma)(β::Float64)::Float64
      GenSym(3) = (Distributions.digamma)(s::Float64)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.Math.nan_dom_err)(GenSym(12),α::Float64)::Float64,(Base.Math.nan_dom_err)(GenSym(10),β::Float64)::Float64)),(Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),GenSym(5))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(β::Float64,1.0)),GenSym(4))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(s::Float64,2.0)),GenSym(3)))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7067#7069#7413::Tuple{}
  ######b#7068#7070#7414::Tuple{}
  ####_var0#7071#7415::Tuple{}
  ##a#7416::Float64
  ####G#7408#7417::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7409#7418::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7410#7419::Tuple{}
  ##########x#7118#7120#7124#7411#7420::Float64
  ########_var0#7121#7125#7412#7421::Tuple{}
  ######types#7131#7176#7422::Tuple{Type{Float64}}
  ##a1#7423::Float64
  ##a2#7424::Float64
  ######a#7072#7111#7425::Tuple{}
  ######b#7073#7112#7426::Tuple{}
  ######afactor#7074#7113#7427::Float64
  ######bfactor#7075#7114#7428::Float64
  ####_var0#7115#7429::Tuple{}
  ##a#7430::Float64
  ####G#7408#7431::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7409#7432::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7410#7433::Tuple{}
  ##########x#7118#7120#7124#7411#7434::Float64
  ########_var0#7121#7125#7412#7435::Tuple{}
  ######types#7131#7176#7436::Tuple{Type{Float64}}
  ##a1#7437::Float64
  ##a2#7438::Float64
  ######a#7072#7111#7439::Tuple{}
  ######b#7073#7112#7440::Tuple{}
  ######afactor#7074#7113#7441::Float64
  ######bfactor#7075#7114#7442::Float64
  ####_var0#7115#7443::Tuple{}
  ##a#7444::Float64
  ####G#7408#7445::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7409#7446::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7410#7447::Tuple{}
  ##########x#7118#7120#7124#7411#7448::Float64
  ########_var0#7121#7125#7412#7449::Tuple{}
  ######types#7131#7176#7450::Tuple{Type{Float64}}
  ##a1#7451::Float64
  ##a2#7452::Float64
  ######a#7072#7111#7453::Tuple{}
  ######b#7073#7112#7454::Tuple{}
  ######afactor#7074#7113#7455::Float64
  ######bfactor#7075#7114#7456::Float64
  ####_var0#7115#7457::Tuple{}
  ######a#7198#7200#7458::Tuple{}
  ######b#7199#7201#7459::Tuple{}
  ####_var0#7202#7460::Tuple{}
  ######a#7198#7200#7461::Tuple{}
  ######b#7199#7201#7462::Tuple{}
  ####_var0#7202#7463::Tuple{}
  ######a#7067#7069#7464::Tuple{}
  ######b#7068#7070#7465::Tuple{}
  ####_var0#7071#7466::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 102:
      GenSym(16) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 103:
      $(Expr(:boundscheck, false))
      ####_var0#7071#7415 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7071#7415 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 104:
      GenSym(12) = (Distributions.lbeta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7444 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (ForwardDiff.digamma)(##a#7444::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7444::Float64)::Float64
      ####G#7408#7445 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7412#7449 = (top(tuple))()::Tuple{}
      goto 17
      ########_var0#7121#7125#7412#7449 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(9), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7451 = GenSym(10)
      ##a2#7452 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7457 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7115#7457 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7451::Float64,##a2#7452::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7202#7460 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7202#7460 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##a#7430 = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (ForwardDiff.digamma)(##a#7430::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7430::Float64)::Float64
      ####G#7408#7431 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7412#7435 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7121#7125#7412#7435 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(6), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7437 = GenSym(7)
      ##a2#7438 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7443 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7115#7443 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7437::Float64,##a2#7438::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7202#7463 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7202#7463 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7416 = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7416::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7416::Float64)::Float64
      ####G#7408#7417 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7412#7421 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7121#7125#7412#7421 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(3), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7423 = GenSym(4)
      ##a2#7424 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7429 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7115#7429 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7423::Float64,##a2#7424::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7071#7466 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7071#7466 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(12),:value)::Float64,(top(getfield))(GenSym(13),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(14),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 102:
      GenSym(13) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(14) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 103:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 104:
      GenSym(12) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,α::Float64,0)::Float64
      GenSym(10) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,β::Float64,0)::Float64
      GenSym(6) = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))
      GenSym(8) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(5) = (Distributions.digamma)(α::Float64)::Float64
      GenSym(4) = (Distributions.digamma)(β::Float64)::Float64
      GenSym(3) = (Distributions.digamma)(s::Float64)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.Math.nan_dom_err)(GenSym(12),α::Float64)::Float64,(Base.Math.nan_dom_err)(GenSym(10),β::Float64)::Float64)),(Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),GenSym(5))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(β::Float64,1.0)),GenSym(4))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(s::Float64,2.0)),GenSym(3)))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 102:
      GenSym(13) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(14) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 103:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 104:
      GenSym(12) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,α::Float64,0)::Float64
      GenSym(10) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,β::Float64,0)::Float64
      GenSym(6) = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))
      GenSym(8) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(5) = (Distributions.digamma)(α::Float64)::Float64
      GenSym(4) = (Distributions.digamma)(β::Float64)::Float64
      GenSym(3) = (Distributions.digamma)(s::Float64)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.Math.nan_dom_err)(GenSym(12),α::Float64)::Float64,(Base.Math.nan_dom_err)(GenSym(10),β::Float64)::Float64)),(Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),GenSym(5))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(β::Float64,1.0)),GenSym(4))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(s::Float64,2.0)),GenSym(3)))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7067#7069#7413::Tuple{}
  ######b#7068#7070#7414::Tuple{}
  ####_var0#7071#7415::Tuple{}
  ##a#7416::Float64
  ####G#7408#7417::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7409#7418::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7410#7419::Tuple{}
  ##########x#7118#7120#7124#7411#7420::Float64
  ########_var0#7121#7125#7412#7421::Tuple{}
  ######types#7131#7176#7422::Tuple{Type{Float64}}
  ##a1#7423::Float64
  ##a2#7424::Float64
  ######a#7072#7111#7425::Tuple{}
  ######b#7073#7112#7426::Tuple{}
  ######afactor#7074#7113#7427::Float64
  ######bfactor#7075#7114#7428::Float64
  ####_var0#7115#7429::Tuple{}
  ##a#7430::Float64
  ####G#7408#7431::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7409#7432::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7410#7433::Tuple{}
  ##########x#7118#7120#7124#7411#7434::Float64
  ########_var0#7121#7125#7412#7435::Tuple{}
  ######types#7131#7176#7436::Tuple{Type{Float64}}
  ##a1#7437::Float64
  ##a2#7438::Float64
  ######a#7072#7111#7439::Tuple{}
  ######b#7073#7112#7440::Tuple{}
  ######afactor#7074#7113#7441::Float64
  ######bfactor#7075#7114#7442::Float64
  ####_var0#7115#7443::Tuple{}
  ##a#7444::Float64
  ####G#7408#7445::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7409#7446::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7410#7447::Tuple{}
  ##########x#7118#7120#7124#7411#7448::Float64
  ########_var0#7121#7125#7412#7449::Tuple{}
  ######types#7131#7176#7450::Tuple{Type{Float64}}
  ##a1#7451::Float64
  ##a2#7452::Float64
  ######a#7072#7111#7453::Tuple{}
  ######b#7073#7112#7454::Tuple{}
  ######afactor#7074#7113#7455::Float64
  ######bfactor#7075#7114#7456::Float64
  ####_var0#7115#7457::Tuple{}
  ######a#7198#7200#7458::Tuple{}
  ######b#7199#7201#7459::Tuple{}
  ####_var0#7202#7460::Tuple{}
  ######a#7198#7200#7461::Tuple{}
  ######b#7199#7201#7462::Tuple{}
  ####_var0#7202#7463::Tuple{}
  ######a#7067#7069#7464::Tuple{}
  ######b#7068#7070#7465::Tuple{}
  ####_var0#7071#7466::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 102:
      GenSym(16) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 103:
      $(Expr(:boundscheck, false))
      ####_var0#7071#7415 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7071#7415 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 104:
      GenSym(12) = (Distributions.lbeta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7444 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (ForwardDiff.digamma)(##a#7444::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7444::Float64)::Float64
      ####G#7408#7445 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7412#7449 = (top(tuple))()::Tuple{}
      goto 17
      ########_var0#7121#7125#7412#7449 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(9), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7451 = GenSym(10)
      ##a2#7452 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7457 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7115#7457 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7451::Float64,##a2#7452::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7202#7460 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7202#7460 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##a#7430 = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (ForwardDiff.digamma)(##a#7430::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7430::Float64)::Float64
      ####G#7408#7431 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7412#7435 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7121#7125#7412#7435 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(6), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7437 = GenSym(7)
      ##a2#7438 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7443 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7115#7443 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7437::Float64,##a2#7438::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7202#7463 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7202#7463 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7416 = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7416::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7416::Float64)::Float64
      ####G#7408#7417 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7412#7421 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7121#7125#7412#7421 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(3), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7423 = GenSym(4)
      ##a2#7424 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7429 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7115#7429 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7423::Float64,##a2#7424::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7071#7466 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7071#7466 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(12),:value)::Float64,(top(getfield))(GenSym(13),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(14),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7067#7069#7413::Tuple{}
  ######b#7068#7070#7414::Tuple{}
  ####_var0#7071#7415::Tuple{}
  ##a#7416::Float64
  ####G#7408#7417::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7409#7418::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7410#7419::Tuple{}
  ##########x#7118#7120#7124#7411#7420::Float64
  ########_var0#7121#7125#7412#7421::Tuple{}
  ######types#7131#7176#7422::Tuple{Type{Float64}}
  ##a1#7423::Float64
  ##a2#7424::Float64
  ######a#7072#7111#7425::Tuple{}
  ######b#7073#7112#7426::Tuple{}
  ######afactor#7074#7113#7427::Float64
  ######bfactor#7075#7114#7428::Float64
  ####_var0#7115#7429::Tuple{}
  ##a#7430::Float64
  ####G#7408#7431::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7409#7432::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7410#7433::Tuple{}
  ##########x#7118#7120#7124#7411#7434::Float64
  ########_var0#7121#7125#7412#7435::Tuple{}
  ######types#7131#7176#7436::Tuple{Type{Float64}}
  ##a1#7437::Float64
  ##a2#7438::Float64
  ######a#7072#7111#7439::Tuple{}
  ######b#7073#7112#7440::Tuple{}
  ######afactor#7074#7113#7441::Float64
  ######bfactor#7075#7114#7442::Float64
  ####_var0#7115#7443::Tuple{}
  ##a#7444::Float64
  ####G#7408#7445::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7409#7446::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7410#7447::Tuple{}
  ##########x#7118#7120#7124#7411#7448::Float64
  ########_var0#7121#7125#7412#7449::Tuple{}
  ######types#7131#7176#7450::Tuple{Type{Float64}}
  ##a1#7451::Float64
  ##a2#7452::Float64
  ######a#7072#7111#7453::Tuple{}
  ######b#7073#7112#7454::Tuple{}
  ######afactor#7074#7113#7455::Float64
  ######bfactor#7075#7114#7456::Float64
  ####_var0#7115#7457::Tuple{}
  ######a#7198#7200#7458::Tuple{}
  ######b#7199#7201#7459::Tuple{}
  ####_var0#7202#7460::Tuple{}
  ######a#7198#7200#7461::Tuple{}
  ######b#7199#7201#7462::Tuple{}
  ####_var0#7202#7463::Tuple{}
  ######a#7067#7069#7464::Tuple{}
  ######b#7068#7070#7465::Tuple{}
  ####_var0#7071#7466::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 102:
      GenSym(16) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 103:
      $(Expr(:boundscheck, false))
      ####_var0#7071#7415 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7071#7415 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 104:
      GenSym(12) = (Distributions.lbeta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7444 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (ForwardDiff.digamma)(##a#7444::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7444::Float64)::Float64
      ####G#7408#7445 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7412#7449 = (top(tuple))()::Tuple{}
      goto 17
      ########_var0#7121#7125#7412#7449 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(9), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7451 = GenSym(10)
      ##a2#7452 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7457 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7115#7457 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7451::Float64,##a2#7452::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7202#7460 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7202#7460 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##a#7430 = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (ForwardDiff.digamma)(##a#7430::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7430::Float64)::Float64
      ####G#7408#7431 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7412#7435 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7121#7125#7412#7435 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(6), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7437 = GenSym(7)
      ##a2#7438 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7443 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7115#7443 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7437::Float64,##a2#7438::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7202#7463 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7202#7463 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7416 = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7416::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7416::Float64)::Float64
      ####G#7408#7417 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7412#7421 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7121#7125#7412#7421 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(3), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7423 = GenSym(4)
      ##a2#7424 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7429 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7115#7429 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7423::Float64,##a2#7424::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7071#7466 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7071#7466 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(12),:value)::Float64,(top(getfield))(GenSym(13),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(14),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7067#7069#7413::Tuple{}
  ######b#7068#7070#7414::Tuple{}
  ####_var0#7071#7415::Tuple{}
  ##a#7416::Float64
  ####G#7408#7417::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7409#7418::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7410#7419::Tuple{}
  ##########x#7118#7120#7124#7411#7420::Float64
  ########_var0#7121#7125#7412#7421::Tuple{}
  ######types#7131#7176#7422::Tuple{Type{Float64}}
  ##a1#7423::Float64
  ##a2#7424::Float64
  ######a#7072#7111#7425::Tuple{}
  ######b#7073#7112#7426::Tuple{}
  ######afactor#7074#7113#7427::Float64
  ######bfactor#7075#7114#7428::Float64
  ####_var0#7115#7429::Tuple{}
  ##a#7430::Float64
  ####G#7408#7431::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7409#7432::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7410#7433::Tuple{}
  ##########x#7118#7120#7124#7411#7434::Float64
  ########_var0#7121#7125#7412#7435::Tuple{}
  ######types#7131#7176#7436::Tuple{Type{Float64}}
  ##a1#7437::Float64
  ##a2#7438::Float64
  ######a#7072#7111#7439::Tuple{}
  ######b#7073#7112#7440::Tuple{}
  ######afactor#7074#7113#7441::Float64
  ######bfactor#7075#7114#7442::Float64
  ####_var0#7115#7443::Tuple{}
  ##a#7444::Float64
  ####G#7408#7445::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7409#7446::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7410#7447::Tuple{}
  ##########x#7118#7120#7124#7411#7448::Float64
  ########_var0#7121#7125#7412#7449::Tuple{}
  ######types#7131#7176#7450::Tuple{Type{Float64}}
  ##a1#7451::Float64
  ##a2#7452::Float64
  ######a#7072#7111#7453::Tuple{}
  ######b#7073#7112#7454::Tuple{}
  ######afactor#7074#7113#7455::Float64
  ######bfactor#7075#7114#7456::Float64
  ####_var0#7115#7457::Tuple{}
  ######a#7198#7200#7458::Tuple{}
  ######b#7199#7201#7459::Tuple{}
  ####_var0#7202#7460::Tuple{}
  ######a#7198#7200#7461::Tuple{}
  ######b#7199#7201#7462::Tuple{}
  ####_var0#7202#7463::Tuple{}
  ######a#7067#7069#7464::Tuple{}
  ######b#7068#7070#7465::Tuple{}
  ####_var0#7071#7466::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 102:
      GenSym(16) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 103:
      $(Expr(:boundscheck, false))
      ####_var0#7071#7415 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7071#7415 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 104:
      GenSym(12) = (Distributions.lbeta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7444 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (ForwardDiff.digamma)(##a#7444::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7444::Float64)::Float64
      ####G#7408#7445 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7412#7449 = (top(tuple))()::Tuple{}
      goto 17
      ########_var0#7121#7125#7412#7449 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(9), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7451 = GenSym(10)
      ##a2#7452 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7457 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7115#7457 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7451::Float64,##a2#7452::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7202#7460 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7202#7460 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##a#7430 = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (ForwardDiff.digamma)(##a#7430::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7430::Float64)::Float64
      ####G#7408#7431 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7412#7435 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7121#7125#7412#7435 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(6), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7437 = GenSym(7)
      ##a2#7438 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7443 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7115#7443 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7437::Float64,##a2#7438::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7202#7463 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7202#7463 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7416 = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7416::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7416::Float64)::Float64
      ####G#7408#7417 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7412#7421 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7121#7125#7412#7421 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(3), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7423 = GenSym(4)
      ##a2#7424 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7429 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7115#7429 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7423::Float64,##a2#7424::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7071#7466 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7071#7466 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(12),:value)::Float64,(top(getfield))(GenSym(13),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(14),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7067#7069#7413::Tuple{}
  ######b#7068#7070#7414::Tuple{}
  ####_var0#7071#7415::Tuple{}
  ##a#7416::Float64
  ####G#7408#7417::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7409#7418::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7410#7419::Tuple{}
  ##########x#7118#7120#7124#7411#7420::Float64
  ########_var0#7121#7125#7412#7421::Tuple{}
  ######types#7131#7176#7422::Tuple{Type{Float64}}
  ##a1#7423::Float64
  ##a2#7424::Float64
  ######a#7072#7111#7425::Tuple{}
  ######b#7073#7112#7426::Tuple{}
  ######afactor#7074#7113#7427::Float64
  ######bfactor#7075#7114#7428::Float64
  ####_var0#7115#7429::Tuple{}
  ##a#7430::Float64
  ####G#7408#7431::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7409#7432::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7410#7433::Tuple{}
  ##########x#7118#7120#7124#7411#7434::Float64
  ########_var0#7121#7125#7412#7435::Tuple{}
  ######types#7131#7176#7436::Tuple{Type{Float64}}
  ##a1#7437::Float64
  ##a2#7438::Float64
  ######a#7072#7111#7439::Tuple{}
  ######b#7073#7112#7440::Tuple{}
  ######afactor#7074#7113#7441::Float64
  ######bfactor#7075#7114#7442::Float64
  ####_var0#7115#7443::Tuple{}
  ##a#7444::Float64
  ####G#7408#7445::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7116#7122#7409#7446::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7117#7119#7123#7410#7447::Tuple{}
  ##########x#7118#7120#7124#7411#7448::Float64
  ########_var0#7121#7125#7412#7449::Tuple{}
  ######types#7131#7176#7450::Tuple{Type{Float64}}
  ##a1#7451::Float64
  ##a2#7452::Float64
  ######a#7072#7111#7453::Tuple{}
  ######b#7073#7112#7454::Tuple{}
  ######afactor#7074#7113#7455::Float64
  ######bfactor#7075#7114#7456::Float64
  ####_var0#7115#7457::Tuple{}
  ######a#7198#7200#7458::Tuple{}
  ######b#7199#7201#7459::Tuple{}
  ####_var0#7202#7460::Tuple{}
  ######a#7198#7200#7461::Tuple{}
  ######b#7199#7201#7462::Tuple{}
  ####_var0#7202#7463::Tuple{}
  ######a#7067#7069#7464::Tuple{}
  ######b#7068#7070#7465::Tuple{}
  ####_var0#7071#7466::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 102:
      GenSym(16) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 103:
      $(Expr(:boundscheck, false))
      ####_var0#7071#7415 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7071#7415 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 104:
      GenSym(12) = (Distributions.lbeta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7444 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (ForwardDiff.digamma)(##a#7444::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7444::Float64)::Float64
      ####G#7408#7445 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7412#7449 = (top(tuple))()::Tuple{}
      goto 17
      ########_var0#7121#7125#7412#7449 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(9), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7451 = GenSym(10)
      ##a2#7452 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7457 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7115#7457 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7451::Float64,##a2#7452::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7202#7460 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7202#7460 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##a#7430 = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (ForwardDiff.digamma)(##a#7430::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7430::Float64)::Float64
      ####G#7408#7431 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7412#7435 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7121#7125#7412#7435 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(6), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7437 = GenSym(7)
      ##a2#7438 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7443 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7115#7443 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7437::Float64,##a2#7438::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7202#7463 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7202#7463 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7416 = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7416::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7416::Float64)::Float64
      ####G#7408#7417 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7121#7125#7412#7421 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7121#7125#7412#7421 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(3), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7423 = GenSym(4)
      ##a2#7424 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7429 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7115#7429 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7423::Float64,##a2#7424::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7071#7466 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7071#7466 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(12),:value)::Float64,(top(getfield))(GenSym(13),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(14),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 119:
      return (top(ccall))((top(tuple))("rbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 119:
      return (top(ccall))((top(tuple))("rbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 119:
      return ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:betarand)::F)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
  end::Float64

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 119:
      return (top(ccall))((top(tuple))("rbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 119:
      return (top(ccall))((top(tuple))("rbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 119:
      return ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:betarand)::F)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
  end::Float64

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 119:
      return ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:betarand)::F)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
  end::Float64

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 119:
      return ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:betarand)::F)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
  end::Float64

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 119:
      return ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:betarand)::F)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
  end::Float64




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      GenSym(7) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(8) = (top(ccall))((top(tuple))("dbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),0,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0,GenSym(7),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(8),0)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      GenSym(7) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(8) = (top(ccall))((top(tuple))("dbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),0,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0,GenSym(7),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(8),0)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      GenSym(1) = (StatsFuns.f64)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(0) = (StatsFuns.f64)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(9) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(10) = (top(ccall))((top(tuple))("dbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),0,GenSym(1),0,GenSym(0),0,GenSym(9),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(10),0)::Float64
  end::Float64

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      GenSym(7) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(8) = (top(ccall))((top(tuple))("dbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),0,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0,GenSym(7),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(8),0)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      GenSym(7) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(8) = (top(ccall))((top(tuple))("dbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),0,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0,GenSym(7),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(8),0)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      GenSym(1) = (StatsFuns.f64)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(0) = (StatsFuns.f64)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(9) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(10) = (top(ccall))((top(tuple))("dbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),0,GenSym(1),0,GenSym(0),0,GenSym(9),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(10),0)::Float64
  end::Float64

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      GenSym(1) = (StatsFuns.f64)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(0) = (StatsFuns.f64)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(9) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(10) = (top(ccall))((top(tuple))("dbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),0,GenSym(1),0,GenSym(0),0,GenSym(9),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(10),0)::Float64
  end::Float64

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      GenSym(1) = (StatsFuns.f64)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(0) = (StatsFuns.f64)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(9) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(10) = (top(ccall))((top(tuple))("dbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),0,GenSym(1),0,GenSym(0),0,GenSym(9),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(10),0)::Float64
  end::Float64

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      GenSym(1) = (StatsFuns.f64)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(0) = (StatsFuns.f64)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(9) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(10) = (top(ccall))((top(tuple))("dbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),0,GenSym(1),0,GenSym(0),0,GenSym(9),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(10),0)::Float64
  end::Float64




____________________________
mgf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
cf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





