____________________________
ntrials
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 56:
      return (top(tuple))((top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 56:
      return (top(tuple))((top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 56:
      return (top(tuple))((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 56:
      return (top(tuple))((top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 56:
      return (top(tuple))((top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 56:
      return (top(tuple))((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 56:
      return (top(tuple))((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 56:
      return (top(tuple))((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 56:
      return (top(tuple))((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 61:
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8)
      return (Base.box)(Base.Float64,(Base.div_float)(α::Float64,(Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 61:
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8)
      return (Base.box)(Base.Float64,(Base.div_float)(α::Float64,(Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######a#7069#7071#7092::Tuple{}
  ######b#7070#7072#7093::Tuple{}
  ####_var0#7073#7094::Tuple{}
  ##a1#7095::Float64
  ##a2#7096::Float64
  ##div_a#7097::Float64
  ####afactor#7084#7098::Float64
  ####bfactor#7085#7099::Float64
  ########a#7074#7078#7086#7100::Tuple{}
  ########b#7075#7079#7087#7101::Tuple{}
  ########afactor#7076#7080#7088#7102::Float64
  ########bfactor#7077#7081#7089#7103::Float64
  ######_var0#7082#7090#7104::Tuple{}
  ######types#7083#7091#7105::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 61:
      GenSym(5) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(9)
      #s25 = GenSym(10)
      $(Expr(:boundscheck, false))
      ####_var0#7073#7094 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7073#7094 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7095 = GenSym(3)
      ##a2#7096 = GenSym(4)
      ##div_a#7097 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7095::Float64,##a2#7096::Float64))
      ####afactor#7084#7098 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7096::Float64))
      ####bfactor#7085#7099 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7095::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7096::Float64,##a2#7096::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7082#7090#7104 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7082#7090#7104 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7097::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 61:
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8)
      return (Base.box)(Base.Float64,(Base.div_float)(α::Float64,(Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 61:
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8)
      return (Base.box)(Base.Float64,(Base.div_float)(α::Float64,(Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######a#7069#7071#7092::Tuple{}
  ######b#7070#7072#7093::Tuple{}
  ####_var0#7073#7094::Tuple{}
  ##a1#7095::Float64
  ##a2#7096::Float64
  ##div_a#7097::Float64
  ####afactor#7084#7098::Float64
  ####bfactor#7085#7099::Float64
  ########a#7074#7078#7086#7100::Tuple{}
  ########b#7075#7079#7087#7101::Tuple{}
  ########afactor#7076#7080#7088#7102::Float64
  ########bfactor#7077#7081#7089#7103::Float64
  ######_var0#7082#7090#7104::Tuple{}
  ######types#7083#7091#7105::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 61:
      GenSym(5) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(9)
      #s25 = GenSym(10)
      $(Expr(:boundscheck, false))
      ####_var0#7073#7094 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7073#7094 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7095 = GenSym(3)
      ##a2#7096 = GenSym(4)
      ##div_a#7097 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7095::Float64,##a2#7096::Float64))
      ####afactor#7084#7098 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7096::Float64))
      ####bfactor#7085#7099 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7095::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7096::Float64,##a2#7096::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7082#7090#7104 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7082#7090#7104 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7097::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######a#7069#7071#7092::Tuple{}
  ######b#7070#7072#7093::Tuple{}
  ####_var0#7073#7094::Tuple{}
  ##a1#7095::Float64
  ##a2#7096::Float64
  ##div_a#7097::Float64
  ####afactor#7084#7098::Float64
  ####bfactor#7085#7099::Float64
  ########a#7074#7078#7086#7100::Tuple{}
  ########b#7075#7079#7087#7101::Tuple{}
  ########afactor#7076#7080#7088#7102::Float64
  ########bfactor#7077#7081#7089#7103::Float64
  ######_var0#7082#7090#7104::Tuple{}
  ######types#7083#7091#7105::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 61:
      GenSym(5) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(9)
      #s25 = GenSym(10)
      $(Expr(:boundscheck, false))
      ####_var0#7073#7094 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7073#7094 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7095 = GenSym(3)
      ##a2#7096 = GenSym(4)
      ##div_a#7097 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7095::Float64,##a2#7096::Float64))
      ####afactor#7084#7098 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7096::Float64))
      ####bfactor#7085#7099 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7095::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7096::Float64,##a2#7096::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7082#7090#7104 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7082#7090#7104 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7097::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######a#7069#7071#7092::Tuple{}
  ######b#7070#7072#7093::Tuple{}
  ####_var0#7073#7094::Tuple{}
  ##a1#7095::Float64
  ##a2#7096::Float64
  ##div_a#7097::Float64
  ####afactor#7084#7098::Float64
  ####bfactor#7085#7099::Float64
  ########a#7074#7078#7086#7100::Tuple{}
  ########b#7075#7079#7087#7101::Tuple{}
  ########afactor#7076#7080#7088#7102::Float64
  ########bfactor#7077#7081#7089#7103::Float64
  ######_var0#7082#7090#7104::Tuple{}
  ######types#7083#7091#7105::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 61:
      GenSym(5) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(9)
      #s25 = GenSym(10)
      $(Expr(:boundscheck, false))
      ####_var0#7073#7094 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7073#7094 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7095 = GenSym(3)
      ##a2#7096 = GenSym(4)
      ##div_a#7097 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7095::Float64,##a2#7096::Float64))
      ####afactor#7084#7098 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7096::Float64))
      ####bfactor#7085#7099 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7095::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7096::Float64,##a2#7096::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7082#7090#7104 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7082#7090#7104 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7097::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######a#7069#7071#7092::Tuple{}
  ######b#7070#7072#7093::Tuple{}
  ####_var0#7073#7094::Tuple{}
  ##a1#7095::Float64
  ##a2#7096::Float64
  ##div_a#7097::Float64
  ####afactor#7084#7098::Float64
  ####bfactor#7085#7099::Float64
  ########a#7074#7078#7086#7100::Tuple{}
  ########b#7075#7079#7087#7101::Tuple{}
  ########afactor#7076#7080#7088#7102::Float64
  ########bfactor#7077#7081#7089#7103::Float64
  ######_var0#7082#7090#7104::Tuple{}
  ######types#7083#7091#7105::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 61:
      GenSym(5) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(9)
      #s25 = GenSym(10)
      $(Expr(:boundscheck, false))
      ####_var0#7073#7094 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7073#7094 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7095 = GenSym(3)
      ##a2#7096 = GenSym(4)
      ##div_a#7097 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7095::Float64,##a2#7096::Float64))
      ####afactor#7084#7098 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7096::Float64))
      ####bfactor#7085#7099 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7095::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7096::Float64,##a2#7096::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7082#7090#7104 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7082#7090#7104 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7097::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 72:
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 73:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 74:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(s::Float64,s::Float64)),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0))))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 72:
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 73:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 74:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(s::Float64,s::Float64)),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0))))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7069#7071#7135::Tuple{}
  ######b#7070#7072#7136::Tuple{}
  ####_var0#7073#7137::Tuple{}
  ######types#7133#7134#7138::Tuple{Type{Float64}}
  ##a#7139::Float64
  ####G#7128#7140::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7129#7141::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7130#7142::Tuple{}
  ##########x#7120#7122#7126#7131#7143::Float64
  ########_var0#7123#7127#7132#7144::Tuple{}
  ##a1#7145::Float64
  ##a2#7146::Float64
  ######a#7074#7113#7147::Tuple{}
  ######b#7075#7114#7148::Tuple{}
  ######afactor#7076#7115#7149::Float64
  ######bfactor#7077#7116#7150::Float64
  ####_var0#7117#7151::Tuple{}
  ##a1#7152::Float64
  ##a2#7153::Float64
  ######a#7074#7113#7154::Tuple{}
  ######b#7075#7114#7155::Tuple{}
  ######afactor#7076#7115#7156::Float64
  ######bfactor#7077#7116#7157::Float64
  ####_var0#7117#7158::Tuple{}
  ##a1#7159::Float64
  ##a2#7160::Float64
  ##div_a#7161::Float64
  ####afactor#7084#7162::Float64
  ####bfactor#7085#7163::Float64
  ########a#7074#7078#7086#7164::Tuple{}
  ########b#7075#7079#7087#7165::Tuple{}
  ########afactor#7076#7080#7088#7166::Float64
  ########bfactor#7077#7081#7089#7167::Float64
  ######_var0#7082#7090#7168::Tuple{}
  ######types#7083#7091#7169::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 72:
      GenSym(12) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 73:
      $(Expr(:boundscheck, false))
      ####_var0#7073#7137 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7073#7137 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 74:
      GenSym(6) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7152 = GenSym(6)
      ##a2#7153 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7158 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7117#7158 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7152::Float64,##a2#7153::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7139 = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####G#7128#7140 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7132#7144 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7123#7127#7132#7144 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7139::Float64,##a#7139::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7145 = GenSym(4)
      ##a2#7146 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7151 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7117#7151 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7145::Float64,##a2#7146::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7159 = GenSym(10)
      ##a2#7160 = GenSym(11)
      ##div_a#7161 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7159::Float64,##a2#7160::Float64))
      ####afactor#7084#7162 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7160::Float64))
      ####bfactor#7085#7163 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7159::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7160::Float64,##a2#7160::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7082#7090#7168 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7082#7090#7168 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7161::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 72:
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 73:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 74:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(s::Float64,s::Float64)),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0))))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 72:
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 73:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 74:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(s::Float64,s::Float64)),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0))))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7069#7071#7135::Tuple{}
  ######b#7070#7072#7136::Tuple{}
  ####_var0#7073#7137::Tuple{}
  ######types#7133#7134#7138::Tuple{Type{Float64}}
  ##a#7139::Float64
  ####G#7128#7140::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7129#7141::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7130#7142::Tuple{}
  ##########x#7120#7122#7126#7131#7143::Float64
  ########_var0#7123#7127#7132#7144::Tuple{}
  ##a1#7145::Float64
  ##a2#7146::Float64
  ######a#7074#7113#7147::Tuple{}
  ######b#7075#7114#7148::Tuple{}
  ######afactor#7076#7115#7149::Float64
  ######bfactor#7077#7116#7150::Float64
  ####_var0#7117#7151::Tuple{}
  ##a1#7152::Float64
  ##a2#7153::Float64
  ######a#7074#7113#7154::Tuple{}
  ######b#7075#7114#7155::Tuple{}
  ######afactor#7076#7115#7156::Float64
  ######bfactor#7077#7116#7157::Float64
  ####_var0#7117#7158::Tuple{}
  ##a1#7159::Float64
  ##a2#7160::Float64
  ##div_a#7161::Float64
  ####afactor#7084#7162::Float64
  ####bfactor#7085#7163::Float64
  ########a#7074#7078#7086#7164::Tuple{}
  ########b#7075#7079#7087#7165::Tuple{}
  ########afactor#7076#7080#7088#7166::Float64
  ########bfactor#7077#7081#7089#7167::Float64
  ######_var0#7082#7090#7168::Tuple{}
  ######types#7083#7091#7169::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 72:
      GenSym(12) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 73:
      $(Expr(:boundscheck, false))
      ####_var0#7073#7137 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7073#7137 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 74:
      GenSym(6) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7152 = GenSym(6)
      ##a2#7153 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7158 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7117#7158 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7152::Float64,##a2#7153::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7139 = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####G#7128#7140 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7132#7144 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7123#7127#7132#7144 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7139::Float64,##a#7139::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7145 = GenSym(4)
      ##a2#7146 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7151 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7117#7151 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7145::Float64,##a2#7146::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7159 = GenSym(10)
      ##a2#7160 = GenSym(11)
      ##div_a#7161 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7159::Float64,##a2#7160::Float64))
      ####afactor#7084#7162 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7160::Float64))
      ####bfactor#7085#7163 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7159::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7160::Float64,##a2#7160::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7082#7090#7168 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7082#7090#7168 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7161::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7069#7071#7135::Tuple{}
  ######b#7070#7072#7136::Tuple{}
  ####_var0#7073#7137::Tuple{}
  ######types#7133#7134#7138::Tuple{Type{Float64}}
  ##a#7139::Float64
  ####G#7128#7140::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7129#7141::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7130#7142::Tuple{}
  ##########x#7120#7122#7126#7131#7143::Float64
  ########_var0#7123#7127#7132#7144::Tuple{}
  ##a1#7145::Float64
  ##a2#7146::Float64
  ######a#7074#7113#7147::Tuple{}
  ######b#7075#7114#7148::Tuple{}
  ######afactor#7076#7115#7149::Float64
  ######bfactor#7077#7116#7150::Float64
  ####_var0#7117#7151::Tuple{}
  ##a1#7152::Float64
  ##a2#7153::Float64
  ######a#7074#7113#7154::Tuple{}
  ######b#7075#7114#7155::Tuple{}
  ######afactor#7076#7115#7156::Float64
  ######bfactor#7077#7116#7157::Float64
  ####_var0#7117#7158::Tuple{}
  ##a1#7159::Float64
  ##a2#7160::Float64
  ##div_a#7161::Float64
  ####afactor#7084#7162::Float64
  ####bfactor#7085#7163::Float64
  ########a#7074#7078#7086#7164::Tuple{}
  ########b#7075#7079#7087#7165::Tuple{}
  ########afactor#7076#7080#7088#7166::Float64
  ########bfactor#7077#7081#7089#7167::Float64
  ######_var0#7082#7090#7168::Tuple{}
  ######types#7083#7091#7169::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 72:
      GenSym(12) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 73:
      $(Expr(:boundscheck, false))
      ####_var0#7073#7137 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7073#7137 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 74:
      GenSym(6) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7152 = GenSym(6)
      ##a2#7153 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7158 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7117#7158 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7152::Float64,##a2#7153::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7139 = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####G#7128#7140 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7132#7144 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7123#7127#7132#7144 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7139::Float64,##a#7139::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7145 = GenSym(4)
      ##a2#7146 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7151 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7117#7151 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7145::Float64,##a2#7146::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7159 = GenSym(10)
      ##a2#7160 = GenSym(11)
      ##div_a#7161 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7159::Float64,##a2#7160::Float64))
      ####afactor#7084#7162 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7160::Float64))
      ####bfactor#7085#7163 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7159::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7160::Float64,##a2#7160::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7082#7090#7168 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7082#7090#7168 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7161::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7069#7071#7135::Tuple{}
  ######b#7070#7072#7136::Tuple{}
  ####_var0#7073#7137::Tuple{}
  ######types#7133#7134#7138::Tuple{Type{Float64}}
  ##a#7139::Float64
  ####G#7128#7140::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7129#7141::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7130#7142::Tuple{}
  ##########x#7120#7122#7126#7131#7143::Float64
  ########_var0#7123#7127#7132#7144::Tuple{}
  ##a1#7145::Float64
  ##a2#7146::Float64
  ######a#7074#7113#7147::Tuple{}
  ######b#7075#7114#7148::Tuple{}
  ######afactor#7076#7115#7149::Float64
  ######bfactor#7077#7116#7150::Float64
  ####_var0#7117#7151::Tuple{}
  ##a1#7152::Float64
  ##a2#7153::Float64
  ######a#7074#7113#7154::Tuple{}
  ######b#7075#7114#7155::Tuple{}
  ######afactor#7076#7115#7156::Float64
  ######bfactor#7077#7116#7157::Float64
  ####_var0#7117#7158::Tuple{}
  ##a1#7159::Float64
  ##a2#7160::Float64
  ##div_a#7161::Float64
  ####afactor#7084#7162::Float64
  ####bfactor#7085#7163::Float64
  ########a#7074#7078#7086#7164::Tuple{}
  ########b#7075#7079#7087#7165::Tuple{}
  ########afactor#7076#7080#7088#7166::Float64
  ########bfactor#7077#7081#7089#7167::Float64
  ######_var0#7082#7090#7168::Tuple{}
  ######types#7083#7091#7169::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 72:
      GenSym(12) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 73:
      $(Expr(:boundscheck, false))
      ####_var0#7073#7137 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7073#7137 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 74:
      GenSym(6) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7152 = GenSym(6)
      ##a2#7153 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7158 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7117#7158 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7152::Float64,##a2#7153::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7139 = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####G#7128#7140 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7132#7144 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7123#7127#7132#7144 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7139::Float64,##a#7139::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7145 = GenSym(4)
      ##a2#7146 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7151 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7117#7151 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7145::Float64,##a2#7146::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7159 = GenSym(10)
      ##a2#7160 = GenSym(11)
      ##div_a#7161 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7159::Float64,##a2#7160::Float64))
      ####afactor#7084#7162 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7160::Float64))
      ####bfactor#7085#7163 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7159::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7160::Float64,##a2#7160::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7082#7090#7168 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7082#7090#7168 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7161::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7069#7071#7135::Tuple{}
  ######b#7070#7072#7136::Tuple{}
  ####_var0#7073#7137::Tuple{}
  ######types#7133#7134#7138::Tuple{Type{Float64}}
  ##a#7139::Float64
  ####G#7128#7140::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7129#7141::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7130#7142::Tuple{}
  ##########x#7120#7122#7126#7131#7143::Float64
  ########_var0#7123#7127#7132#7144::Tuple{}
  ##a1#7145::Float64
  ##a2#7146::Float64
  ######a#7074#7113#7147::Tuple{}
  ######b#7075#7114#7148::Tuple{}
  ######afactor#7076#7115#7149::Float64
  ######bfactor#7077#7116#7150::Float64
  ####_var0#7117#7151::Tuple{}
  ##a1#7152::Float64
  ##a2#7153::Float64
  ######a#7074#7113#7154::Tuple{}
  ######b#7075#7114#7155::Tuple{}
  ######afactor#7076#7115#7156::Float64
  ######bfactor#7077#7116#7157::Float64
  ####_var0#7117#7158::Tuple{}
  ##a1#7159::Float64
  ##a2#7160::Float64
  ##div_a#7161::Float64
  ####afactor#7084#7162::Float64
  ####bfactor#7085#7163::Float64
  ########a#7074#7078#7086#7164::Tuple{}
  ########b#7075#7079#7087#7165::Tuple{}
  ########afactor#7076#7080#7088#7166::Float64
  ########bfactor#7077#7081#7089#7167::Float64
  ######_var0#7082#7090#7168::Tuple{}
  ######types#7083#7091#7169::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 72:
      GenSym(12) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 73:
      $(Expr(:boundscheck, false))
      ####_var0#7073#7137 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7073#7137 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 74:
      GenSym(6) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7152 = GenSym(6)
      ##a2#7153 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7158 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7117#7158 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7152::Float64,##a2#7153::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7139 = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####G#7128#7140 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7132#7144 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7123#7127#7132#7144 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7139::Float64,##a#7139::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7145 = GenSym(4)
      ##a2#7146 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7151 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7117#7151 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7145::Float64,##a2#7146::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7159 = GenSym(10)
      ##a2#7160 = GenSym(11)
      ##div_a#7161 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7159::Float64,##a2#7160::Float64))
      ####afactor#7084#7162 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7160::Float64))
      ####bfactor#7085#7163 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7159::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7160::Float64,##a2#7160::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7082#7090#7168 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7082#7090#7168 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7161::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  #s24::Bool

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 64:
      NewvarNode(symbol("#s24"))
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 65:
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      #s24 = (Base.lt_float)(1.0,β::Float64)::Bool
      goto 1
      0: 
      #s24 = false
      1: 
      unless #s24::Bool goto 2
      goto 3
      2: 
      (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,"mode is defined only when α > 1 and β > 1.")::ANY)::UNION{}
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 66:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),2.0))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  #s24::Bool

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 64:
      NewvarNode(symbol("#s24"))
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 65:
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      #s24 = (Base.lt_float)(1.0,β::Float64)::Bool
      goto 1
      0: 
      #s24 = false
      1: 
      unless #s24::Bool goto 2
      goto 3
      2: 
      (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,"mode is defined only when α > 1 and β > 1.")::ANY)::UNION{}
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 66:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),2.0))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  #s24::Bool
  ######a#7069#7071#7179::Tuple{}
  ######b#7070#7072#7180::Tuple{}
  ####_var0#7073#7181::Tuple{}
  ######types#7133#7178#7182::Tuple{Type{Float64}}
  ######types#7133#7178#7183::Tuple{Type{Float64}}
  ##a1#7184::Float64
  ##a2#7185::Float64
  ##div_a#7186::Float64
  ####afactor#7084#7187::Float64
  ####bfactor#7085#7188::Float64
  ########a#7074#7078#7086#7189::Tuple{}
  ########b#7075#7079#7087#7190::Tuple{}
  ########afactor#7076#7080#7088#7191::Float64
  ########bfactor#7077#7081#7089#7192::Float64
  ######_var0#7082#7090#7193::Tuple{}
  ######types#7083#7091#7194::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 64:
      NewvarNode(symbol("#s24"))
      GenSym(6) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(7) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(10)
      #s25 = GenSym(11) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 65:
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      #s24 = (Base.lt_float)(1.0,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool
      goto 1
      0: 
      #s24 = false
      1: 
      unless #s24::Bool goto 2
      goto 3
      2: 
      (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,"mode is defined only when α > 1 and β > 1.")::ANY)::UNION{}
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 66:
      $(Expr(:boundscheck, false))
      ####_var0#7073#7181 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7073#7181 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(3),:value)::Float64,2.0))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7184 = GenSym(4)
      ##a2#7185 = GenSym(5)
      ##div_a#7186 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7184::Float64,##a2#7185::Float64))
      ####afactor#7084#7187 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7185::Float64))
      ####bfactor#7085#7188 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7184::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7185::Float64,##a2#7185::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7082#7090#7193 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7082#7090#7193 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7186::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  #s24::Bool

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 64:
      NewvarNode(symbol("#s24"))
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 65:
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      #s24 = (Base.lt_float)(1.0,β::Float64)::Bool
      goto 1
      0: 
      #s24 = false
      1: 
      unless #s24::Bool goto 2
      goto 3
      2: 
      (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,"mode is defined only when α > 1 and β > 1.")::ANY)::UNION{}
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 66:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),2.0))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  #s24::Bool

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 64:
      NewvarNode(symbol("#s24"))
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 65:
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      #s24 = (Base.lt_float)(1.0,β::Float64)::Bool
      goto 1
      0: 
      #s24 = false
      1: 
      unless #s24::Bool goto 2
      goto 3
      2: 
      (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,"mode is defined only when α > 1 and β > 1.")::ANY)::UNION{}
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 66:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),2.0))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  #s24::Bool
  ######a#7069#7071#7179::Tuple{}
  ######b#7070#7072#7180::Tuple{}
  ####_var0#7073#7181::Tuple{}
  ######types#7133#7178#7182::Tuple{Type{Float64}}
  ######types#7133#7178#7183::Tuple{Type{Float64}}
  ##a1#7184::Float64
  ##a2#7185::Float64
  ##div_a#7186::Float64
  ####afactor#7084#7187::Float64
  ####bfactor#7085#7188::Float64
  ########a#7074#7078#7086#7189::Tuple{}
  ########b#7075#7079#7087#7190::Tuple{}
  ########afactor#7076#7080#7088#7191::Float64
  ########bfactor#7077#7081#7089#7192::Float64
  ######_var0#7082#7090#7193::Tuple{}
  ######types#7083#7091#7194::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 64:
      NewvarNode(symbol("#s24"))
      GenSym(6) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(7) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(10)
      #s25 = GenSym(11) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 65:
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      #s24 = (Base.lt_float)(1.0,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool
      goto 1
      0: 
      #s24 = false
      1: 
      unless #s24::Bool goto 2
      goto 3
      2: 
      (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,"mode is defined only when α > 1 and β > 1.")::ANY)::UNION{}
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 66:
      $(Expr(:boundscheck, false))
      ####_var0#7073#7181 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7073#7181 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(3),:value)::Float64,2.0))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7184 = GenSym(4)
      ##a2#7185 = GenSym(5)
      ##div_a#7186 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7184::Float64,##a2#7185::Float64))
      ####afactor#7084#7187 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7185::Float64))
      ####bfactor#7085#7188 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7184::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7185::Float64,##a2#7185::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7082#7090#7193 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7082#7090#7193 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7186::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  #s24::Bool
  ######a#7069#7071#7179::Tuple{}
  ######b#7070#7072#7180::Tuple{}
  ####_var0#7073#7181::Tuple{}
  ######types#7133#7178#7182::Tuple{Type{Float64}}
  ######types#7133#7178#7183::Tuple{Type{Float64}}
  ##a1#7184::Float64
  ##a2#7185::Float64
  ##div_a#7186::Float64
  ####afactor#7084#7187::Float64
  ####bfactor#7085#7188::Float64
  ########a#7074#7078#7086#7189::Tuple{}
  ########b#7075#7079#7087#7190::Tuple{}
  ########afactor#7076#7080#7088#7191::Float64
  ########bfactor#7077#7081#7089#7192::Float64
  ######_var0#7082#7090#7193::Tuple{}
  ######types#7083#7091#7194::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 64:
      NewvarNode(symbol("#s24"))
      GenSym(6) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(7) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(10)
      #s25 = GenSym(11) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 65:
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      #s24 = (Base.lt_float)(1.0,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool
      goto 1
      0: 
      #s24 = false
      1: 
      unless #s24::Bool goto 2
      goto 3
      2: 
      (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,"mode is defined only when α > 1 and β > 1.")::ANY)::UNION{}
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 66:
      $(Expr(:boundscheck, false))
      ####_var0#7073#7181 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7073#7181 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(3),:value)::Float64,2.0))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7184 = GenSym(4)
      ##a2#7185 = GenSym(5)
      ##div_a#7186 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7184::Float64,##a2#7185::Float64))
      ####afactor#7084#7187 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7185::Float64))
      ####bfactor#7085#7188 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7184::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7185::Float64,##a2#7185::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7082#7090#7193 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7082#7090#7193 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7186::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  #s24::Bool
  ######a#7069#7071#7179::Tuple{}
  ######b#7070#7072#7180::Tuple{}
  ####_var0#7073#7181::Tuple{}
  ######types#7133#7178#7182::Tuple{Type{Float64}}
  ######types#7133#7178#7183::Tuple{Type{Float64}}
  ##a1#7184::Float64
  ##a2#7185::Float64
  ##div_a#7186::Float64
  ####afactor#7084#7187::Float64
  ####bfactor#7085#7188::Float64
  ########a#7074#7078#7086#7189::Tuple{}
  ########b#7075#7079#7087#7190::Tuple{}
  ########afactor#7076#7080#7088#7191::Float64
  ########bfactor#7077#7081#7089#7192::Float64
  ######_var0#7082#7090#7193::Tuple{}
  ######types#7083#7091#7194::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 64:
      NewvarNode(symbol("#s24"))
      GenSym(6) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(7) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(10)
      #s25 = GenSym(11) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 65:
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      #s24 = (Base.lt_float)(1.0,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool
      goto 1
      0: 
      #s24 = false
      1: 
      unless #s24::Bool goto 2
      goto 3
      2: 
      (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,"mode is defined only when α > 1 and β > 1.")::ANY)::UNION{}
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 66:
      $(Expr(:boundscheck, false))
      ####_var0#7073#7181 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7073#7181 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(3),:value)::Float64,2.0))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7184 = GenSym(4)
      ##a2#7185 = GenSym(5)
      ##div_a#7186 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7184::Float64,##a2#7185::Float64))
      ####afactor#7084#7187 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7185::Float64))
      ####bfactor#7085#7188 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7184::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7185::Float64,##a2#7185::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7082#7090#7193 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7082#7090#7193 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7186::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  #s24::Bool
  ######a#7069#7071#7179::Tuple{}
  ######b#7070#7072#7180::Tuple{}
  ####_var0#7073#7181::Tuple{}
  ######types#7133#7178#7182::Tuple{Type{Float64}}
  ######types#7133#7178#7183::Tuple{Type{Float64}}
  ##a1#7184::Float64
  ##a2#7185::Float64
  ##div_a#7186::Float64
  ####afactor#7084#7187::Float64
  ####bfactor#7085#7188::Float64
  ########a#7074#7078#7086#7189::Tuple{}
  ########b#7075#7079#7087#7190::Tuple{}
  ########afactor#7076#7080#7088#7191::Float64
  ########bfactor#7077#7081#7089#7192::Float64
  ######_var0#7082#7090#7193::Tuple{}
  ######types#7083#7091#7194::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 64:
      NewvarNode(symbol("#s24"))
      GenSym(6) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(7) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(10)
      #s25 = GenSym(11) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 65:
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      #s24 = (Base.lt_float)(1.0,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool
      goto 1
      0: 
      #s24 = false
      1: 
      unless #s24::Bool goto 2
      goto 3
      2: 
      (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,"mode is defined only when α > 1 and β > 1.")::ANY)::UNION{}
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 66:
      $(Expr(:boundscheck, false))
      ####_var0#7073#7181 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7073#7181 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(3),:value)::Float64,2.0))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7184 = GenSym(4)
      ##a2#7185 = GenSym(5)
      ##div_a#7186 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7184::Float64,##a2#7185::Float64))
      ####afactor#7084#7187 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7185::Float64))
      ####bfactor#7085#7188 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7184::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7185::Float64,##a2#7185::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7082#7090#7193 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7082#7090#7193 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7186::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 69:
      return (top(vect))((Distributions.mode)(d::Distributions.Beta{Float64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 69:
      return (top(vect))((Distributions.mode)(d::Distributions.Beta{Float64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 69:
      return (top(vect))((Distributions.mode)(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 69:
      return (top(vect))((Distributions.mode)(d::Distributions.Beta{Float64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 69:
      return (top(vect))((Distributions.mode)(d::Distributions.Beta{Float64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 69:
      return (top(vect))((Distributions.mode)(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 69:
      return (top(vect))((Distributions.mode)(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 69:
      return (top(vect))((Distributions.mode)(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 69:
      return (top(vect))((Distributions.mode)(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(31) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(32) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(33) = (top(ccall))((top(tuple))("qbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint,StatsFuns.Rmath.Cint)::SimpleVector,0.5,0,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0,GenSym(31),0,GenSym(32),0)::Float64
      return GenSym(33)
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(31) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(32) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(33) = (top(ccall))((top(tuple))("qbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint,StatsFuns.Rmath.Cint)::SimpleVector,0.5,0,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0,GenSym(31),0,GenSym(32),0)::Float64
      return GenSym(33)
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (Distributions.betainvcdf)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return GenSym(0)
  end::Float64

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(31) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(32) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(33) = (top(ccall))((top(tuple))("qbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint,StatsFuns.Rmath.Cint)::SimpleVector,0.5,0,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0,GenSym(31),0,GenSym(32),0)::Float64
      return GenSym(33)
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(31) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(32) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(33) = (top(ccall))((top(tuple))("qbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint,StatsFuns.Rmath.Cint)::SimpleVector,0.5,0,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0,GenSym(31),0,GenSym(32),0)::Float64
      return GenSym(33)
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (Distributions.betainvcdf)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return GenSym(0)
  end::Float64

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (Distributions.betainvcdf)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return GenSym(0)
  end::Float64

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (Distributions.betainvcdf)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return GenSym(0)
  end::Float64

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (Distributions.betainvcdf)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return GenSym(0)
  end::Float64




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64
  ##xs#7199::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 83:
      NewvarNode(:s)
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 84:
      unless (Base.eq_float)(α::Float64,β::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 85:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 87:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 88:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.box)(Base.Float64,(Base.sub_float)(β::Float64,α::Float64)))),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0))))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64))))::Float64))))
      1: 
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64
  ##xs#7199::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 83:
      NewvarNode(:s)
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 84:
      unless (Base.eq_float)(α::Float64,β::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 85:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 87:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 88:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.box)(Base.Float64,(Base.sub_float)(β::Float64,α::Float64)))),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0))))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64))))::Float64))))
      1: 
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  _var0::Bool
  ######a#7069#7071#7229::Tuple{}
  ######b#7070#7072#7230::Tuple{}
  ####_var0#7073#7231::Tuple{}
  ##a1#7232::Float64
  ##a2#7233::Float64
  ######a#7074#7113#7234::Tuple{}
  ######b#7075#7114#7235::Tuple{}
  ######afactor#7076#7115#7236::Float64
  ######bfactor#7077#7116#7237::Float64
  ####_var0#7117#7238::Tuple{}
  ##sqrt_a#7239::Float64
  ##deriv#7240::Float64
  ####G#7205#7241::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7206#7242::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7207#7243::Tuple{}
  ##########x#7120#7122#7126#7208#7244::Float64
  ########_var0#7123#7127#7209#7245::Tuple{}
  ######types#7133#7134#7246::Tuple{Type{Float64}}
  ##a1#7247::Float64
  ##a2#7248::Float64
  ######a#7074#7113#7249::Tuple{}
  ######b#7075#7114#7250::Tuple{}
  ######afactor#7076#7115#7251::Float64
  ######bfactor#7077#7116#7252::Float64
  ####_var0#7117#7253::Tuple{}
  ######types#7133#7134#7254::Tuple{Type{Float64}}
  ##sqrt_a#7255::Float64
  ##deriv#7256::Float64
  ####G#7205#7257::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7206#7258::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7207#7259::Tuple{}
  ##########x#7120#7122#7126#7208#7260::Float64
  ########_var0#7123#7127#7209#7261::Tuple{}
  ######a#7200#7202#7262::Tuple{}
  ######b#7201#7203#7263::Tuple{}
  ####_var0#7204#7264::Tuple{}
  ##xs#7265::Tuple{}
  ##########tup#7119#7210#7214#7218#7266::Tuple{}
  ##########x#7120#7211#7215#7219#7267::Float64
  ########_var0#7212#7216#7220#7268::Tuple{}
  ##########types#7133#7213#7217#7221#7269::Tuple{Type{Float64}}
  ####a1#7222#7270::Float64
  ####a2#7223#7271::Float64
  ########a#7074#7113#7224#7272::Tuple{}
  ########b#7075#7114#7225#7273::Tuple{}
  ########afactor#7076#7115#7226#7274::Float64
  ########bfactor#7077#7116#7227#7275::Float64
  ######_var0#7117#7228#7276::Tuple{}
  ##a1#7277::Float64
  ##a2#7278::Float64
  ##div_a#7279::Float64
  ####afactor#7084#7280::Float64
  ####bfactor#7085#7281::Float64
  ########a#7074#7078#7086#7282::Tuple{}
  ########b#7075#7079#7087#7283::Tuple{}
  ########afactor#7076#7080#7088#7284::Float64
  ########bfactor#7077#7081#7089#7285::Float64
  ######_var0#7082#7090#7286::Tuple{}
  ######types#7083#7091#7287::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 83:
      NewvarNode(:s)
      GenSym(16) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 84:
      unless (Base.eq_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 7
      _var0 = (top(getfield))((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 8
      7: 
      _var0 = false
      8: 
      unless _var0::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 85:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 87:
      $(Expr(:boundscheck, false))
      ####_var0#7073#7231 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7073#7231 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 88:
      $(Expr(:boundscheck, false))
      ####_var0#7204#7264 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7204#7264 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##sqrt_a#7255 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7256 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7255::Float64))
      ####G#7205#7257 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7209#7261 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7123#7127#7209#7261 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7255::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7212#7216#7220#7268 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7212#7216#7220#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ####a1#7222#7270 = GenSym(10)
      ####a2#7223#7271 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7117#7228#7276 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7117#7228#7276 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7222#7270::Float64,####a2#7223#7271::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7232 = GenSym(3)
      ##a2#7233 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7238 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7117#7238 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7232::Float64,##a2#7233::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7239 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(5),:value)::Float64)::ANY)::Float64
      ##deriv#7240 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7239::Float64))
      ####G#7205#7241 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7209#7245 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7123#7127#7209#7245 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7239::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7247 = GenSym(7)
      ##a2#7248 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7253 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7117#7253 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7247::Float64,##a2#7248::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(14) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7277 = GenSym(14)
      ##a2#7278 = GenSym(15)
      ##div_a#7279 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7277::Float64,##a2#7278::Float64))
      ####afactor#7084#7280 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7278::Float64))
      ####bfactor#7085#7281 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7277::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7278::Float64,##a2#7278::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7082#7090#7286 = (top(tuple))()::Tuple{}
      goto 27
      ######_var0#7082#7090#7286 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7279::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64
  ##xs#7199::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 83:
      NewvarNode(:s)
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 84:
      unless (Base.eq_float)(α::Float64,β::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 85:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 87:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 88:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.box)(Base.Float64,(Base.sub_float)(β::Float64,α::Float64)))),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0))))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64))))::Float64))))
      1: 
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64
  ##xs#7199::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 83:
      NewvarNode(:s)
      GenSym(3) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 84:
      unless (Base.eq_float)(α::Float64,β::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 85:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 87:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 88:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.box)(Base.Float64,(Base.sub_float)(β::Float64,α::Float64)))),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0))))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64))))::Float64))))
      1: 
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  _var0::Bool
  ######a#7069#7071#7229::Tuple{}
  ######b#7070#7072#7230::Tuple{}
  ####_var0#7073#7231::Tuple{}
  ##a1#7232::Float64
  ##a2#7233::Float64
  ######a#7074#7113#7234::Tuple{}
  ######b#7075#7114#7235::Tuple{}
  ######afactor#7076#7115#7236::Float64
  ######bfactor#7077#7116#7237::Float64
  ####_var0#7117#7238::Tuple{}
  ##sqrt_a#7239::Float64
  ##deriv#7240::Float64
  ####G#7205#7241::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7206#7242::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7207#7243::Tuple{}
  ##########x#7120#7122#7126#7208#7244::Float64
  ########_var0#7123#7127#7209#7245::Tuple{}
  ######types#7133#7134#7246::Tuple{Type{Float64}}
  ##a1#7247::Float64
  ##a2#7248::Float64
  ######a#7074#7113#7249::Tuple{}
  ######b#7075#7114#7250::Tuple{}
  ######afactor#7076#7115#7251::Float64
  ######bfactor#7077#7116#7252::Float64
  ####_var0#7117#7253::Tuple{}
  ######types#7133#7134#7254::Tuple{Type{Float64}}
  ##sqrt_a#7255::Float64
  ##deriv#7256::Float64
  ####G#7205#7257::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7206#7258::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7207#7259::Tuple{}
  ##########x#7120#7122#7126#7208#7260::Float64
  ########_var0#7123#7127#7209#7261::Tuple{}
  ######a#7200#7202#7262::Tuple{}
  ######b#7201#7203#7263::Tuple{}
  ####_var0#7204#7264::Tuple{}
  ##xs#7265::Tuple{}
  ##########tup#7119#7210#7214#7218#7266::Tuple{}
  ##########x#7120#7211#7215#7219#7267::Float64
  ########_var0#7212#7216#7220#7268::Tuple{}
  ##########types#7133#7213#7217#7221#7269::Tuple{Type{Float64}}
  ####a1#7222#7270::Float64
  ####a2#7223#7271::Float64
  ########a#7074#7113#7224#7272::Tuple{}
  ########b#7075#7114#7225#7273::Tuple{}
  ########afactor#7076#7115#7226#7274::Float64
  ########bfactor#7077#7116#7227#7275::Float64
  ######_var0#7117#7228#7276::Tuple{}
  ##a1#7277::Float64
  ##a2#7278::Float64
  ##div_a#7279::Float64
  ####afactor#7084#7280::Float64
  ####bfactor#7085#7281::Float64
  ########a#7074#7078#7086#7282::Tuple{}
  ########b#7075#7079#7087#7283::Tuple{}
  ########afactor#7076#7080#7088#7284::Float64
  ########bfactor#7077#7081#7089#7285::Float64
  ######_var0#7082#7090#7286::Tuple{}
  ######types#7083#7091#7287::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 83:
      NewvarNode(:s)
      GenSym(16) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 84:
      unless (Base.eq_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 7
      _var0 = (top(getfield))((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 8
      7: 
      _var0 = false
      8: 
      unless _var0::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 85:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 87:
      $(Expr(:boundscheck, false))
      ####_var0#7073#7231 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7073#7231 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 88:
      $(Expr(:boundscheck, false))
      ####_var0#7204#7264 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7204#7264 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##sqrt_a#7255 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7256 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7255::Float64))
      ####G#7205#7257 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7209#7261 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7123#7127#7209#7261 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7255::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7212#7216#7220#7268 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7212#7216#7220#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ####a1#7222#7270 = GenSym(10)
      ####a2#7223#7271 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7117#7228#7276 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7117#7228#7276 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7222#7270::Float64,####a2#7223#7271::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7232 = GenSym(3)
      ##a2#7233 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7238 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7117#7238 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7232::Float64,##a2#7233::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7239 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(5),:value)::Float64)::ANY)::Float64
      ##deriv#7240 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7239::Float64))
      ####G#7205#7241 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7209#7245 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7123#7127#7209#7245 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7239::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7247 = GenSym(7)
      ##a2#7248 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7253 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7117#7253 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7247::Float64,##a2#7248::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(14) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7277 = GenSym(14)
      ##a2#7278 = GenSym(15)
      ##div_a#7279 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7277::Float64,##a2#7278::Float64))
      ####afactor#7084#7280 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7278::Float64))
      ####bfactor#7085#7281 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7277::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7278::Float64,##a2#7278::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7082#7090#7286 = (top(tuple))()::Tuple{}
      goto 27
      ######_var0#7082#7090#7286 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7279::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  _var0::Bool
  ######a#7069#7071#7229::Tuple{}
  ######b#7070#7072#7230::Tuple{}
  ####_var0#7073#7231::Tuple{}
  ##a1#7232::Float64
  ##a2#7233::Float64
  ######a#7074#7113#7234::Tuple{}
  ######b#7075#7114#7235::Tuple{}
  ######afactor#7076#7115#7236::Float64
  ######bfactor#7077#7116#7237::Float64
  ####_var0#7117#7238::Tuple{}
  ##sqrt_a#7239::Float64
  ##deriv#7240::Float64
  ####G#7205#7241::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7206#7242::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7207#7243::Tuple{}
  ##########x#7120#7122#7126#7208#7244::Float64
  ########_var0#7123#7127#7209#7245::Tuple{}
  ######types#7133#7134#7246::Tuple{Type{Float64}}
  ##a1#7247::Float64
  ##a2#7248::Float64
  ######a#7074#7113#7249::Tuple{}
  ######b#7075#7114#7250::Tuple{}
  ######afactor#7076#7115#7251::Float64
  ######bfactor#7077#7116#7252::Float64
  ####_var0#7117#7253::Tuple{}
  ######types#7133#7134#7254::Tuple{Type{Float64}}
  ##sqrt_a#7255::Float64
  ##deriv#7256::Float64
  ####G#7205#7257::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7206#7258::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7207#7259::Tuple{}
  ##########x#7120#7122#7126#7208#7260::Float64
  ########_var0#7123#7127#7209#7261::Tuple{}
  ######a#7200#7202#7262::Tuple{}
  ######b#7201#7203#7263::Tuple{}
  ####_var0#7204#7264::Tuple{}
  ##xs#7265::Tuple{}
  ##########tup#7119#7210#7214#7218#7266::Tuple{}
  ##########x#7120#7211#7215#7219#7267::Float64
  ########_var0#7212#7216#7220#7268::Tuple{}
  ##########types#7133#7213#7217#7221#7269::Tuple{Type{Float64}}
  ####a1#7222#7270::Float64
  ####a2#7223#7271::Float64
  ########a#7074#7113#7224#7272::Tuple{}
  ########b#7075#7114#7225#7273::Tuple{}
  ########afactor#7076#7115#7226#7274::Float64
  ########bfactor#7077#7116#7227#7275::Float64
  ######_var0#7117#7228#7276::Tuple{}
  ##a1#7277::Float64
  ##a2#7278::Float64
  ##div_a#7279::Float64
  ####afactor#7084#7280::Float64
  ####bfactor#7085#7281::Float64
  ########a#7074#7078#7086#7282::Tuple{}
  ########b#7075#7079#7087#7283::Tuple{}
  ########afactor#7076#7080#7088#7284::Float64
  ########bfactor#7077#7081#7089#7285::Float64
  ######_var0#7082#7090#7286::Tuple{}
  ######types#7083#7091#7287::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 83:
      NewvarNode(:s)
      GenSym(16) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 84:
      unless (Base.eq_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 7
      _var0 = (top(getfield))((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 8
      7: 
      _var0 = false
      8: 
      unless _var0::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 85:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 87:
      $(Expr(:boundscheck, false))
      ####_var0#7073#7231 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7073#7231 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 88:
      $(Expr(:boundscheck, false))
      ####_var0#7204#7264 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7204#7264 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##sqrt_a#7255 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7256 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7255::Float64))
      ####G#7205#7257 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7209#7261 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7123#7127#7209#7261 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7255::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7212#7216#7220#7268 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7212#7216#7220#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ####a1#7222#7270 = GenSym(10)
      ####a2#7223#7271 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7117#7228#7276 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7117#7228#7276 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7222#7270::Float64,####a2#7223#7271::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7232 = GenSym(3)
      ##a2#7233 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7238 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7117#7238 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7232::Float64,##a2#7233::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7239 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(5),:value)::Float64)::ANY)::Float64
      ##deriv#7240 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7239::Float64))
      ####G#7205#7241 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7209#7245 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7123#7127#7209#7245 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7239::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7247 = GenSym(7)
      ##a2#7248 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7253 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7117#7253 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7247::Float64,##a2#7248::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(14) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7277 = GenSym(14)
      ##a2#7278 = GenSym(15)
      ##div_a#7279 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7277::Float64,##a2#7278::Float64))
      ####afactor#7084#7280 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7278::Float64))
      ####bfactor#7085#7281 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7277::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7278::Float64,##a2#7278::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7082#7090#7286 = (top(tuple))()::Tuple{}
      goto 27
      ######_var0#7082#7090#7286 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7279::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  _var0::Bool
  ######a#7069#7071#7229::Tuple{}
  ######b#7070#7072#7230::Tuple{}
  ####_var0#7073#7231::Tuple{}
  ##a1#7232::Float64
  ##a2#7233::Float64
  ######a#7074#7113#7234::Tuple{}
  ######b#7075#7114#7235::Tuple{}
  ######afactor#7076#7115#7236::Float64
  ######bfactor#7077#7116#7237::Float64
  ####_var0#7117#7238::Tuple{}
  ##sqrt_a#7239::Float64
  ##deriv#7240::Float64
  ####G#7205#7241::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7206#7242::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7207#7243::Tuple{}
  ##########x#7120#7122#7126#7208#7244::Float64
  ########_var0#7123#7127#7209#7245::Tuple{}
  ######types#7133#7134#7246::Tuple{Type{Float64}}
  ##a1#7247::Float64
  ##a2#7248::Float64
  ######a#7074#7113#7249::Tuple{}
  ######b#7075#7114#7250::Tuple{}
  ######afactor#7076#7115#7251::Float64
  ######bfactor#7077#7116#7252::Float64
  ####_var0#7117#7253::Tuple{}
  ######types#7133#7134#7254::Tuple{Type{Float64}}
  ##sqrt_a#7255::Float64
  ##deriv#7256::Float64
  ####G#7205#7257::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7206#7258::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7207#7259::Tuple{}
  ##########x#7120#7122#7126#7208#7260::Float64
  ########_var0#7123#7127#7209#7261::Tuple{}
  ######a#7200#7202#7262::Tuple{}
  ######b#7201#7203#7263::Tuple{}
  ####_var0#7204#7264::Tuple{}
  ##xs#7265::Tuple{}
  ##########tup#7119#7210#7214#7218#7266::Tuple{}
  ##########x#7120#7211#7215#7219#7267::Float64
  ########_var0#7212#7216#7220#7268::Tuple{}
  ##########types#7133#7213#7217#7221#7269::Tuple{Type{Float64}}
  ####a1#7222#7270::Float64
  ####a2#7223#7271::Float64
  ########a#7074#7113#7224#7272::Tuple{}
  ########b#7075#7114#7225#7273::Tuple{}
  ########afactor#7076#7115#7226#7274::Float64
  ########bfactor#7077#7116#7227#7275::Float64
  ######_var0#7117#7228#7276::Tuple{}
  ##a1#7277::Float64
  ##a2#7278::Float64
  ##div_a#7279::Float64
  ####afactor#7084#7280::Float64
  ####bfactor#7085#7281::Float64
  ########a#7074#7078#7086#7282::Tuple{}
  ########b#7075#7079#7087#7283::Tuple{}
  ########afactor#7076#7080#7088#7284::Float64
  ########bfactor#7077#7081#7089#7285::Float64
  ######_var0#7082#7090#7286::Tuple{}
  ######types#7083#7091#7287::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 83:
      NewvarNode(:s)
      GenSym(16) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 84:
      unless (Base.eq_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 7
      _var0 = (top(getfield))((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 8
      7: 
      _var0 = false
      8: 
      unless _var0::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 85:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 87:
      $(Expr(:boundscheck, false))
      ####_var0#7073#7231 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7073#7231 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 88:
      $(Expr(:boundscheck, false))
      ####_var0#7204#7264 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7204#7264 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##sqrt_a#7255 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7256 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7255::Float64))
      ####G#7205#7257 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7209#7261 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7123#7127#7209#7261 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7255::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7212#7216#7220#7268 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7212#7216#7220#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ####a1#7222#7270 = GenSym(10)
      ####a2#7223#7271 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7117#7228#7276 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7117#7228#7276 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7222#7270::Float64,####a2#7223#7271::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7232 = GenSym(3)
      ##a2#7233 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7238 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7117#7238 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7232::Float64,##a2#7233::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7239 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(5),:value)::Float64)::ANY)::Float64
      ##deriv#7240 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7239::Float64))
      ####G#7205#7241 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7209#7245 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7123#7127#7209#7245 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7239::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7247 = GenSym(7)
      ##a2#7248 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7253 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7117#7253 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7247::Float64,##a2#7248::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(14) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7277 = GenSym(14)
      ##a2#7278 = GenSym(15)
      ##div_a#7279 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7277::Float64,##a2#7278::Float64))
      ####afactor#7084#7280 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7278::Float64))
      ####bfactor#7085#7281 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7277::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7278::Float64,##a2#7278::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7082#7090#7286 = (top(tuple))()::Tuple{}
      goto 27
      ######_var0#7082#7090#7286 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7279::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  _var0::Bool
  ######a#7069#7071#7229::Tuple{}
  ######b#7070#7072#7230::Tuple{}
  ####_var0#7073#7231::Tuple{}
  ##a1#7232::Float64
  ##a2#7233::Float64
  ######a#7074#7113#7234::Tuple{}
  ######b#7075#7114#7235::Tuple{}
  ######afactor#7076#7115#7236::Float64
  ######bfactor#7077#7116#7237::Float64
  ####_var0#7117#7238::Tuple{}
  ##sqrt_a#7239::Float64
  ##deriv#7240::Float64
  ####G#7205#7241::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7206#7242::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7207#7243::Tuple{}
  ##########x#7120#7122#7126#7208#7244::Float64
  ########_var0#7123#7127#7209#7245::Tuple{}
  ######types#7133#7134#7246::Tuple{Type{Float64}}
  ##a1#7247::Float64
  ##a2#7248::Float64
  ######a#7074#7113#7249::Tuple{}
  ######b#7075#7114#7250::Tuple{}
  ######afactor#7076#7115#7251::Float64
  ######bfactor#7077#7116#7252::Float64
  ####_var0#7117#7253::Tuple{}
  ######types#7133#7134#7254::Tuple{Type{Float64}}
  ##sqrt_a#7255::Float64
  ##deriv#7256::Float64
  ####G#7205#7257::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7206#7258::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7207#7259::Tuple{}
  ##########x#7120#7122#7126#7208#7260::Float64
  ########_var0#7123#7127#7209#7261::Tuple{}
  ######a#7200#7202#7262::Tuple{}
  ######b#7201#7203#7263::Tuple{}
  ####_var0#7204#7264::Tuple{}
  ##xs#7265::Tuple{}
  ##########tup#7119#7210#7214#7218#7266::Tuple{}
  ##########x#7120#7211#7215#7219#7267::Float64
  ########_var0#7212#7216#7220#7268::Tuple{}
  ##########types#7133#7213#7217#7221#7269::Tuple{Type{Float64}}
  ####a1#7222#7270::Float64
  ####a2#7223#7271::Float64
  ########a#7074#7113#7224#7272::Tuple{}
  ########b#7075#7114#7225#7273::Tuple{}
  ########afactor#7076#7115#7226#7274::Float64
  ########bfactor#7077#7116#7227#7275::Float64
  ######_var0#7117#7228#7276::Tuple{}
  ##a1#7277::Float64
  ##a2#7278::Float64
  ##div_a#7279::Float64
  ####afactor#7084#7280::Float64
  ####bfactor#7085#7281::Float64
  ########a#7074#7078#7086#7282::Tuple{}
  ########b#7075#7079#7087#7283::Tuple{}
  ########afactor#7076#7080#7088#7284::Float64
  ########bfactor#7077#7081#7089#7285::Float64
  ######_var0#7082#7090#7286::Tuple{}
  ######types#7083#7091#7287::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 83:
      NewvarNode(:s)
      GenSym(16) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 84:
      unless (Base.eq_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 7
      _var0 = (top(getfield))((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 8
      7: 
      _var0 = false
      8: 
      unless _var0::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 85:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 87:
      $(Expr(:boundscheck, false))
      ####_var0#7073#7231 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7073#7231 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 88:
      $(Expr(:boundscheck, false))
      ####_var0#7204#7264 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7204#7264 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##sqrt_a#7255 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7256 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7255::Float64))
      ####G#7205#7257 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7209#7261 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7123#7127#7209#7261 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7255::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7212#7216#7220#7268 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7212#7216#7220#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ####a1#7222#7270 = GenSym(10)
      ####a2#7223#7271 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7117#7228#7276 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7117#7228#7276 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7222#7270::Float64,####a2#7223#7271::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7232 = GenSym(3)
      ##a2#7233 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7238 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7117#7238 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7232::Float64,##a2#7233::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7239 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(5),:value)::Float64)::ANY)::Float64
      ##deriv#7240 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7239::Float64))
      ####G#7205#7241 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7209#7245 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7123#7127#7209#7245 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7239::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7247 = GenSym(7)
      ##a2#7248 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7253 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7117#7253 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7247::Float64,##a2#7248::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(14) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7277 = GenSym(14)
      ##a2#7278 = GenSym(15)
      ##div_a#7279 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7277::Float64,##a2#7278::Float64))
      ####afactor#7084#7280 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7278::Float64))
      ####bfactor#7085#7281 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7277::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7278::Float64,##a2#7278::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7082#7090#7286 = (top(tuple))()::Tuple{}
      goto 27
      ######_var0#7082#7090#7286 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7279::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64
  p::Float64
  ##xs#7288::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 93:
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(6) = GenSym(4)
      GenSym(7) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(6)
      #s25 = GenSym(7)
      GenSym(8) = GenSym(5)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(8)
      #s25 = GenSym(9) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 94:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 95:
      p = (Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 96:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(α::Float64,β::Float64))
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(6.0,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),GenSym(3))),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0)))),(Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)))))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)))),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,3.0))))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64
  p::Float64
  ##xs#7288::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 93:
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(6) = GenSym(4)
      GenSym(7) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(6)
      #s25 = GenSym(7)
      GenSym(8) = GenSym(5)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(8)
      #s25 = GenSym(9) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 94:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 95:
      p = (Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 96:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(α::Float64,β::Float64))
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(6.0,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),GenSym(3))),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0)))),(Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)))))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)))),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,3.0))))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7069#7071#7303::Tuple{}
  ######b#7070#7072#7304::Tuple{}
  ####_var0#7073#7305::Tuple{}
  ##a1#7306::Float64
  ##a2#7307::Float64
  ######a#7074#7113#7308::Tuple{}
  ######b#7075#7114#7309::Tuple{}
  ######afactor#7076#7115#7310::Float64
  ######bfactor#7077#7116#7311::Float64
  ####_var0#7117#7312::Tuple{}
  ######types#7133#7134#7313::Tuple{Type{Float64}}
  ######types#7133#7134#7314::Tuple{Type{Float64}}
  ##xs#7315::Tuple{}
  ####a1#7289#7316::Float64
  ####a2#7290#7317::Float64
  ########a#7074#7113#7291#7318::Tuple{}
  ########b#7075#7114#7292#7319::Tuple{}
  ########afactor#7076#7115#7293#7320::Float64
  ########bfactor#7077#7116#7294#7321::Float64
  ######_var0#7117#7295#7322::Tuple{}
  ####a1#7296#7323::Float64
  ####a2#7297#7324::Float64
  ########a#7074#7113#7298#7325::Tuple{}
  ########b#7075#7114#7299#7326::Tuple{}
  ########afactor#7076#7115#7300#7327::Float64
  ########bfactor#7077#7116#7301#7328::Float64
  ######_var0#7117#7302#7329::Tuple{}
  ######types#7133#7134#7330::Tuple{Type{Float64}}
  ##a1#7331::Float64
  ##a2#7332::Float64
  ######a#7074#7113#7333::Tuple{}
  ######b#7075#7114#7334::Tuple{}
  ######afactor#7076#7115#7335::Float64
  ######bfactor#7077#7116#7336::Float64
  ####_var0#7117#7337::Tuple{}
  ######types#7133#7134#7338::Tuple{Type{Float64}}
  ######a#7200#7202#7339::Tuple{}
  ######b#7201#7203#7340::Tuple{}
  ####_var0#7204#7341::Tuple{}
  ##a#7342::Float64
  ####G#7128#7343::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7129#7344::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7130#7345::Tuple{}
  ##########x#7120#7122#7126#7131#7346::Float64
  ########_var0#7123#7127#7132#7347::Tuple{}
  ##a1#7348::Float64
  ##a2#7349::Float64
  ######a#7074#7113#7350::Tuple{}
  ######b#7075#7114#7351::Tuple{}
  ######afactor#7076#7115#7352::Float64
  ######bfactor#7077#7116#7353::Float64
  ####_var0#7117#7354::Tuple{}
  ######a#7200#7202#7355::Tuple{}
  ######b#7201#7203#7356::Tuple{}
  ####_var0#7204#7357::Tuple{}
  ########tup#7119#7210#7214#7358::Tuple{}
  ########x#7120#7211#7215#7359::Float64
  ######_var0#7212#7216#7360::Tuple{}
  ########types#7133#7213#7217#7361::Tuple{Type{Float64}}
  ##a1#7362::Float64
  ##a2#7363::Float64
  ##div_a#7364::Float64
  ####afactor#7084#7365::Float64
  ####bfactor#7085#7366::Float64
  ########a#7074#7078#7086#7367::Tuple{}
  ########b#7075#7079#7087#7368::Tuple{}
  ########afactor#7076#7080#7088#7369::Float64
  ########bfactor#7077#7081#7089#7370::Float64
  ######_var0#7082#7090#7371::Tuple{}
  ######types#7083#7091#7372::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 93:
      GenSym(20) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(22) = GenSym(20)
      GenSym(23) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(22)
      #s25 = GenSym(23)
      GenSym(24) = GenSym(21)
      GenSym(25) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(24)
      #s25 = GenSym(25) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 94:
      $(Expr(:boundscheck, false))
      ####_var0#7073#7305 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7073#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 95:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7306 = GenSym(3)
      ##a2#7307 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7312 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7117#7312 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      p = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7306::Float64,##a2#7307::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 96:
      $(Expr(:boundscheck, false))
      ####_var0#7204#7341 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7204#7341 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7342 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####G#7128#7343 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7132#7347 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7123#7127#7132#7347 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7342::Float64,##a#7342::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7348 = GenSym(13)
      ##a2#7349 = GenSym(14)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7354 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7117#7354 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7348::Float64,##a2#7349::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7331 = GenSym(10)
      ##a2#7332 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7337 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7117#7337 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7331::Float64,##a2#7332::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7204#7357 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7204#7357 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7212#7216#7360 = (top(tuple))()::Tuple{}
      goto 26
      ######_var0#7212#7216#7360 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(5) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7289#7316 = GenSym(5)
      ####a2#7290#7317 = GenSym(6)
      $(Expr(:boundscheck, false))
      ######_var0#7117#7295#7322 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7117#7295#7322 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7289#7316::Float64,####a2#7290#7317::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7296#7323 = GenSym(8)
      ####a2#7297#7324 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7117#7302#7329 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7117#7302#7329 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(17) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7296#7323::Float64,####a2#7297#7324::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(15),:value)::Float64,(top(getfield))(GenSym(16),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(getfield))(GenSym(17),:value)::Float64
      ##a1#7362 = GenSym(18)
      ##a2#7363 = GenSym(19)
      ##div_a#7364 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7362::Float64,##a2#7363::Float64))
      ####afactor#7084#7365 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7363::Float64))
      ####bfactor#7085#7366 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7362::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7363::Float64,##a2#7363::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7082#7090#7371 = (top(tuple))()::Tuple{}
      goto 28
      ######_var0#7082#7090#7371 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7364::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64
  p::Float64
  ##xs#7288::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 93:
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(6) = GenSym(4)
      GenSym(7) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(6)
      #s25 = GenSym(7)
      GenSym(8) = GenSym(5)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(8)
      #s25 = GenSym(9) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 94:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 95:
      p = (Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 96:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(α::Float64,β::Float64))
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(6.0,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),GenSym(3))),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0)))),(Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)))))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)))),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,3.0))))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64
  p::Float64
  ##xs#7288::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 93:
      GenSym(4) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(6) = GenSym(4)
      GenSym(7) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(6)
      #s25 = GenSym(7)
      GenSym(8) = GenSym(5)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(8)
      #s25 = GenSym(9) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 94:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 95:
      p = (Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 96:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(α::Float64,β::Float64))
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(6.0,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),GenSym(3))),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,1.0)))),(Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)))))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(Base.box)(Base.Float64,(Base.add_float)(s::Float64,2.0)))),(Base.box)(Base.Float64,(Base.add_float)(s::Float64,3.0))))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7069#7071#7303::Tuple{}
  ######b#7070#7072#7304::Tuple{}
  ####_var0#7073#7305::Tuple{}
  ##a1#7306::Float64
  ##a2#7307::Float64
  ######a#7074#7113#7308::Tuple{}
  ######b#7075#7114#7309::Tuple{}
  ######afactor#7076#7115#7310::Float64
  ######bfactor#7077#7116#7311::Float64
  ####_var0#7117#7312::Tuple{}
  ######types#7133#7134#7313::Tuple{Type{Float64}}
  ######types#7133#7134#7314::Tuple{Type{Float64}}
  ##xs#7315::Tuple{}
  ####a1#7289#7316::Float64
  ####a2#7290#7317::Float64
  ########a#7074#7113#7291#7318::Tuple{}
  ########b#7075#7114#7292#7319::Tuple{}
  ########afactor#7076#7115#7293#7320::Float64
  ########bfactor#7077#7116#7294#7321::Float64
  ######_var0#7117#7295#7322::Tuple{}
  ####a1#7296#7323::Float64
  ####a2#7297#7324::Float64
  ########a#7074#7113#7298#7325::Tuple{}
  ########b#7075#7114#7299#7326::Tuple{}
  ########afactor#7076#7115#7300#7327::Float64
  ########bfactor#7077#7116#7301#7328::Float64
  ######_var0#7117#7302#7329::Tuple{}
  ######types#7133#7134#7330::Tuple{Type{Float64}}
  ##a1#7331::Float64
  ##a2#7332::Float64
  ######a#7074#7113#7333::Tuple{}
  ######b#7075#7114#7334::Tuple{}
  ######afactor#7076#7115#7335::Float64
  ######bfactor#7077#7116#7336::Float64
  ####_var0#7117#7337::Tuple{}
  ######types#7133#7134#7338::Tuple{Type{Float64}}
  ######a#7200#7202#7339::Tuple{}
  ######b#7201#7203#7340::Tuple{}
  ####_var0#7204#7341::Tuple{}
  ##a#7342::Float64
  ####G#7128#7343::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7129#7344::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7130#7345::Tuple{}
  ##########x#7120#7122#7126#7131#7346::Float64
  ########_var0#7123#7127#7132#7347::Tuple{}
  ##a1#7348::Float64
  ##a2#7349::Float64
  ######a#7074#7113#7350::Tuple{}
  ######b#7075#7114#7351::Tuple{}
  ######afactor#7076#7115#7352::Float64
  ######bfactor#7077#7116#7353::Float64
  ####_var0#7117#7354::Tuple{}
  ######a#7200#7202#7355::Tuple{}
  ######b#7201#7203#7356::Tuple{}
  ####_var0#7204#7357::Tuple{}
  ########tup#7119#7210#7214#7358::Tuple{}
  ########x#7120#7211#7215#7359::Float64
  ######_var0#7212#7216#7360::Tuple{}
  ########types#7133#7213#7217#7361::Tuple{Type{Float64}}
  ##a1#7362::Float64
  ##a2#7363::Float64
  ##div_a#7364::Float64
  ####afactor#7084#7365::Float64
  ####bfactor#7085#7366::Float64
  ########a#7074#7078#7086#7367::Tuple{}
  ########b#7075#7079#7087#7368::Tuple{}
  ########afactor#7076#7080#7088#7369::Float64
  ########bfactor#7077#7081#7089#7370::Float64
  ######_var0#7082#7090#7371::Tuple{}
  ######types#7083#7091#7372::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 93:
      GenSym(20) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(22) = GenSym(20)
      GenSym(23) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(22)
      #s25 = GenSym(23)
      GenSym(24) = GenSym(21)
      GenSym(25) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(24)
      #s25 = GenSym(25) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 94:
      $(Expr(:boundscheck, false))
      ####_var0#7073#7305 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7073#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 95:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7306 = GenSym(3)
      ##a2#7307 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7312 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7117#7312 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      p = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7306::Float64,##a2#7307::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 96:
      $(Expr(:boundscheck, false))
      ####_var0#7204#7341 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7204#7341 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7342 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####G#7128#7343 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7132#7347 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7123#7127#7132#7347 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7342::Float64,##a#7342::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7348 = GenSym(13)
      ##a2#7349 = GenSym(14)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7354 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7117#7354 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7348::Float64,##a2#7349::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7331 = GenSym(10)
      ##a2#7332 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7337 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7117#7337 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7331::Float64,##a2#7332::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7204#7357 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7204#7357 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7212#7216#7360 = (top(tuple))()::Tuple{}
      goto 26
      ######_var0#7212#7216#7360 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(5) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7289#7316 = GenSym(5)
      ####a2#7290#7317 = GenSym(6)
      $(Expr(:boundscheck, false))
      ######_var0#7117#7295#7322 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7117#7295#7322 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7289#7316::Float64,####a2#7290#7317::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7296#7323 = GenSym(8)
      ####a2#7297#7324 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7117#7302#7329 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7117#7302#7329 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(17) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7296#7323::Float64,####a2#7297#7324::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(15),:value)::Float64,(top(getfield))(GenSym(16),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(getfield))(GenSym(17),:value)::Float64
      ##a1#7362 = GenSym(18)
      ##a2#7363 = GenSym(19)
      ##div_a#7364 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7362::Float64,##a2#7363::Float64))
      ####afactor#7084#7365 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7363::Float64))
      ####bfactor#7085#7366 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7362::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7363::Float64,##a2#7363::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7082#7090#7371 = (top(tuple))()::Tuple{}
      goto 28
      ######_var0#7082#7090#7371 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7364::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7069#7071#7303::Tuple{}
  ######b#7070#7072#7304::Tuple{}
  ####_var0#7073#7305::Tuple{}
  ##a1#7306::Float64
  ##a2#7307::Float64
  ######a#7074#7113#7308::Tuple{}
  ######b#7075#7114#7309::Tuple{}
  ######afactor#7076#7115#7310::Float64
  ######bfactor#7077#7116#7311::Float64
  ####_var0#7117#7312::Tuple{}
  ######types#7133#7134#7313::Tuple{Type{Float64}}
  ######types#7133#7134#7314::Tuple{Type{Float64}}
  ##xs#7315::Tuple{}
  ####a1#7289#7316::Float64
  ####a2#7290#7317::Float64
  ########a#7074#7113#7291#7318::Tuple{}
  ########b#7075#7114#7292#7319::Tuple{}
  ########afactor#7076#7115#7293#7320::Float64
  ########bfactor#7077#7116#7294#7321::Float64
  ######_var0#7117#7295#7322::Tuple{}
  ####a1#7296#7323::Float64
  ####a2#7297#7324::Float64
  ########a#7074#7113#7298#7325::Tuple{}
  ########b#7075#7114#7299#7326::Tuple{}
  ########afactor#7076#7115#7300#7327::Float64
  ########bfactor#7077#7116#7301#7328::Float64
  ######_var0#7117#7302#7329::Tuple{}
  ######types#7133#7134#7330::Tuple{Type{Float64}}
  ##a1#7331::Float64
  ##a2#7332::Float64
  ######a#7074#7113#7333::Tuple{}
  ######b#7075#7114#7334::Tuple{}
  ######afactor#7076#7115#7335::Float64
  ######bfactor#7077#7116#7336::Float64
  ####_var0#7117#7337::Tuple{}
  ######types#7133#7134#7338::Tuple{Type{Float64}}
  ######a#7200#7202#7339::Tuple{}
  ######b#7201#7203#7340::Tuple{}
  ####_var0#7204#7341::Tuple{}
  ##a#7342::Float64
  ####G#7128#7343::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7129#7344::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7130#7345::Tuple{}
  ##########x#7120#7122#7126#7131#7346::Float64
  ########_var0#7123#7127#7132#7347::Tuple{}
  ##a1#7348::Float64
  ##a2#7349::Float64
  ######a#7074#7113#7350::Tuple{}
  ######b#7075#7114#7351::Tuple{}
  ######afactor#7076#7115#7352::Float64
  ######bfactor#7077#7116#7353::Float64
  ####_var0#7117#7354::Tuple{}
  ######a#7200#7202#7355::Tuple{}
  ######b#7201#7203#7356::Tuple{}
  ####_var0#7204#7357::Tuple{}
  ########tup#7119#7210#7214#7358::Tuple{}
  ########x#7120#7211#7215#7359::Float64
  ######_var0#7212#7216#7360::Tuple{}
  ########types#7133#7213#7217#7361::Tuple{Type{Float64}}
  ##a1#7362::Float64
  ##a2#7363::Float64
  ##div_a#7364::Float64
  ####afactor#7084#7365::Float64
  ####bfactor#7085#7366::Float64
  ########a#7074#7078#7086#7367::Tuple{}
  ########b#7075#7079#7087#7368::Tuple{}
  ########afactor#7076#7080#7088#7369::Float64
  ########bfactor#7077#7081#7089#7370::Float64
  ######_var0#7082#7090#7371::Tuple{}
  ######types#7083#7091#7372::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 93:
      GenSym(20) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(22) = GenSym(20)
      GenSym(23) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(22)
      #s25 = GenSym(23)
      GenSym(24) = GenSym(21)
      GenSym(25) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(24)
      #s25 = GenSym(25) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 94:
      $(Expr(:boundscheck, false))
      ####_var0#7073#7305 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7073#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 95:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7306 = GenSym(3)
      ##a2#7307 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7312 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7117#7312 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      p = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7306::Float64,##a2#7307::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 96:
      $(Expr(:boundscheck, false))
      ####_var0#7204#7341 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7204#7341 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7342 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####G#7128#7343 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7132#7347 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7123#7127#7132#7347 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7342::Float64,##a#7342::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7348 = GenSym(13)
      ##a2#7349 = GenSym(14)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7354 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7117#7354 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7348::Float64,##a2#7349::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7331 = GenSym(10)
      ##a2#7332 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7337 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7117#7337 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7331::Float64,##a2#7332::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7204#7357 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7204#7357 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7212#7216#7360 = (top(tuple))()::Tuple{}
      goto 26
      ######_var0#7212#7216#7360 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(5) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7289#7316 = GenSym(5)
      ####a2#7290#7317 = GenSym(6)
      $(Expr(:boundscheck, false))
      ######_var0#7117#7295#7322 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7117#7295#7322 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7289#7316::Float64,####a2#7290#7317::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7296#7323 = GenSym(8)
      ####a2#7297#7324 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7117#7302#7329 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7117#7302#7329 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(17) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7296#7323::Float64,####a2#7297#7324::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(15),:value)::Float64,(top(getfield))(GenSym(16),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(getfield))(GenSym(17),:value)::Float64
      ##a1#7362 = GenSym(18)
      ##a2#7363 = GenSym(19)
      ##div_a#7364 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7362::Float64,##a2#7363::Float64))
      ####afactor#7084#7365 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7363::Float64))
      ####bfactor#7085#7366 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7362::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7363::Float64,##a2#7363::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7082#7090#7371 = (top(tuple))()::Tuple{}
      goto 28
      ######_var0#7082#7090#7371 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7364::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7069#7071#7303::Tuple{}
  ######b#7070#7072#7304::Tuple{}
  ####_var0#7073#7305::Tuple{}
  ##a1#7306::Float64
  ##a2#7307::Float64
  ######a#7074#7113#7308::Tuple{}
  ######b#7075#7114#7309::Tuple{}
  ######afactor#7076#7115#7310::Float64
  ######bfactor#7077#7116#7311::Float64
  ####_var0#7117#7312::Tuple{}
  ######types#7133#7134#7313::Tuple{Type{Float64}}
  ######types#7133#7134#7314::Tuple{Type{Float64}}
  ##xs#7315::Tuple{}
  ####a1#7289#7316::Float64
  ####a2#7290#7317::Float64
  ########a#7074#7113#7291#7318::Tuple{}
  ########b#7075#7114#7292#7319::Tuple{}
  ########afactor#7076#7115#7293#7320::Float64
  ########bfactor#7077#7116#7294#7321::Float64
  ######_var0#7117#7295#7322::Tuple{}
  ####a1#7296#7323::Float64
  ####a2#7297#7324::Float64
  ########a#7074#7113#7298#7325::Tuple{}
  ########b#7075#7114#7299#7326::Tuple{}
  ########afactor#7076#7115#7300#7327::Float64
  ########bfactor#7077#7116#7301#7328::Float64
  ######_var0#7117#7302#7329::Tuple{}
  ######types#7133#7134#7330::Tuple{Type{Float64}}
  ##a1#7331::Float64
  ##a2#7332::Float64
  ######a#7074#7113#7333::Tuple{}
  ######b#7075#7114#7334::Tuple{}
  ######afactor#7076#7115#7335::Float64
  ######bfactor#7077#7116#7336::Float64
  ####_var0#7117#7337::Tuple{}
  ######types#7133#7134#7338::Tuple{Type{Float64}}
  ######a#7200#7202#7339::Tuple{}
  ######b#7201#7203#7340::Tuple{}
  ####_var0#7204#7341::Tuple{}
  ##a#7342::Float64
  ####G#7128#7343::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7129#7344::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7130#7345::Tuple{}
  ##########x#7120#7122#7126#7131#7346::Float64
  ########_var0#7123#7127#7132#7347::Tuple{}
  ##a1#7348::Float64
  ##a2#7349::Float64
  ######a#7074#7113#7350::Tuple{}
  ######b#7075#7114#7351::Tuple{}
  ######afactor#7076#7115#7352::Float64
  ######bfactor#7077#7116#7353::Float64
  ####_var0#7117#7354::Tuple{}
  ######a#7200#7202#7355::Tuple{}
  ######b#7201#7203#7356::Tuple{}
  ####_var0#7204#7357::Tuple{}
  ########tup#7119#7210#7214#7358::Tuple{}
  ########x#7120#7211#7215#7359::Float64
  ######_var0#7212#7216#7360::Tuple{}
  ########types#7133#7213#7217#7361::Tuple{Type{Float64}}
  ##a1#7362::Float64
  ##a2#7363::Float64
  ##div_a#7364::Float64
  ####afactor#7084#7365::Float64
  ####bfactor#7085#7366::Float64
  ########a#7074#7078#7086#7367::Tuple{}
  ########b#7075#7079#7087#7368::Tuple{}
  ########afactor#7076#7080#7088#7369::Float64
  ########bfactor#7077#7081#7089#7370::Float64
  ######_var0#7082#7090#7371::Tuple{}
  ######types#7083#7091#7372::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 93:
      GenSym(20) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(22) = GenSym(20)
      GenSym(23) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(22)
      #s25 = GenSym(23)
      GenSym(24) = GenSym(21)
      GenSym(25) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(24)
      #s25 = GenSym(25) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 94:
      $(Expr(:boundscheck, false))
      ####_var0#7073#7305 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7073#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 95:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7306 = GenSym(3)
      ##a2#7307 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7312 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7117#7312 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      p = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7306::Float64,##a2#7307::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 96:
      $(Expr(:boundscheck, false))
      ####_var0#7204#7341 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7204#7341 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7342 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####G#7128#7343 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7132#7347 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7123#7127#7132#7347 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7342::Float64,##a#7342::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7348 = GenSym(13)
      ##a2#7349 = GenSym(14)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7354 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7117#7354 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7348::Float64,##a2#7349::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7331 = GenSym(10)
      ##a2#7332 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7337 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7117#7337 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7331::Float64,##a2#7332::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7204#7357 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7204#7357 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7212#7216#7360 = (top(tuple))()::Tuple{}
      goto 26
      ######_var0#7212#7216#7360 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(5) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7289#7316 = GenSym(5)
      ####a2#7290#7317 = GenSym(6)
      $(Expr(:boundscheck, false))
      ######_var0#7117#7295#7322 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7117#7295#7322 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7289#7316::Float64,####a2#7290#7317::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7296#7323 = GenSym(8)
      ####a2#7297#7324 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7117#7302#7329 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7117#7302#7329 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(17) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7296#7323::Float64,####a2#7297#7324::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(15),:value)::Float64,(top(getfield))(GenSym(16),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(getfield))(GenSym(17),:value)::Float64
      ##a1#7362 = GenSym(18)
      ##a2#7363 = GenSym(19)
      ##div_a#7364 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7362::Float64,##a2#7363::Float64))
      ####afactor#7084#7365 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7363::Float64))
      ####bfactor#7085#7366 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7362::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7363::Float64,##a2#7363::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7082#7090#7371 = (top(tuple))()::Tuple{}
      goto 28
      ######_var0#7082#7090#7371 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7364::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7069#7071#7303::Tuple{}
  ######b#7070#7072#7304::Tuple{}
  ####_var0#7073#7305::Tuple{}
  ##a1#7306::Float64
  ##a2#7307::Float64
  ######a#7074#7113#7308::Tuple{}
  ######b#7075#7114#7309::Tuple{}
  ######afactor#7076#7115#7310::Float64
  ######bfactor#7077#7116#7311::Float64
  ####_var0#7117#7312::Tuple{}
  ######types#7133#7134#7313::Tuple{Type{Float64}}
  ######types#7133#7134#7314::Tuple{Type{Float64}}
  ##xs#7315::Tuple{}
  ####a1#7289#7316::Float64
  ####a2#7290#7317::Float64
  ########a#7074#7113#7291#7318::Tuple{}
  ########b#7075#7114#7292#7319::Tuple{}
  ########afactor#7076#7115#7293#7320::Float64
  ########bfactor#7077#7116#7294#7321::Float64
  ######_var0#7117#7295#7322::Tuple{}
  ####a1#7296#7323::Float64
  ####a2#7297#7324::Float64
  ########a#7074#7113#7298#7325::Tuple{}
  ########b#7075#7114#7299#7326::Tuple{}
  ########afactor#7076#7115#7300#7327::Float64
  ########bfactor#7077#7116#7301#7328::Float64
  ######_var0#7117#7302#7329::Tuple{}
  ######types#7133#7134#7330::Tuple{Type{Float64}}
  ##a1#7331::Float64
  ##a2#7332::Float64
  ######a#7074#7113#7333::Tuple{}
  ######b#7075#7114#7334::Tuple{}
  ######afactor#7076#7115#7335::Float64
  ######bfactor#7077#7116#7336::Float64
  ####_var0#7117#7337::Tuple{}
  ######types#7133#7134#7338::Tuple{Type{Float64}}
  ######a#7200#7202#7339::Tuple{}
  ######b#7201#7203#7340::Tuple{}
  ####_var0#7204#7341::Tuple{}
  ##a#7342::Float64
  ####G#7128#7343::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7129#7344::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7130#7345::Tuple{}
  ##########x#7120#7122#7126#7131#7346::Float64
  ########_var0#7123#7127#7132#7347::Tuple{}
  ##a1#7348::Float64
  ##a2#7349::Float64
  ######a#7074#7113#7350::Tuple{}
  ######b#7075#7114#7351::Tuple{}
  ######afactor#7076#7115#7352::Float64
  ######bfactor#7077#7116#7353::Float64
  ####_var0#7117#7354::Tuple{}
  ######a#7200#7202#7355::Tuple{}
  ######b#7201#7203#7356::Tuple{}
  ####_var0#7204#7357::Tuple{}
  ########tup#7119#7210#7214#7358::Tuple{}
  ########x#7120#7211#7215#7359::Float64
  ######_var0#7212#7216#7360::Tuple{}
  ########types#7133#7213#7217#7361::Tuple{Type{Float64}}
  ##a1#7362::Float64
  ##a2#7363::Float64
  ##div_a#7364::Float64
  ####afactor#7084#7365::Float64
  ####bfactor#7085#7366::Float64
  ########a#7074#7078#7086#7367::Tuple{}
  ########b#7075#7079#7087#7368::Tuple{}
  ########afactor#7076#7080#7088#7369::Float64
  ########bfactor#7077#7081#7089#7370::Float64
  ######_var0#7082#7090#7371::Tuple{}
  ######types#7083#7091#7372::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 93:
      GenSym(20) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(22) = GenSym(20)
      GenSym(23) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(22)
      #s25 = GenSym(23)
      GenSym(24) = GenSym(21)
      GenSym(25) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(24)
      #s25 = GenSym(25) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 94:
      $(Expr(:boundscheck, false))
      ####_var0#7073#7305 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7073#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 95:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7306 = GenSym(3)
      ##a2#7307 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7312 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7117#7312 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      p = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7306::Float64,##a2#7307::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 96:
      $(Expr(:boundscheck, false))
      ####_var0#7204#7341 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7204#7341 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7342 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####G#7128#7343 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7132#7347 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7123#7127#7132#7347 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7342::Float64,##a#7342::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7348 = GenSym(13)
      ##a2#7349 = GenSym(14)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7354 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7117#7354 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7348::Float64,##a2#7349::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7331 = GenSym(10)
      ##a2#7332 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7337 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7117#7337 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7331::Float64,##a2#7332::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7204#7357 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7204#7357 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7212#7216#7360 = (top(tuple))()::Tuple{}
      goto 26
      ######_var0#7212#7216#7360 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(5) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7289#7316 = GenSym(5)
      ####a2#7290#7317 = GenSym(6)
      $(Expr(:boundscheck, false))
      ######_var0#7117#7295#7322 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7117#7295#7322 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7289#7316::Float64,####a2#7290#7317::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7296#7323 = GenSym(8)
      ####a2#7297#7324 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7117#7302#7329 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7117#7302#7329 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(17) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7296#7323::Float64,####a2#7297#7324::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(15),:value)::Float64,(top(getfield))(GenSym(16),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(getfield))(GenSym(17),:value)::Float64
      ##a1#7362 = GenSym(18)
      ##a2#7363 = GenSym(19)
      ##div_a#7364 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7362::Float64,##a2#7363::Float64))
      ####afactor#7084#7365 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7363::Float64))
      ####bfactor#7085#7366 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7362::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7363::Float64,##a2#7363::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7082#7090#7371 = (top(tuple))()::Tuple{}
      goto 28
      ######_var0#7082#7090#7371 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7364::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 100:
      GenSym(13) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(14) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 101:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 102:
      GenSym(12) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,α::Float64,0)::Float64
      GenSym(10) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,β::Float64,0)::Float64
      GenSym(6) = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))
      GenSym(8) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(5) = (Distributions.digamma)(α::Float64)::Float64
      GenSym(4) = (Distributions.digamma)(β::Float64)::Float64
      GenSym(3) = (Distributions.digamma)(s::Float64)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.Math.nan_dom_err)(GenSym(12),α::Float64)::Float64,(Base.Math.nan_dom_err)(GenSym(10),β::Float64)::Float64)),(Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),GenSym(5))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(β::Float64,1.0)),GenSym(4))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(s::Float64,2.0)),GenSym(3)))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 100:
      GenSym(13) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(14) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 101:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 102:
      GenSym(12) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,α::Float64,0)::Float64
      GenSym(10) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,β::Float64,0)::Float64
      GenSym(6) = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))
      GenSym(8) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(5) = (Distributions.digamma)(α::Float64)::Float64
      GenSym(4) = (Distributions.digamma)(β::Float64)::Float64
      GenSym(3) = (Distributions.digamma)(s::Float64)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.Math.nan_dom_err)(GenSym(12),α::Float64)::Float64,(Base.Math.nan_dom_err)(GenSym(10),β::Float64)::Float64)),(Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),GenSym(5))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(β::Float64,1.0)),GenSym(4))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(s::Float64,2.0)),GenSym(3)))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7069#7071#7415::Tuple{}
  ######b#7070#7072#7416::Tuple{}
  ####_var0#7073#7417::Tuple{}
  ##a#7418::Float64
  ####G#7410#7419::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7411#7420::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7412#7421::Tuple{}
  ##########x#7120#7122#7126#7413#7422::Float64
  ########_var0#7123#7127#7414#7423::Tuple{}
  ######types#7133#7178#7424::Tuple{Type{Float64}}
  ##a1#7425::Float64
  ##a2#7426::Float64
  ######a#7074#7113#7427::Tuple{}
  ######b#7075#7114#7428::Tuple{}
  ######afactor#7076#7115#7429::Float64
  ######bfactor#7077#7116#7430::Float64
  ####_var0#7117#7431::Tuple{}
  ##a#7432::Float64
  ####G#7410#7433::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7411#7434::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7412#7435::Tuple{}
  ##########x#7120#7122#7126#7413#7436::Float64
  ########_var0#7123#7127#7414#7437::Tuple{}
  ######types#7133#7178#7438::Tuple{Type{Float64}}
  ##a1#7439::Float64
  ##a2#7440::Float64
  ######a#7074#7113#7441::Tuple{}
  ######b#7075#7114#7442::Tuple{}
  ######afactor#7076#7115#7443::Float64
  ######bfactor#7077#7116#7444::Float64
  ####_var0#7117#7445::Tuple{}
  ##a#7446::Float64
  ####G#7410#7447::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7411#7448::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7412#7449::Tuple{}
  ##########x#7120#7122#7126#7413#7450::Float64
  ########_var0#7123#7127#7414#7451::Tuple{}
  ######types#7133#7178#7452::Tuple{Type{Float64}}
  ##a1#7453::Float64
  ##a2#7454::Float64
  ######a#7074#7113#7455::Tuple{}
  ######b#7075#7114#7456::Tuple{}
  ######afactor#7076#7115#7457::Float64
  ######bfactor#7077#7116#7458::Float64
  ####_var0#7117#7459::Tuple{}
  ######a#7200#7202#7460::Tuple{}
  ######b#7201#7203#7461::Tuple{}
  ####_var0#7204#7462::Tuple{}
  ######a#7200#7202#7463::Tuple{}
  ######b#7201#7203#7464::Tuple{}
  ####_var0#7204#7465::Tuple{}
  ######a#7069#7071#7466::Tuple{}
  ######b#7070#7072#7467::Tuple{}
  ####_var0#7073#7468::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 100:
      GenSym(16) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 101:
      $(Expr(:boundscheck, false))
      ####_var0#7073#7417 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7073#7417 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 102:
      GenSym(12) = (Distributions.lbeta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7446 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (ForwardDiff.digamma)(##a#7446::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7446::Float64)::Float64
      ####G#7410#7447 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7414#7451 = (top(tuple))()::Tuple{}
      goto 17
      ########_var0#7123#7127#7414#7451 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(9), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7453 = GenSym(10)
      ##a2#7454 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7459 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7117#7459 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7453::Float64,##a2#7454::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7204#7462 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7204#7462 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##a#7432 = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (ForwardDiff.digamma)(##a#7432::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7432::Float64)::Float64
      ####G#7410#7433 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7414#7437 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7123#7127#7414#7437 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(6), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7439 = GenSym(7)
      ##a2#7440 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7445 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7117#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7439::Float64,##a2#7440::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7204#7465 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7204#7465 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7418 = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7418::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7418::Float64)::Float64
      ####G#7410#7419 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7414#7423 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7123#7127#7414#7423 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(3), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7425 = GenSym(4)
      ##a2#7426 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7431 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7117#7431 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7425::Float64,##a2#7426::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7073#7468 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7073#7468 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(12),:value)::Float64,(top(getfield))(GenSym(13),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(14),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 100:
      GenSym(13) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(14) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 101:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 102:
      GenSym(12) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,α::Float64,0)::Float64
      GenSym(10) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,β::Float64,0)::Float64
      GenSym(6) = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))
      GenSym(8) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(5) = (Distributions.digamma)(α::Float64)::Float64
      GenSym(4) = (Distributions.digamma)(β::Float64)::Float64
      GenSym(3) = (Distributions.digamma)(s::Float64)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.Math.nan_dom_err)(GenSym(12),α::Float64)::Float64,(Base.Math.nan_dom_err)(GenSym(10),β::Float64)::Float64)),(Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),GenSym(5))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(β::Float64,1.0)),GenSym(4))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(s::Float64,2.0)),GenSym(3)))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}
  α::Float64
  β::Float64
  #s25::Int64
  s::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 100:
      GenSym(13) = (top(getfield))(d::Distributions.Beta{Float64},:α)::Float64
      GenSym(14) = (top(getfield))(d::Distributions.Beta{Float64},:β)::Float64
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 101:
      s = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 102:
      GenSym(12) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,α::Float64,0)::Float64
      GenSym(10) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,β::Float64,0)::Float64
      GenSym(6) = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))
      GenSym(8) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(5) = (Distributions.digamma)(α::Float64)::Float64
      GenSym(4) = (Distributions.digamma)(β::Float64)::Float64
      GenSym(3) = (Distributions.digamma)(s::Float64)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.Math.nan_dom_err)(GenSym(12),α::Float64)::Float64,(Base.Math.nan_dom_err)(GenSym(10),β::Float64)::Float64)),(Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),GenSym(5))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(β::Float64,1.0)),GenSym(4))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(s::Float64,2.0)),GenSym(3)))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7069#7071#7415::Tuple{}
  ######b#7070#7072#7416::Tuple{}
  ####_var0#7073#7417::Tuple{}
  ##a#7418::Float64
  ####G#7410#7419::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7411#7420::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7412#7421::Tuple{}
  ##########x#7120#7122#7126#7413#7422::Float64
  ########_var0#7123#7127#7414#7423::Tuple{}
  ######types#7133#7178#7424::Tuple{Type{Float64}}
  ##a1#7425::Float64
  ##a2#7426::Float64
  ######a#7074#7113#7427::Tuple{}
  ######b#7075#7114#7428::Tuple{}
  ######afactor#7076#7115#7429::Float64
  ######bfactor#7077#7116#7430::Float64
  ####_var0#7117#7431::Tuple{}
  ##a#7432::Float64
  ####G#7410#7433::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7411#7434::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7412#7435::Tuple{}
  ##########x#7120#7122#7126#7413#7436::Float64
  ########_var0#7123#7127#7414#7437::Tuple{}
  ######types#7133#7178#7438::Tuple{Type{Float64}}
  ##a1#7439::Float64
  ##a2#7440::Float64
  ######a#7074#7113#7441::Tuple{}
  ######b#7075#7114#7442::Tuple{}
  ######afactor#7076#7115#7443::Float64
  ######bfactor#7077#7116#7444::Float64
  ####_var0#7117#7445::Tuple{}
  ##a#7446::Float64
  ####G#7410#7447::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7411#7448::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7412#7449::Tuple{}
  ##########x#7120#7122#7126#7413#7450::Float64
  ########_var0#7123#7127#7414#7451::Tuple{}
  ######types#7133#7178#7452::Tuple{Type{Float64}}
  ##a1#7453::Float64
  ##a2#7454::Float64
  ######a#7074#7113#7455::Tuple{}
  ######b#7075#7114#7456::Tuple{}
  ######afactor#7076#7115#7457::Float64
  ######bfactor#7077#7116#7458::Float64
  ####_var0#7117#7459::Tuple{}
  ######a#7200#7202#7460::Tuple{}
  ######b#7201#7203#7461::Tuple{}
  ####_var0#7204#7462::Tuple{}
  ######a#7200#7202#7463::Tuple{}
  ######b#7201#7203#7464::Tuple{}
  ####_var0#7204#7465::Tuple{}
  ######a#7069#7071#7466::Tuple{}
  ######b#7070#7072#7467::Tuple{}
  ####_var0#7073#7468::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 100:
      GenSym(16) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 101:
      $(Expr(:boundscheck, false))
      ####_var0#7073#7417 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7073#7417 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 102:
      GenSym(12) = (Distributions.lbeta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7446 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (ForwardDiff.digamma)(##a#7446::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7446::Float64)::Float64
      ####G#7410#7447 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7414#7451 = (top(tuple))()::Tuple{}
      goto 17
      ########_var0#7123#7127#7414#7451 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(9), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7453 = GenSym(10)
      ##a2#7454 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7459 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7117#7459 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7453::Float64,##a2#7454::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7204#7462 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7204#7462 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##a#7432 = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (ForwardDiff.digamma)(##a#7432::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7432::Float64)::Float64
      ####G#7410#7433 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7414#7437 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7123#7127#7414#7437 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(6), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7439 = GenSym(7)
      ##a2#7440 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7445 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7117#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7439::Float64,##a2#7440::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7204#7465 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7204#7465 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7418 = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7418::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7418::Float64)::Float64
      ####G#7410#7419 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7414#7423 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7123#7127#7414#7423 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(3), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7425 = GenSym(4)
      ##a2#7426 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7431 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7117#7431 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7425::Float64,##a2#7426::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7073#7468 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7073#7468 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(12),:value)::Float64,(top(getfield))(GenSym(13),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(14),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7069#7071#7415::Tuple{}
  ######b#7070#7072#7416::Tuple{}
  ####_var0#7073#7417::Tuple{}
  ##a#7418::Float64
  ####G#7410#7419::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7411#7420::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7412#7421::Tuple{}
  ##########x#7120#7122#7126#7413#7422::Float64
  ########_var0#7123#7127#7414#7423::Tuple{}
  ######types#7133#7178#7424::Tuple{Type{Float64}}
  ##a1#7425::Float64
  ##a2#7426::Float64
  ######a#7074#7113#7427::Tuple{}
  ######b#7075#7114#7428::Tuple{}
  ######afactor#7076#7115#7429::Float64
  ######bfactor#7077#7116#7430::Float64
  ####_var0#7117#7431::Tuple{}
  ##a#7432::Float64
  ####G#7410#7433::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7411#7434::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7412#7435::Tuple{}
  ##########x#7120#7122#7126#7413#7436::Float64
  ########_var0#7123#7127#7414#7437::Tuple{}
  ######types#7133#7178#7438::Tuple{Type{Float64}}
  ##a1#7439::Float64
  ##a2#7440::Float64
  ######a#7074#7113#7441::Tuple{}
  ######b#7075#7114#7442::Tuple{}
  ######afactor#7076#7115#7443::Float64
  ######bfactor#7077#7116#7444::Float64
  ####_var0#7117#7445::Tuple{}
  ##a#7446::Float64
  ####G#7410#7447::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7411#7448::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7412#7449::Tuple{}
  ##########x#7120#7122#7126#7413#7450::Float64
  ########_var0#7123#7127#7414#7451::Tuple{}
  ######types#7133#7178#7452::Tuple{Type{Float64}}
  ##a1#7453::Float64
  ##a2#7454::Float64
  ######a#7074#7113#7455::Tuple{}
  ######b#7075#7114#7456::Tuple{}
  ######afactor#7076#7115#7457::Float64
  ######bfactor#7077#7116#7458::Float64
  ####_var0#7117#7459::Tuple{}
  ######a#7200#7202#7460::Tuple{}
  ######b#7201#7203#7461::Tuple{}
  ####_var0#7204#7462::Tuple{}
  ######a#7200#7202#7463::Tuple{}
  ######b#7201#7203#7464::Tuple{}
  ####_var0#7204#7465::Tuple{}
  ######a#7069#7071#7466::Tuple{}
  ######b#7070#7072#7467::Tuple{}
  ####_var0#7073#7468::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 100:
      GenSym(16) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 101:
      $(Expr(:boundscheck, false))
      ####_var0#7073#7417 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7073#7417 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 102:
      GenSym(12) = (Distributions.lbeta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7446 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (ForwardDiff.digamma)(##a#7446::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7446::Float64)::Float64
      ####G#7410#7447 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7414#7451 = (top(tuple))()::Tuple{}
      goto 17
      ########_var0#7123#7127#7414#7451 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(9), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7453 = GenSym(10)
      ##a2#7454 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7459 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7117#7459 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7453::Float64,##a2#7454::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7204#7462 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7204#7462 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##a#7432 = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (ForwardDiff.digamma)(##a#7432::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7432::Float64)::Float64
      ####G#7410#7433 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7414#7437 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7123#7127#7414#7437 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(6), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7439 = GenSym(7)
      ##a2#7440 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7445 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7117#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7439::Float64,##a2#7440::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7204#7465 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7204#7465 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7418 = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7418::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7418::Float64)::Float64
      ####G#7410#7419 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7414#7423 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7123#7127#7414#7423 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(3), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7425 = GenSym(4)
      ##a2#7426 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7431 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7117#7431 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7425::Float64,##a2#7426::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7073#7468 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7073#7468 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(12),:value)::Float64,(top(getfield))(GenSym(13),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(14),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7069#7071#7415::Tuple{}
  ######b#7070#7072#7416::Tuple{}
  ####_var0#7073#7417::Tuple{}
  ##a#7418::Float64
  ####G#7410#7419::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7411#7420::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7412#7421::Tuple{}
  ##########x#7120#7122#7126#7413#7422::Float64
  ########_var0#7123#7127#7414#7423::Tuple{}
  ######types#7133#7178#7424::Tuple{Type{Float64}}
  ##a1#7425::Float64
  ##a2#7426::Float64
  ######a#7074#7113#7427::Tuple{}
  ######b#7075#7114#7428::Tuple{}
  ######afactor#7076#7115#7429::Float64
  ######bfactor#7077#7116#7430::Float64
  ####_var0#7117#7431::Tuple{}
  ##a#7432::Float64
  ####G#7410#7433::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7411#7434::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7412#7435::Tuple{}
  ##########x#7120#7122#7126#7413#7436::Float64
  ########_var0#7123#7127#7414#7437::Tuple{}
  ######types#7133#7178#7438::Tuple{Type{Float64}}
  ##a1#7439::Float64
  ##a2#7440::Float64
  ######a#7074#7113#7441::Tuple{}
  ######b#7075#7114#7442::Tuple{}
  ######afactor#7076#7115#7443::Float64
  ######bfactor#7077#7116#7444::Float64
  ####_var0#7117#7445::Tuple{}
  ##a#7446::Float64
  ####G#7410#7447::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7411#7448::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7412#7449::Tuple{}
  ##########x#7120#7122#7126#7413#7450::Float64
  ########_var0#7123#7127#7414#7451::Tuple{}
  ######types#7133#7178#7452::Tuple{Type{Float64}}
  ##a1#7453::Float64
  ##a2#7454::Float64
  ######a#7074#7113#7455::Tuple{}
  ######b#7075#7114#7456::Tuple{}
  ######afactor#7076#7115#7457::Float64
  ######bfactor#7077#7116#7458::Float64
  ####_var0#7117#7459::Tuple{}
  ######a#7200#7202#7460::Tuple{}
  ######b#7201#7203#7461::Tuple{}
  ####_var0#7204#7462::Tuple{}
  ######a#7200#7202#7463::Tuple{}
  ######b#7201#7203#7464::Tuple{}
  ####_var0#7204#7465::Tuple{}
  ######a#7069#7071#7466::Tuple{}
  ######b#7070#7072#7467::Tuple{}
  ####_var0#7073#7468::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 100:
      GenSym(16) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 101:
      $(Expr(:boundscheck, false))
      ####_var0#7073#7417 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7073#7417 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 102:
      GenSym(12) = (Distributions.lbeta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7446 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (ForwardDiff.digamma)(##a#7446::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7446::Float64)::Float64
      ####G#7410#7447 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7414#7451 = (top(tuple))()::Tuple{}
      goto 17
      ########_var0#7123#7127#7414#7451 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(9), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7453 = GenSym(10)
      ##a2#7454 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7459 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7117#7459 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7453::Float64,##a2#7454::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7204#7462 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7204#7462 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##a#7432 = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (ForwardDiff.digamma)(##a#7432::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7432::Float64)::Float64
      ####G#7410#7433 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7414#7437 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7123#7127#7414#7437 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(6), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7439 = GenSym(7)
      ##a2#7440 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7445 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7117#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7439::Float64,##a2#7440::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7204#7465 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7204#7465 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7418 = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7418::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7418::Float64)::Float64
      ####G#7410#7419 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7414#7423 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7123#7127#7414#7423 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(3), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7425 = GenSym(4)
      ##a2#7426 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7431 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7117#7431 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7425::Float64,##a2#7426::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7073#7468 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7073#7468 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(12),:value)::Float64,(top(getfield))(GenSym(13),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(14),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7069#7071#7415::Tuple{}
  ######b#7070#7072#7416::Tuple{}
  ####_var0#7073#7417::Tuple{}
  ##a#7418::Float64
  ####G#7410#7419::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7411#7420::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7412#7421::Tuple{}
  ##########x#7120#7122#7126#7413#7422::Float64
  ########_var0#7123#7127#7414#7423::Tuple{}
  ######types#7133#7178#7424::Tuple{Type{Float64}}
  ##a1#7425::Float64
  ##a2#7426::Float64
  ######a#7074#7113#7427::Tuple{}
  ######b#7075#7114#7428::Tuple{}
  ######afactor#7076#7115#7429::Float64
  ######bfactor#7077#7116#7430::Float64
  ####_var0#7117#7431::Tuple{}
  ##a#7432::Float64
  ####G#7410#7433::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7411#7434::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7412#7435::Tuple{}
  ##########x#7120#7122#7126#7413#7436::Float64
  ########_var0#7123#7127#7414#7437::Tuple{}
  ######types#7133#7178#7438::Tuple{Type{Float64}}
  ##a1#7439::Float64
  ##a2#7440::Float64
  ######a#7074#7113#7441::Tuple{}
  ######b#7075#7114#7442::Tuple{}
  ######afactor#7076#7115#7443::Float64
  ######bfactor#7077#7116#7444::Float64
  ####_var0#7117#7445::Tuple{}
  ##a#7446::Float64
  ####G#7410#7447::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7118#7124#7411#7448::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7119#7121#7125#7412#7449::Tuple{}
  ##########x#7120#7122#7126#7413#7450::Float64
  ########_var0#7123#7127#7414#7451::Tuple{}
  ######types#7133#7178#7452::Tuple{Type{Float64}}
  ##a1#7453::Float64
  ##a2#7454::Float64
  ######a#7074#7113#7455::Tuple{}
  ######b#7075#7114#7456::Tuple{}
  ######afactor#7076#7115#7457::Float64
  ######bfactor#7077#7116#7458::Float64
  ####_var0#7117#7459::Tuple{}
  ######a#7200#7202#7460::Tuple{}
  ######b#7201#7203#7461::Tuple{}
  ####_var0#7204#7462::Tuple{}
  ######a#7200#7202#7463::Tuple{}
  ######b#7201#7203#7464::Tuple{}
  ####_var0#7204#7465::Tuple{}
  ######a#7069#7071#7466::Tuple{}
  ######b#7070#7072#7467::Tuple{}
  ####_var0#7073#7468::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 100:
      GenSym(16) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      β = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 101:
      $(Expr(:boundscheck, false))
      ####_var0#7073#7417 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7073#7417 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 102:
      GenSym(12) = (Distributions.lbeta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7446 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (ForwardDiff.digamma)(##a#7446::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7446::Float64)::Float64
      ####G#7410#7447 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7414#7451 = (top(tuple))()::Tuple{}
      goto 17
      ########_var0#7123#7127#7414#7451 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(9), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7453 = GenSym(10)
      ##a2#7454 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7459 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7117#7459 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7453::Float64,##a2#7454::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7204#7462 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7204#7462 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##a#7432 = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (ForwardDiff.digamma)(##a#7432::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7432::Float64)::Float64
      ####G#7410#7433 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7414#7437 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7123#7127#7414#7437 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(6), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7439 = GenSym(7)
      ##a2#7440 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7445 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7117#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7439::Float64,##a2#7440::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7204#7465 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7204#7465 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7418 = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7418::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7418::Float64)::Float64
      ####G#7410#7419 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7123#7127#7414#7423 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7123#7127#7414#7423 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(3), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7425 = GenSym(4)
      ##a2#7426 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7117#7431 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7117#7431 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7425::Float64,##a2#7426::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7073#7468 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7073#7468 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(12),:value)::Float64,(top(getfield))(GenSym(13),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(14),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 117:
      return (top(ccall))((top(tuple))("rbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 117:
      return (top(ccall))((top(tuple))("rbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 117:
      return ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:betarand)::F)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
  end::Float64

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 117:
      return (top(ccall))((top(tuple))("rbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 117:
      return (top(ccall))((top(tuple))("rbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 117:
      return ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:betarand)::F)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
  end::Float64

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 117:
      return ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:betarand)::F)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
  end::Float64

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 117:
      return ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:betarand)::F)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
  end::Float64

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/beta.jl, line 117:
      return ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:betarand)::F)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
  end::Float64




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Beta{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      GenSym(7) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(8) = (top(ccall))((top(tuple))("dbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),0,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0,GenSym(7),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(8),0)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Beta{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      GenSym(7) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(8) = (top(ccall))((top(tuple))("dbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),0,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0,GenSym(7),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(8),0)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      GenSym(1) = (StatsFuns.f64)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(0) = (StatsFuns.f64)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(9) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(10) = (top(ccall))((top(tuple))("dbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),0,GenSym(1),0,GenSym(0),0,GenSym(9),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(10),0)::Float64
  end::Float64

---- float, integer ----

Variables:
  d::Distributions.Beta{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      GenSym(7) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(8) = (top(ccall))((top(tuple))("dbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),0,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0,GenSym(7),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(8),0)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Beta{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      GenSym(7) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(8) = (top(ccall))((top(tuple))("dbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),0,(top(getfield))(d::Distributions.Beta{Float64},:α)::Float64,0,(top(getfield))(d::Distributions.Beta{Float64},:β)::Float64,0,GenSym(7),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(8),0)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      GenSym(1) = (StatsFuns.f64)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(0) = (StatsFuns.f64)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(9) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(10) = (top(ccall))((top(tuple))("dbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),0,GenSym(1),0,GenSym(0),0,GenSym(9),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(10),0)::Float64
  end::Float64

---- dual, integer ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      GenSym(1) = (StatsFuns.f64)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(0) = (StatsFuns.f64)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(9) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(10) = (top(ccall))((top(tuple))("dbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),0,GenSym(1),0,GenSym(0),0,GenSym(9),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(10),0)::Float64
  end::Float64

---- dual, float ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      GenSym(1) = (StatsFuns.f64)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(0) = (StatsFuns.f64)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(9) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(10) = (top(ccall))((top(tuple))("dbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),0,GenSym(1),0,GenSym(0),0,GenSym(9),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(10),0)::Float64
  end::Float64

---- dual, dual ----

Variables:
  d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      GenSym(1) = (StatsFuns.f64)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(0) = (StatsFuns.f64)((top(getfield))(d::Distributions.Beta{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(9) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(10) = (top(ccall))((top(tuple))("dbeta",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),0,GenSym(1),0,GenSym(0),0,GenSym(9),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(10),0)::Float64
  end::Float64




____________________________
mgf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
cf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





